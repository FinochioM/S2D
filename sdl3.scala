package sdl3

import _root_.scala.scalanative.unsafe.*
import _root_.scala.scalanative.unsigned.*
import _root_.scala.scalanative.libc.*
import _root_.scala.scalanative.*

object predef:
  private[sdl3] trait _BindgenEnumCInt[T](using eq: T =:= CInt):
    given Tag[T] = Tag.Int.asInstanceOf[Tag[T]]
    extension (inline t: T)
      inline def value: CInt = eq.apply(t)
      inline def int: CInt = eq.apply(t).toInt
  end _BindgenEnumCInt
  private[sdl3] trait _BindgenEnumCUnsignedInt[T](using eq: T =:= CUnsignedInt):
    given Tag[T] = Tag.UInt.asInstanceOf[Tag[T]]
    extension (inline t: T)
      inline def value: CUnsignedInt = eq.apply(t)
      inline def int: CInt = eq.apply(t).toInt
      inline def uint: CUnsignedInt = eq.apply(t)
  end _BindgenEnumCUnsignedInt
end predef

object enumerations:
  import predef.*

  /** Return values for optional main callbacks.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_init.h
    */
  opaque type SDL_AppResult = CUnsignedInt
  object SDL_AppResult extends _BindgenEnumCUnsignedInt[SDL_AppResult]:
    given _tag: Tag[SDL_AppResult] = Tag.UInt
    inline def define(inline a: Long): SDL_AppResult = a.toUInt
    val SDL_APP_CONTINUE = define(0)
    val SDL_APP_SUCCESS = define(1)
    val SDL_APP_FAILURE = define(2)
    inline def getName(inline value: SDL_AppResult): Option[String] =
      inline value match
        case SDL_APP_CONTINUE => Some("SDL_APP_CONTINUE")
        case SDL_APP_SUCCESS  => Some("SDL_APP_SUCCESS")
        case SDL_APP_FAILURE  => Some("SDL_APP_FAILURE")
        case _                => _root_.scala.None
    extension (a: SDL_AppResult)
      inline def &(b: SDL_AppResult): SDL_AppResult = a & b
      inline def |(b: SDL_AppResult): SDL_AppResult = a | b
      inline def is(b: SDL_AppResult): Boolean = (a & b) == b
  end SDL_AppResult

  /** Array component order, low byte -> high byte.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_pixels.h
    */
  opaque type SDL_ArrayOrder = CUnsignedInt
  object SDL_ArrayOrder extends _BindgenEnumCUnsignedInt[SDL_ArrayOrder]:
    given _tag: Tag[SDL_ArrayOrder] = Tag.UInt
    inline def define(inline a: Long): SDL_ArrayOrder = a.toUInt
    val SDL_ARRAYORDER_NONE = define(0)
    val SDL_ARRAYORDER_RGB = define(1)
    val SDL_ARRAYORDER_RGBA = define(2)
    val SDL_ARRAYORDER_ARGB = define(3)
    val SDL_ARRAYORDER_BGR = define(4)
    val SDL_ARRAYORDER_BGRA = define(5)
    val SDL_ARRAYORDER_ABGR = define(6)
    inline def getName(inline value: SDL_ArrayOrder): Option[String] =
      inline value match
        case SDL_ARRAYORDER_NONE => Some("SDL_ARRAYORDER_NONE")
        case SDL_ARRAYORDER_RGB  => Some("SDL_ARRAYORDER_RGB")
        case SDL_ARRAYORDER_RGBA => Some("SDL_ARRAYORDER_RGBA")
        case SDL_ARRAYORDER_ARGB => Some("SDL_ARRAYORDER_ARGB")
        case SDL_ARRAYORDER_BGR  => Some("SDL_ARRAYORDER_BGR")
        case SDL_ARRAYORDER_BGRA => Some("SDL_ARRAYORDER_BGRA")
        case SDL_ARRAYORDER_ABGR => Some("SDL_ARRAYORDER_ABGR")
        case _                   => _root_.scala.None
    extension (a: SDL_ArrayOrder)
      inline def &(b: SDL_ArrayOrder): SDL_ArrayOrder = a & b
      inline def |(b: SDL_ArrayOrder): SDL_ArrayOrder = a | b
      inline def is(b: SDL_ArrayOrder): Boolean = (a & b) == b
  end SDL_ArrayOrder

  /** Possible outcomes from a triggered assertion.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_assert.h
    */
  opaque type SDL_AssertState = CUnsignedInt
  object SDL_AssertState extends _BindgenEnumCUnsignedInt[SDL_AssertState]:
    given _tag: Tag[SDL_AssertState] = Tag.UInt
    inline def define(inline a: Long): SDL_AssertState = a.toUInt
    val SDL_ASSERTION_RETRY = define(0)
    val SDL_ASSERTION_BREAK = define(1)
    val SDL_ASSERTION_ABORT = define(2)
    val SDL_ASSERTION_IGNORE = define(3)
    val SDL_ASSERTION_ALWAYS_IGNORE = define(4)
    inline def getName(inline value: SDL_AssertState): Option[String] =
      inline value match
        case SDL_ASSERTION_RETRY         => Some("SDL_ASSERTION_RETRY")
        case SDL_ASSERTION_BREAK         => Some("SDL_ASSERTION_BREAK")
        case SDL_ASSERTION_ABORT         => Some("SDL_ASSERTION_ABORT")
        case SDL_ASSERTION_IGNORE        => Some("SDL_ASSERTION_IGNORE")
        case SDL_ASSERTION_ALWAYS_IGNORE => Some("SDL_ASSERTION_ALWAYS_IGNORE")
        case _                           => _root_.scala.None
    extension (a: SDL_AssertState)
      inline def &(b: SDL_AssertState): SDL_AssertState = a & b
      inline def |(b: SDL_AssertState): SDL_AssertState = a | b
      inline def is(b: SDL_AssertState): Boolean = (a & b) == b
  end SDL_AssertState

  /** Audio format.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  opaque type SDL_AudioFormat = CUnsignedInt
  object SDL_AudioFormat extends _BindgenEnumCUnsignedInt[SDL_AudioFormat]:
    given _tag: Tag[SDL_AudioFormat] = Tag.UInt
    inline def define(inline a: Long): SDL_AudioFormat = a.toUInt
    val SDL_AUDIO_UNKNOWN = define(0)
    val SDL_AUDIO_U8 = define(8)
    val SDL_AUDIO_S8 = define(32776)
    val SDL_AUDIO_S16LE = define(32784)
    val SDL_AUDIO_S16BE = define(36880)
    val SDL_AUDIO_S32LE = define(32800)
    val SDL_AUDIO_S32BE = define(36896)
    val SDL_AUDIO_F32LE = define(33056)
    val SDL_AUDIO_F32BE = define(37152)
    val SDL_AUDIO_S16 = define(32784)
    val SDL_AUDIO_S32 = define(32800)
    val SDL_AUDIO_F32 = define(33056)
    inline def getName(inline value: SDL_AudioFormat): Option[String] =
      inline value match
        case SDL_AUDIO_UNKNOWN => Some("SDL_AUDIO_UNKNOWN")
        case SDL_AUDIO_U8      => Some("SDL_AUDIO_U8")
        case SDL_AUDIO_S8      => Some("SDL_AUDIO_S8")
        case SDL_AUDIO_S16LE   => Some("SDL_AUDIO_S16LE")
        case SDL_AUDIO_S16BE   => Some("SDL_AUDIO_S16BE")
        case SDL_AUDIO_S32LE   => Some("SDL_AUDIO_S32LE")
        case SDL_AUDIO_S32BE   => Some("SDL_AUDIO_S32BE")
        case SDL_AUDIO_F32LE   => Some("SDL_AUDIO_F32LE")
        case SDL_AUDIO_F32BE   => Some("SDL_AUDIO_F32BE")
        case SDL_AUDIO_S16     => Some("SDL_AUDIO_S16")
        case SDL_AUDIO_S32     => Some("SDL_AUDIO_S32")
        case SDL_AUDIO_F32     => Some("SDL_AUDIO_F32")
        case _                 => _root_.scala.None
    extension (a: SDL_AudioFormat)
      inline def &(b: SDL_AudioFormat): SDL_AudioFormat = a & b
      inline def |(b: SDL_AudioFormat): SDL_AudioFormat = a | b
      inline def is(b: SDL_AudioFormat): Boolean = (a & b) == b
  end SDL_AudioFormat

  /** Bitmap pixel order, high bit -> low bit.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_pixels.h
    */
  opaque type SDL_BitmapOrder = CUnsignedInt
  object SDL_BitmapOrder extends _BindgenEnumCUnsignedInt[SDL_BitmapOrder]:
    given _tag: Tag[SDL_BitmapOrder] = Tag.UInt
    inline def define(inline a: Long): SDL_BitmapOrder = a.toUInt
    val SDL_BITMAPORDER_NONE = define(0)
    val SDL_BITMAPORDER_4321 = define(1)
    val SDL_BITMAPORDER_1234 = define(2)
    inline def getName(inline value: SDL_BitmapOrder): Option[String] =
      inline value match
        case SDL_BITMAPORDER_NONE => Some("SDL_BITMAPORDER_NONE")
        case SDL_BITMAPORDER_4321 => Some("SDL_BITMAPORDER_4321")
        case SDL_BITMAPORDER_1234 => Some("SDL_BITMAPORDER_1234")
        case _                    => _root_.scala.None
    extension (a: SDL_BitmapOrder)
      inline def &(b: SDL_BitmapOrder): SDL_BitmapOrder = a & b
      inline def |(b: SDL_BitmapOrder): SDL_BitmapOrder = a | b
      inline def is(b: SDL_BitmapOrder): Boolean = (a & b) == b
  end SDL_BitmapOrder

  /** The normalized factor used to multiply pixel components.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_blendmode.h
    */
  opaque type SDL_BlendFactor = CUnsignedInt
  object SDL_BlendFactor extends _BindgenEnumCUnsignedInt[SDL_BlendFactor]:
    given _tag: Tag[SDL_BlendFactor] = Tag.UInt
    inline def define(inline a: Long): SDL_BlendFactor = a.toUInt
    val SDL_BLENDFACTOR_ZERO = define(1)
    val SDL_BLENDFACTOR_ONE = define(2)
    val SDL_BLENDFACTOR_SRC_COLOR = define(3)
    val SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR = define(4)
    val SDL_BLENDFACTOR_SRC_ALPHA = define(5)
    val SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = define(6)
    val SDL_BLENDFACTOR_DST_COLOR = define(7)
    val SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR = define(8)
    val SDL_BLENDFACTOR_DST_ALPHA = define(9)
    val SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA = define(10)
    inline def getName(inline value: SDL_BlendFactor): Option[String] =
      inline value match
        case SDL_BLENDFACTOR_ZERO      => Some("SDL_BLENDFACTOR_ZERO")
        case SDL_BLENDFACTOR_ONE       => Some("SDL_BLENDFACTOR_ONE")
        case SDL_BLENDFACTOR_SRC_COLOR => Some("SDL_BLENDFACTOR_SRC_COLOR")
        case SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR =>
          Some("SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR")
        case SDL_BLENDFACTOR_SRC_ALPHA => Some("SDL_BLENDFACTOR_SRC_ALPHA")
        case SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA =>
          Some("SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA")
        case SDL_BLENDFACTOR_DST_COLOR => Some("SDL_BLENDFACTOR_DST_COLOR")
        case SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR =>
          Some("SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR")
        case SDL_BLENDFACTOR_DST_ALPHA => Some("SDL_BLENDFACTOR_DST_ALPHA")
        case SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA =>
          Some("SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA")
        case _ => _root_.scala.None
    extension (a: SDL_BlendFactor)
      inline def &(b: SDL_BlendFactor): SDL_BlendFactor = a & b
      inline def |(b: SDL_BlendFactor): SDL_BlendFactor = a | b
      inline def is(b: SDL_BlendFactor): Boolean = (a & b) == b
  end SDL_BlendFactor

  /** The blend operation used when combining source and destination pixel
    * components.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_blendmode.h
    */
  opaque type SDL_BlendOperation = CUnsignedInt
  object SDL_BlendOperation
      extends _BindgenEnumCUnsignedInt[SDL_BlendOperation]:
    given _tag: Tag[SDL_BlendOperation] = Tag.UInt
    inline def define(inline a: Long): SDL_BlendOperation = a.toUInt
    val SDL_BLENDOPERATION_ADD = define(1)
    val SDL_BLENDOPERATION_SUBTRACT = define(2)
    val SDL_BLENDOPERATION_REV_SUBTRACT = define(3)
    val SDL_BLENDOPERATION_MINIMUM = define(4)
    val SDL_BLENDOPERATION_MAXIMUM = define(5)
    inline def getName(inline value: SDL_BlendOperation): Option[String] =
      inline value match
        case SDL_BLENDOPERATION_ADD      => Some("SDL_BLENDOPERATION_ADD")
        case SDL_BLENDOPERATION_SUBTRACT => Some("SDL_BLENDOPERATION_SUBTRACT")
        case SDL_BLENDOPERATION_REV_SUBTRACT =>
          Some("SDL_BLENDOPERATION_REV_SUBTRACT")
        case SDL_BLENDOPERATION_MINIMUM => Some("SDL_BLENDOPERATION_MINIMUM")
        case SDL_BLENDOPERATION_MAXIMUM => Some("SDL_BLENDOPERATION_MAXIMUM")
        case _                          => _root_.scala.None
    extension (a: SDL_BlendOperation)
      inline def &(b: SDL_BlendOperation): SDL_BlendOperation = a & b
      inline def |(b: SDL_BlendOperation): SDL_BlendOperation = a | b
      inline def is(b: SDL_BlendOperation): Boolean = (a & b) == b
  end SDL_BlendOperation

  /** The position of camera in relation to system device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_camera.h
    */
  opaque type SDL_CameraPosition = CUnsignedInt
  object SDL_CameraPosition
      extends _BindgenEnumCUnsignedInt[SDL_CameraPosition]:
    given _tag: Tag[SDL_CameraPosition] = Tag.UInt
    inline def define(inline a: Long): SDL_CameraPosition = a.toUInt
    val SDL_CAMERA_POSITION_UNKNOWN = define(0)
    val SDL_CAMERA_POSITION_FRONT_FACING = define(1)
    val SDL_CAMERA_POSITION_BACK_FACING = define(2)
    inline def getName(inline value: SDL_CameraPosition): Option[String] =
      inline value match
        case SDL_CAMERA_POSITION_UNKNOWN => Some("SDL_CAMERA_POSITION_UNKNOWN")
        case SDL_CAMERA_POSITION_FRONT_FACING =>
          Some("SDL_CAMERA_POSITION_FRONT_FACING")
        case SDL_CAMERA_POSITION_BACK_FACING =>
          Some("SDL_CAMERA_POSITION_BACK_FACING")
        case _ => _root_.scala.None
    extension (a: SDL_CameraPosition)
      inline def &(b: SDL_CameraPosition): SDL_CameraPosition = a & b
      inline def |(b: SDL_CameraPosition): SDL_CameraPosition = a | b
      inline def is(b: SDL_CameraPosition): Boolean = (a & b) == b
  end SDL_CameraPosition

  /** Auto capitalization type.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_keyboard.h
    */
  opaque type SDL_Capitalization = CUnsignedInt
  object SDL_Capitalization
      extends _BindgenEnumCUnsignedInt[SDL_Capitalization]:
    given _tag: Tag[SDL_Capitalization] = Tag.UInt
    inline def define(inline a: Long): SDL_Capitalization = a.toUInt
    val SDL_CAPITALIZE_NONE = define(0)
    val SDL_CAPITALIZE_SENTENCES = define(1)
    val SDL_CAPITALIZE_WORDS = define(2)
    val SDL_CAPITALIZE_LETTERS = define(3)
    inline def getName(inline value: SDL_Capitalization): Option[String] =
      inline value match
        case SDL_CAPITALIZE_NONE      => Some("SDL_CAPITALIZE_NONE")
        case SDL_CAPITALIZE_SENTENCES => Some("SDL_CAPITALIZE_SENTENCES")
        case SDL_CAPITALIZE_WORDS     => Some("SDL_CAPITALIZE_WORDS")
        case SDL_CAPITALIZE_LETTERS   => Some("SDL_CAPITALIZE_LETTERS")
        case _                        => _root_.scala.None
    extension (a: SDL_Capitalization)
      inline def &(b: SDL_Capitalization): SDL_Capitalization = a & b
      inline def |(b: SDL_Capitalization): SDL_Capitalization = a | b
      inline def is(b: SDL_Capitalization): Boolean = (a & b) == b
  end SDL_Capitalization

  /** Colorspace chroma sample location.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_pixels.h
    */
  opaque type SDL_ChromaLocation = CUnsignedInt
  object SDL_ChromaLocation
      extends _BindgenEnumCUnsignedInt[SDL_ChromaLocation]:
    given _tag: Tag[SDL_ChromaLocation] = Tag.UInt
    inline def define(inline a: Long): SDL_ChromaLocation = a.toUInt
    val SDL_CHROMA_LOCATION_NONE = define(0)
    val SDL_CHROMA_LOCATION_LEFT = define(1)
    val SDL_CHROMA_LOCATION_CENTER = define(2)
    val SDL_CHROMA_LOCATION_TOPLEFT = define(3)
    inline def getName(inline value: SDL_ChromaLocation): Option[String] =
      inline value match
        case SDL_CHROMA_LOCATION_NONE    => Some("SDL_CHROMA_LOCATION_NONE")
        case SDL_CHROMA_LOCATION_LEFT    => Some("SDL_CHROMA_LOCATION_LEFT")
        case SDL_CHROMA_LOCATION_CENTER  => Some("SDL_CHROMA_LOCATION_CENTER")
        case SDL_CHROMA_LOCATION_TOPLEFT => Some("SDL_CHROMA_LOCATION_TOPLEFT")
        case _                           => _root_.scala.None
    extension (a: SDL_ChromaLocation)
      inline def &(b: SDL_ChromaLocation): SDL_ChromaLocation = a & b
      inline def |(b: SDL_ChromaLocation): SDL_ChromaLocation = a | b
      inline def is(b: SDL_ChromaLocation): Boolean = (a & b) == b
  end SDL_ChromaLocation

  /** Colorspace color primaries, as described by
    * https://www.itu.int/rec/T-REC-H.273-201612-S/en
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_pixels.h
    */
  opaque type SDL_ColorPrimaries = CUnsignedInt
  object SDL_ColorPrimaries
      extends _BindgenEnumCUnsignedInt[SDL_ColorPrimaries]:
    given _tag: Tag[SDL_ColorPrimaries] = Tag.UInt
    inline def define(inline a: Long): SDL_ColorPrimaries = a.toUInt
    val SDL_COLOR_PRIMARIES_UNKNOWN = define(0)
    val SDL_COLOR_PRIMARIES_BT709 = define(1)
    val SDL_COLOR_PRIMARIES_UNSPECIFIED = define(2)
    val SDL_COLOR_PRIMARIES_BT470M = define(4)
    val SDL_COLOR_PRIMARIES_BT470BG = define(5)
    val SDL_COLOR_PRIMARIES_BT601 = define(6)
    val SDL_COLOR_PRIMARIES_SMPTE240 = define(7)
    val SDL_COLOR_PRIMARIES_GENERIC_FILM = define(8)
    val SDL_COLOR_PRIMARIES_BT2020 = define(9)
    val SDL_COLOR_PRIMARIES_XYZ = define(10)
    val SDL_COLOR_PRIMARIES_SMPTE431 = define(11)
    val SDL_COLOR_PRIMARIES_SMPTE432 = define(12)
    val SDL_COLOR_PRIMARIES_EBU3213 = define(22)
    val SDL_COLOR_PRIMARIES_CUSTOM = define(31)
    inline def getName(inline value: SDL_ColorPrimaries): Option[String] =
      inline value match
        case SDL_COLOR_PRIMARIES_UNKNOWN => Some("SDL_COLOR_PRIMARIES_UNKNOWN")
        case SDL_COLOR_PRIMARIES_BT709   => Some("SDL_COLOR_PRIMARIES_BT709")
        case SDL_COLOR_PRIMARIES_UNSPECIFIED =>
          Some("SDL_COLOR_PRIMARIES_UNSPECIFIED")
        case SDL_COLOR_PRIMARIES_BT470M  => Some("SDL_COLOR_PRIMARIES_BT470M")
        case SDL_COLOR_PRIMARIES_BT470BG => Some("SDL_COLOR_PRIMARIES_BT470BG")
        case SDL_COLOR_PRIMARIES_BT601   => Some("SDL_COLOR_PRIMARIES_BT601")
        case SDL_COLOR_PRIMARIES_SMPTE240 =>
          Some("SDL_COLOR_PRIMARIES_SMPTE240")
        case SDL_COLOR_PRIMARIES_GENERIC_FILM =>
          Some("SDL_COLOR_PRIMARIES_GENERIC_FILM")
        case SDL_COLOR_PRIMARIES_BT2020 => Some("SDL_COLOR_PRIMARIES_BT2020")
        case SDL_COLOR_PRIMARIES_XYZ    => Some("SDL_COLOR_PRIMARIES_XYZ")
        case SDL_COLOR_PRIMARIES_SMPTE431 =>
          Some("SDL_COLOR_PRIMARIES_SMPTE431")
        case SDL_COLOR_PRIMARIES_SMPTE432 =>
          Some("SDL_COLOR_PRIMARIES_SMPTE432")
        case SDL_COLOR_PRIMARIES_EBU3213 => Some("SDL_COLOR_PRIMARIES_EBU3213")
        case SDL_COLOR_PRIMARIES_CUSTOM  => Some("SDL_COLOR_PRIMARIES_CUSTOM")
        case _                           => _root_.scala.None
    extension (a: SDL_ColorPrimaries)
      inline def &(b: SDL_ColorPrimaries): SDL_ColorPrimaries = a & b
      inline def |(b: SDL_ColorPrimaries): SDL_ColorPrimaries = a | b
      inline def is(b: SDL_ColorPrimaries): Boolean = (a & b) == b
  end SDL_ColorPrimaries

  /** Colorspace color range, as described by
    * https://www.itu.int/rec/R-REC-BT.2100-2-201807-I/en
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_pixels.h
    */
  opaque type SDL_ColorRange = CUnsignedInt
  object SDL_ColorRange extends _BindgenEnumCUnsignedInt[SDL_ColorRange]:
    given _tag: Tag[SDL_ColorRange] = Tag.UInt
    inline def define(inline a: Long): SDL_ColorRange = a.toUInt
    val SDL_COLOR_RANGE_UNKNOWN = define(0)
    val SDL_COLOR_RANGE_LIMITED = define(1)
    val SDL_COLOR_RANGE_FULL = define(2)
    inline def getName(inline value: SDL_ColorRange): Option[String] =
      inline value match
        case SDL_COLOR_RANGE_UNKNOWN => Some("SDL_COLOR_RANGE_UNKNOWN")
        case SDL_COLOR_RANGE_LIMITED => Some("SDL_COLOR_RANGE_LIMITED")
        case SDL_COLOR_RANGE_FULL    => Some("SDL_COLOR_RANGE_FULL")
        case _                       => _root_.scala.None
    extension (a: SDL_ColorRange)
      inline def &(b: SDL_ColorRange): SDL_ColorRange = a & b
      inline def |(b: SDL_ColorRange): SDL_ColorRange = a | b
      inline def is(b: SDL_ColorRange): Boolean = (a & b) == b
  end SDL_ColorRange

  /** Colorspace color type.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_pixels.h
    */
  opaque type SDL_ColorType = CUnsignedInt
  object SDL_ColorType extends _BindgenEnumCUnsignedInt[SDL_ColorType]:
    given _tag: Tag[SDL_ColorType] = Tag.UInt
    inline def define(inline a: Long): SDL_ColorType = a.toUInt
    val SDL_COLOR_TYPE_UNKNOWN = define(0)
    val SDL_COLOR_TYPE_RGB = define(1)
    val SDL_COLOR_TYPE_YCBCR = define(2)
    inline def getName(inline value: SDL_ColorType): Option[String] =
      inline value match
        case SDL_COLOR_TYPE_UNKNOWN => Some("SDL_COLOR_TYPE_UNKNOWN")
        case SDL_COLOR_TYPE_RGB     => Some("SDL_COLOR_TYPE_RGB")
        case SDL_COLOR_TYPE_YCBCR   => Some("SDL_COLOR_TYPE_YCBCR")
        case _                      => _root_.scala.None
    extension (a: SDL_ColorType)
      inline def &(b: SDL_ColorType): SDL_ColorType = a & b
      inline def |(b: SDL_ColorType): SDL_ColorType = a | b
      inline def is(b: SDL_ColorType): Boolean = (a & b) == b
  end SDL_ColorType

  /** Colorspace definitions.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_pixels.h
    */
  opaque type SDL_Colorspace = CUnsignedInt
  object SDL_Colorspace extends _BindgenEnumCUnsignedInt[SDL_Colorspace]:
    given _tag: Tag[SDL_Colorspace] = Tag.UInt
    inline def define(inline a: Long): SDL_Colorspace = a.toUInt
    val SDL_COLORSPACE_UNKNOWN = define(0)
    val SDL_COLORSPACE_SRGB = define(301991328)
    val SDL_COLORSPACE_SRGB_LINEAR = define(301991168)
    val SDL_COLORSPACE_HDR10 = define(301999616)
    val SDL_COLORSPACE_JPEG = define(570426566)
    val SDL_COLORSPACE_BT601_LIMITED = define(554703046)
    val SDL_COLORSPACE_BT601_FULL = define(571480262)
    val SDL_COLORSPACE_BT709_LIMITED = define(554697761)
    val SDL_COLORSPACE_BT709_FULL = define(571474977)
    val SDL_COLORSPACE_BT2020_LIMITED = define(554706441)
    val SDL_COLORSPACE_BT2020_FULL = define(571483657)
    val SDL_COLORSPACE_RGB_DEFAULT = define(301991328)
    val SDL_COLORSPACE_YUV_DEFAULT = define(570426566)
    inline def getName(inline value: SDL_Colorspace): Option[String] =
      inline value match
        case SDL_COLORSPACE_UNKNOWN     => Some("SDL_COLORSPACE_UNKNOWN")
        case SDL_COLORSPACE_SRGB        => Some("SDL_COLORSPACE_SRGB")
        case SDL_COLORSPACE_SRGB_LINEAR => Some("SDL_COLORSPACE_SRGB_LINEAR")
        case SDL_COLORSPACE_HDR10       => Some("SDL_COLORSPACE_HDR10")
        case SDL_COLORSPACE_JPEG        => Some("SDL_COLORSPACE_JPEG")
        case SDL_COLORSPACE_BT601_LIMITED =>
          Some("SDL_COLORSPACE_BT601_LIMITED")
        case SDL_COLORSPACE_BT601_FULL => Some("SDL_COLORSPACE_BT601_FULL")
        case SDL_COLORSPACE_BT709_LIMITED =>
          Some("SDL_COLORSPACE_BT709_LIMITED")
        case SDL_COLORSPACE_BT709_FULL => Some("SDL_COLORSPACE_BT709_FULL")
        case SDL_COLORSPACE_BT2020_LIMITED =>
          Some("SDL_COLORSPACE_BT2020_LIMITED")
        case SDL_COLORSPACE_BT2020_FULL => Some("SDL_COLORSPACE_BT2020_FULL")
        case SDL_COLORSPACE_RGB_DEFAULT => Some("SDL_COLORSPACE_RGB_DEFAULT")
        case SDL_COLORSPACE_YUV_DEFAULT => Some("SDL_COLORSPACE_YUV_DEFAULT")
        case _                          => _root_.scala.None
    extension (a: SDL_Colorspace)
      inline def &(b: SDL_Colorspace): SDL_Colorspace = a & b
      inline def |(b: SDL_Colorspace): SDL_Colorspace = a | b
      inline def is(b: SDL_Colorspace): Boolean = (a & b) == b
  end SDL_Colorspace

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  opaque type SDL_DUMMY_ENUM = CUnsignedInt
  object SDL_DUMMY_ENUM extends _BindgenEnumCUnsignedInt[SDL_DUMMY_ENUM]:
    given _tag: Tag[SDL_DUMMY_ENUM] = Tag.UInt
    inline def define(inline a: Long): SDL_DUMMY_ENUM = a.toUInt
    val DUMMY_ENUM_VALUE = define(0)
    inline def getName(inline value: SDL_DUMMY_ENUM): Option[String] =
      inline value match
        case DUMMY_ENUM_VALUE => Some("DUMMY_ENUM_VALUE")
        case _                => _root_.scala.None
    extension (a: SDL_DUMMY_ENUM)
      inline def &(b: SDL_DUMMY_ENUM): SDL_DUMMY_ENUM = a & b
      inline def |(b: SDL_DUMMY_ENUM): SDL_DUMMY_ENUM = a | b
      inline def is(b: SDL_DUMMY_ENUM): Boolean = (a & b) == b
  end SDL_DUMMY_ENUM

  /** The preferred date format of the current system locale.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_time.h
    */
  opaque type SDL_DateFormat = CUnsignedInt
  object SDL_DateFormat extends _BindgenEnumCUnsignedInt[SDL_DateFormat]:
    given _tag: Tag[SDL_DateFormat] = Tag.UInt
    inline def define(inline a: Long): SDL_DateFormat = a.toUInt
    val SDL_DATE_FORMAT_YYYYMMDD = define(0)
    val SDL_DATE_FORMAT_DDMMYYYY = define(1)
    val SDL_DATE_FORMAT_MMDDYYYY = define(2)
    inline def getName(inline value: SDL_DateFormat): Option[String] =
      inline value match
        case SDL_DATE_FORMAT_YYYYMMDD => Some("SDL_DATE_FORMAT_YYYYMMDD")
        case SDL_DATE_FORMAT_DDMMYYYY => Some("SDL_DATE_FORMAT_DDMMYYYY")
        case SDL_DATE_FORMAT_MMDDYYYY => Some("SDL_DATE_FORMAT_MMDDYYYY")
        case _                        => _root_.scala.None
    extension (a: SDL_DateFormat)
      inline def &(b: SDL_DateFormat): SDL_DateFormat = a & b
      inline def |(b: SDL_DateFormat): SDL_DateFormat = a | b
      inline def is(b: SDL_DateFormat): Boolean = (a & b) == b
  end SDL_DateFormat

  /** Display orientation values; the way a display is rotated.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  opaque type SDL_DisplayOrientation = CUnsignedInt
  object SDL_DisplayOrientation
      extends _BindgenEnumCUnsignedInt[SDL_DisplayOrientation]:
    given _tag: Tag[SDL_DisplayOrientation] = Tag.UInt
    inline def define(inline a: Long): SDL_DisplayOrientation = a.toUInt
    val SDL_ORIENTATION_UNKNOWN = define(0)
    val SDL_ORIENTATION_LANDSCAPE = define(1)
    val SDL_ORIENTATION_LANDSCAPE_FLIPPED = define(2)
    val SDL_ORIENTATION_PORTRAIT = define(3)
    val SDL_ORIENTATION_PORTRAIT_FLIPPED = define(4)
    inline def getName(inline value: SDL_DisplayOrientation): Option[String] =
      inline value match
        case SDL_ORIENTATION_UNKNOWN   => Some("SDL_ORIENTATION_UNKNOWN")
        case SDL_ORIENTATION_LANDSCAPE => Some("SDL_ORIENTATION_LANDSCAPE")
        case SDL_ORIENTATION_LANDSCAPE_FLIPPED =>
          Some("SDL_ORIENTATION_LANDSCAPE_FLIPPED")
        case SDL_ORIENTATION_PORTRAIT => Some("SDL_ORIENTATION_PORTRAIT")
        case SDL_ORIENTATION_PORTRAIT_FLIPPED =>
          Some("SDL_ORIENTATION_PORTRAIT_FLIPPED")
        case _ => _root_.scala.None
    extension (a: SDL_DisplayOrientation)
      inline def &(b: SDL_DisplayOrientation): SDL_DisplayOrientation = a & b
      inline def |(b: SDL_DisplayOrientation): SDL_DisplayOrientation = a | b
      inline def is(b: SDL_DisplayOrientation): Boolean = (a & b) == b
  end SDL_DisplayOrientation

  /** Possible results from an enumeration callback.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_filesystem.h
    */
  opaque type SDL_EnumerationResult = CUnsignedInt
  object SDL_EnumerationResult
      extends _BindgenEnumCUnsignedInt[SDL_EnumerationResult]:
    given _tag: Tag[SDL_EnumerationResult] = Tag.UInt
    inline def define(inline a: Long): SDL_EnumerationResult = a.toUInt
    val SDL_ENUM_CONTINUE = define(0)
    val SDL_ENUM_SUCCESS = define(1)
    val SDL_ENUM_FAILURE = define(2)
    inline def getName(inline value: SDL_EnumerationResult): Option[String] =
      inline value match
        case SDL_ENUM_CONTINUE => Some("SDL_ENUM_CONTINUE")
        case SDL_ENUM_SUCCESS  => Some("SDL_ENUM_SUCCESS")
        case SDL_ENUM_FAILURE  => Some("SDL_ENUM_FAILURE")
        case _                 => _root_.scala.None
    extension (a: SDL_EnumerationResult)
      inline def &(b: SDL_EnumerationResult): SDL_EnumerationResult = a & b
      inline def |(b: SDL_EnumerationResult): SDL_EnumerationResult = a | b
      inline def is(b: SDL_EnumerationResult): Boolean = (a & b) == b
  end SDL_EnumerationResult

  /** The type of action to request from SDL_PeepEvents().
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  opaque type SDL_EventAction = CUnsignedInt
  object SDL_EventAction extends _BindgenEnumCUnsignedInt[SDL_EventAction]:
    given _tag: Tag[SDL_EventAction] = Tag.UInt
    inline def define(inline a: Long): SDL_EventAction = a.toUInt
    val SDL_ADDEVENT = define(0)
    val SDL_PEEKEVENT = define(1)
    val SDL_GETEVENT = define(2)
    inline def getName(inline value: SDL_EventAction): Option[String] =
      inline value match
        case SDL_ADDEVENT  => Some("SDL_ADDEVENT")
        case SDL_PEEKEVENT => Some("SDL_PEEKEVENT")
        case SDL_GETEVENT  => Some("SDL_GETEVENT")
        case _             => _root_.scala.None
    extension (a: SDL_EventAction)
      inline def &(b: SDL_EventAction): SDL_EventAction = a & b
      inline def |(b: SDL_EventAction): SDL_EventAction = a | b
      inline def is(b: SDL_EventAction): Boolean = (a & b) == b
  end SDL_EventAction

  /** The types of events that can be delivered.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  opaque type SDL_EventType = CUnsignedInt
  object SDL_EventType extends _BindgenEnumCUnsignedInt[SDL_EventType]:
    given _tag: Tag[SDL_EventType] = Tag.UInt
    inline def define(inline a: Long): SDL_EventType = a.toUInt
    val SDL_EVENT_FIRST = define(0)
    val SDL_EVENT_QUIT = define(256)
    val SDL_EVENT_TERMINATING = define(257)
    val SDL_EVENT_LOW_MEMORY = define(258)
    val SDL_EVENT_WILL_ENTER_BACKGROUND = define(259)
    val SDL_EVENT_DID_ENTER_BACKGROUND = define(260)
    val SDL_EVENT_WILL_ENTER_FOREGROUND = define(261)
    val SDL_EVENT_DID_ENTER_FOREGROUND = define(262)
    val SDL_EVENT_LOCALE_CHANGED = define(263)
    val SDL_EVENT_SYSTEM_THEME_CHANGED = define(264)
    val SDL_EVENT_DISPLAY_ORIENTATION = define(337)
    val SDL_EVENT_DISPLAY_ADDED = define(338)
    val SDL_EVENT_DISPLAY_REMOVED = define(339)
    val SDL_EVENT_DISPLAY_MOVED = define(340)
    val SDL_EVENT_DISPLAY_DESKTOP_MODE_CHANGED = define(341)
    val SDL_EVENT_DISPLAY_CURRENT_MODE_CHANGED = define(342)
    val SDL_EVENT_DISPLAY_CONTENT_SCALE_CHANGED = define(343)
    val SDL_EVENT_DISPLAY_FIRST = define(337)
    val SDL_EVENT_DISPLAY_LAST = define(343)
    val SDL_EVENT_WINDOW_SHOWN = define(514)
    val SDL_EVENT_WINDOW_HIDDEN = define(515)
    val SDL_EVENT_WINDOW_EXPOSED = define(516)
    val SDL_EVENT_WINDOW_MOVED = define(517)
    val SDL_EVENT_WINDOW_RESIZED = define(518)
    val SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED = define(519)
    val SDL_EVENT_WINDOW_METAL_VIEW_RESIZED = define(520)
    val SDL_EVENT_WINDOW_MINIMIZED = define(521)
    val SDL_EVENT_WINDOW_MAXIMIZED = define(522)
    val SDL_EVENT_WINDOW_RESTORED = define(523)
    val SDL_EVENT_WINDOW_MOUSE_ENTER = define(524)
    val SDL_EVENT_WINDOW_MOUSE_LEAVE = define(525)
    val SDL_EVENT_WINDOW_FOCUS_GAINED = define(526)
    val SDL_EVENT_WINDOW_FOCUS_LOST = define(527)
    val SDL_EVENT_WINDOW_CLOSE_REQUESTED = define(528)
    val SDL_EVENT_WINDOW_HIT_TEST = define(529)
    val SDL_EVENT_WINDOW_ICCPROF_CHANGED = define(530)
    val SDL_EVENT_WINDOW_DISPLAY_CHANGED = define(531)
    val SDL_EVENT_WINDOW_DISPLAY_SCALE_CHANGED = define(532)
    val SDL_EVENT_WINDOW_SAFE_AREA_CHANGED = define(533)
    val SDL_EVENT_WINDOW_OCCLUDED = define(534)
    val SDL_EVENT_WINDOW_ENTER_FULLSCREEN = define(535)
    val SDL_EVENT_WINDOW_LEAVE_FULLSCREEN = define(536)
    val SDL_EVENT_WINDOW_DESTROYED = define(537)
    val SDL_EVENT_WINDOW_HDR_STATE_CHANGED = define(538)
    val SDL_EVENT_WINDOW_FIRST = define(514)
    val SDL_EVENT_WINDOW_LAST = define(538)
    val SDL_EVENT_KEY_DOWN = define(768)
    val SDL_EVENT_KEY_UP = define(769)
    val SDL_EVENT_TEXT_EDITING = define(770)
    val SDL_EVENT_TEXT_INPUT = define(771)
    val SDL_EVENT_KEYMAP_CHANGED = define(772)
    val SDL_EVENT_KEYBOARD_ADDED = define(773)
    val SDL_EVENT_KEYBOARD_REMOVED = define(774)
    val SDL_EVENT_TEXT_EDITING_CANDIDATES = define(775)
    val SDL_EVENT_MOUSE_MOTION = define(1024)
    val SDL_EVENT_MOUSE_BUTTON_DOWN = define(1025)
    val SDL_EVENT_MOUSE_BUTTON_UP = define(1026)
    val SDL_EVENT_MOUSE_WHEEL = define(1027)
    val SDL_EVENT_MOUSE_ADDED = define(1028)
    val SDL_EVENT_MOUSE_REMOVED = define(1029)
    val SDL_EVENT_JOYSTICK_AXIS_MOTION = define(1536)
    val SDL_EVENT_JOYSTICK_BALL_MOTION = define(1537)
    val SDL_EVENT_JOYSTICK_HAT_MOTION = define(1538)
    val SDL_EVENT_JOYSTICK_BUTTON_DOWN = define(1539)
    val SDL_EVENT_JOYSTICK_BUTTON_UP = define(1540)
    val SDL_EVENT_JOYSTICK_ADDED = define(1541)
    val SDL_EVENT_JOYSTICK_REMOVED = define(1542)
    val SDL_EVENT_JOYSTICK_BATTERY_UPDATED = define(1543)
    val SDL_EVENT_JOYSTICK_UPDATE_COMPLETE = define(1544)
    val SDL_EVENT_GAMEPAD_AXIS_MOTION = define(1616)
    val SDL_EVENT_GAMEPAD_BUTTON_DOWN = define(1617)
    val SDL_EVENT_GAMEPAD_BUTTON_UP = define(1618)
    val SDL_EVENT_GAMEPAD_ADDED = define(1619)
    val SDL_EVENT_GAMEPAD_REMOVED = define(1620)
    val SDL_EVENT_GAMEPAD_REMAPPED = define(1621)
    val SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN = define(1622)
    val SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION = define(1623)
    val SDL_EVENT_GAMEPAD_TOUCHPAD_UP = define(1624)
    val SDL_EVENT_GAMEPAD_SENSOR_UPDATE = define(1625)
    val SDL_EVENT_GAMEPAD_UPDATE_COMPLETE = define(1626)
    val SDL_EVENT_GAMEPAD_STEAM_HANDLE_UPDATED = define(1627)
    val SDL_EVENT_FINGER_DOWN = define(1792)
    val SDL_EVENT_FINGER_UP = define(1793)
    val SDL_EVENT_FINGER_MOTION = define(1794)
    val SDL_EVENT_CLIPBOARD_UPDATE = define(2304)
    val SDL_EVENT_DROP_FILE = define(4096)
    val SDL_EVENT_DROP_TEXT = define(4097)
    val SDL_EVENT_DROP_BEGIN = define(4098)
    val SDL_EVENT_DROP_COMPLETE = define(4099)
    val SDL_EVENT_DROP_POSITION = define(4100)
    val SDL_EVENT_AUDIO_DEVICE_ADDED = define(4352)
    val SDL_EVENT_AUDIO_DEVICE_REMOVED = define(4353)
    val SDL_EVENT_AUDIO_DEVICE_FORMAT_CHANGED = define(4354)
    val SDL_EVENT_SENSOR_UPDATE = define(4608)
    val SDL_EVENT_PEN_PROXIMITY_IN = define(4864)
    val SDL_EVENT_PEN_PROXIMITY_OUT = define(4865)
    val SDL_EVENT_PEN_DOWN = define(4866)
    val SDL_EVENT_PEN_UP = define(4867)
    val SDL_EVENT_PEN_BUTTON_DOWN = define(4868)
    val SDL_EVENT_PEN_BUTTON_UP = define(4869)
    val SDL_EVENT_PEN_MOTION = define(4870)
    val SDL_EVENT_PEN_AXIS = define(4871)
    val SDL_EVENT_CAMERA_DEVICE_ADDED = define(5120)
    val SDL_EVENT_CAMERA_DEVICE_REMOVED = define(5121)
    val SDL_EVENT_CAMERA_DEVICE_APPROVED = define(5122)
    val SDL_EVENT_CAMERA_DEVICE_DENIED = define(5123)
    val SDL_EVENT_RENDER_TARGETS_RESET = define(8192)
    val SDL_EVENT_RENDER_DEVICE_RESET = define(8193)
    val SDL_EVENT_RENDER_DEVICE_LOST = define(8194)
    val SDL_EVENT_PRIVATE0 = define(16384)
    val SDL_EVENT_PRIVATE1 = define(16385)
    val SDL_EVENT_PRIVATE2 = define(16386)
    val SDL_EVENT_PRIVATE3 = define(16387)
    val SDL_EVENT_POLL_SENTINEL = define(32512)
    val SDL_EVENT_USER = define(32768)
    val SDL_EVENT_LAST = define(65535)
    val SDL_EVENT_ENUM_PADDING = define(2147483647)
    inline def getName(inline value: SDL_EventType): Option[String] =
      inline value match
        case SDL_EVENT_FIRST       => Some("SDL_EVENT_FIRST")
        case SDL_EVENT_QUIT        => Some("SDL_EVENT_QUIT")
        case SDL_EVENT_TERMINATING => Some("SDL_EVENT_TERMINATING")
        case SDL_EVENT_LOW_MEMORY  => Some("SDL_EVENT_LOW_MEMORY")
        case SDL_EVENT_WILL_ENTER_BACKGROUND =>
          Some("SDL_EVENT_WILL_ENTER_BACKGROUND")
        case SDL_EVENT_DID_ENTER_BACKGROUND =>
          Some("SDL_EVENT_DID_ENTER_BACKGROUND")
        case SDL_EVENT_WILL_ENTER_FOREGROUND =>
          Some("SDL_EVENT_WILL_ENTER_FOREGROUND")
        case SDL_EVENT_DID_ENTER_FOREGROUND =>
          Some("SDL_EVENT_DID_ENTER_FOREGROUND")
        case SDL_EVENT_LOCALE_CHANGED => Some("SDL_EVENT_LOCALE_CHANGED")
        case SDL_EVENT_SYSTEM_THEME_CHANGED =>
          Some("SDL_EVENT_SYSTEM_THEME_CHANGED")
        case SDL_EVENT_DISPLAY_ORIENTATION =>
          Some("SDL_EVENT_DISPLAY_ORIENTATION")
        case SDL_EVENT_DISPLAY_ADDED   => Some("SDL_EVENT_DISPLAY_ADDED")
        case SDL_EVENT_DISPLAY_REMOVED => Some("SDL_EVENT_DISPLAY_REMOVED")
        case SDL_EVENT_DISPLAY_MOVED   => Some("SDL_EVENT_DISPLAY_MOVED")
        case SDL_EVENT_DISPLAY_DESKTOP_MODE_CHANGED =>
          Some("SDL_EVENT_DISPLAY_DESKTOP_MODE_CHANGED")
        case SDL_EVENT_DISPLAY_CURRENT_MODE_CHANGED =>
          Some("SDL_EVENT_DISPLAY_CURRENT_MODE_CHANGED")
        case SDL_EVENT_DISPLAY_CONTENT_SCALE_CHANGED =>
          Some("SDL_EVENT_DISPLAY_CONTENT_SCALE_CHANGED")
        case SDL_EVENT_DISPLAY_FIRST  => Some("SDL_EVENT_DISPLAY_FIRST")
        case SDL_EVENT_DISPLAY_LAST   => Some("SDL_EVENT_DISPLAY_LAST")
        case SDL_EVENT_WINDOW_SHOWN   => Some("SDL_EVENT_WINDOW_SHOWN")
        case SDL_EVENT_WINDOW_HIDDEN  => Some("SDL_EVENT_WINDOW_HIDDEN")
        case SDL_EVENT_WINDOW_EXPOSED => Some("SDL_EVENT_WINDOW_EXPOSED")
        case SDL_EVENT_WINDOW_MOVED   => Some("SDL_EVENT_WINDOW_MOVED")
        case SDL_EVENT_WINDOW_RESIZED => Some("SDL_EVENT_WINDOW_RESIZED")
        case SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED =>
          Some("SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED")
        case SDL_EVENT_WINDOW_METAL_VIEW_RESIZED =>
          Some("SDL_EVENT_WINDOW_METAL_VIEW_RESIZED")
        case SDL_EVENT_WINDOW_MINIMIZED => Some("SDL_EVENT_WINDOW_MINIMIZED")
        case SDL_EVENT_WINDOW_MAXIMIZED => Some("SDL_EVENT_WINDOW_MAXIMIZED")
        case SDL_EVENT_WINDOW_RESTORED  => Some("SDL_EVENT_WINDOW_RESTORED")
        case SDL_EVENT_WINDOW_MOUSE_ENTER =>
          Some("SDL_EVENT_WINDOW_MOUSE_ENTER")
        case SDL_EVENT_WINDOW_MOUSE_LEAVE =>
          Some("SDL_EVENT_WINDOW_MOUSE_LEAVE")
        case SDL_EVENT_WINDOW_FOCUS_GAINED =>
          Some("SDL_EVENT_WINDOW_FOCUS_GAINED")
        case SDL_EVENT_WINDOW_FOCUS_LOST => Some("SDL_EVENT_WINDOW_FOCUS_LOST")
        case SDL_EVENT_WINDOW_CLOSE_REQUESTED =>
          Some("SDL_EVENT_WINDOW_CLOSE_REQUESTED")
        case SDL_EVENT_WINDOW_HIT_TEST => Some("SDL_EVENT_WINDOW_HIT_TEST")
        case SDL_EVENT_WINDOW_ICCPROF_CHANGED =>
          Some("SDL_EVENT_WINDOW_ICCPROF_CHANGED")
        case SDL_EVENT_WINDOW_DISPLAY_CHANGED =>
          Some("SDL_EVENT_WINDOW_DISPLAY_CHANGED")
        case SDL_EVENT_WINDOW_DISPLAY_SCALE_CHANGED =>
          Some("SDL_EVENT_WINDOW_DISPLAY_SCALE_CHANGED")
        case SDL_EVENT_WINDOW_SAFE_AREA_CHANGED =>
          Some("SDL_EVENT_WINDOW_SAFE_AREA_CHANGED")
        case SDL_EVENT_WINDOW_OCCLUDED => Some("SDL_EVENT_WINDOW_OCCLUDED")
        case SDL_EVENT_WINDOW_ENTER_FULLSCREEN =>
          Some("SDL_EVENT_WINDOW_ENTER_FULLSCREEN")
        case SDL_EVENT_WINDOW_LEAVE_FULLSCREEN =>
          Some("SDL_EVENT_WINDOW_LEAVE_FULLSCREEN")
        case SDL_EVENT_WINDOW_DESTROYED => Some("SDL_EVENT_WINDOW_DESTROYED")
        case SDL_EVENT_WINDOW_HDR_STATE_CHANGED =>
          Some("SDL_EVENT_WINDOW_HDR_STATE_CHANGED")
        case SDL_EVENT_WINDOW_FIRST     => Some("SDL_EVENT_WINDOW_FIRST")
        case SDL_EVENT_WINDOW_LAST      => Some("SDL_EVENT_WINDOW_LAST")
        case SDL_EVENT_KEY_DOWN         => Some("SDL_EVENT_KEY_DOWN")
        case SDL_EVENT_KEY_UP           => Some("SDL_EVENT_KEY_UP")
        case SDL_EVENT_TEXT_EDITING     => Some("SDL_EVENT_TEXT_EDITING")
        case SDL_EVENT_TEXT_INPUT       => Some("SDL_EVENT_TEXT_INPUT")
        case SDL_EVENT_KEYMAP_CHANGED   => Some("SDL_EVENT_KEYMAP_CHANGED")
        case SDL_EVENT_KEYBOARD_ADDED   => Some("SDL_EVENT_KEYBOARD_ADDED")
        case SDL_EVENT_KEYBOARD_REMOVED => Some("SDL_EVENT_KEYBOARD_REMOVED")
        case SDL_EVENT_TEXT_EDITING_CANDIDATES =>
          Some("SDL_EVENT_TEXT_EDITING_CANDIDATES")
        case SDL_EVENT_MOUSE_MOTION      => Some("SDL_EVENT_MOUSE_MOTION")
        case SDL_EVENT_MOUSE_BUTTON_DOWN => Some("SDL_EVENT_MOUSE_BUTTON_DOWN")
        case SDL_EVENT_MOUSE_BUTTON_UP   => Some("SDL_EVENT_MOUSE_BUTTON_UP")
        case SDL_EVENT_MOUSE_WHEEL       => Some("SDL_EVENT_MOUSE_WHEEL")
        case SDL_EVENT_MOUSE_ADDED       => Some("SDL_EVENT_MOUSE_ADDED")
        case SDL_EVENT_MOUSE_REMOVED     => Some("SDL_EVENT_MOUSE_REMOVED")
        case SDL_EVENT_JOYSTICK_AXIS_MOTION =>
          Some("SDL_EVENT_JOYSTICK_AXIS_MOTION")
        case SDL_EVENT_JOYSTICK_BALL_MOTION =>
          Some("SDL_EVENT_JOYSTICK_BALL_MOTION")
        case SDL_EVENT_JOYSTICK_HAT_MOTION =>
          Some("SDL_EVENT_JOYSTICK_HAT_MOTION")
        case SDL_EVENT_JOYSTICK_BUTTON_DOWN =>
          Some("SDL_EVENT_JOYSTICK_BUTTON_DOWN")
        case SDL_EVENT_JOYSTICK_BUTTON_UP =>
          Some("SDL_EVENT_JOYSTICK_BUTTON_UP")
        case SDL_EVENT_JOYSTICK_ADDED   => Some("SDL_EVENT_JOYSTICK_ADDED")
        case SDL_EVENT_JOYSTICK_REMOVED => Some("SDL_EVENT_JOYSTICK_REMOVED")
        case SDL_EVENT_JOYSTICK_BATTERY_UPDATED =>
          Some("SDL_EVENT_JOYSTICK_BATTERY_UPDATED")
        case SDL_EVENT_JOYSTICK_UPDATE_COMPLETE =>
          Some("SDL_EVENT_JOYSTICK_UPDATE_COMPLETE")
        case SDL_EVENT_GAMEPAD_AXIS_MOTION =>
          Some("SDL_EVENT_GAMEPAD_AXIS_MOTION")
        case SDL_EVENT_GAMEPAD_BUTTON_DOWN =>
          Some("SDL_EVENT_GAMEPAD_BUTTON_DOWN")
        case SDL_EVENT_GAMEPAD_BUTTON_UP => Some("SDL_EVENT_GAMEPAD_BUTTON_UP")
        case SDL_EVENT_GAMEPAD_ADDED     => Some("SDL_EVENT_GAMEPAD_ADDED")
        case SDL_EVENT_GAMEPAD_REMOVED   => Some("SDL_EVENT_GAMEPAD_REMOVED")
        case SDL_EVENT_GAMEPAD_REMAPPED  => Some("SDL_EVENT_GAMEPAD_REMAPPED")
        case SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN =>
          Some("SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN")
        case SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION =>
          Some("SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION")
        case SDL_EVENT_GAMEPAD_TOUCHPAD_UP =>
          Some("SDL_EVENT_GAMEPAD_TOUCHPAD_UP")
        case SDL_EVENT_GAMEPAD_SENSOR_UPDATE =>
          Some("SDL_EVENT_GAMEPAD_SENSOR_UPDATE")
        case SDL_EVENT_GAMEPAD_UPDATE_COMPLETE =>
          Some("SDL_EVENT_GAMEPAD_UPDATE_COMPLETE")
        case SDL_EVENT_GAMEPAD_STEAM_HANDLE_UPDATED =>
          Some("SDL_EVENT_GAMEPAD_STEAM_HANDLE_UPDATED")
        case SDL_EVENT_FINGER_DOWN      => Some("SDL_EVENT_FINGER_DOWN")
        case SDL_EVENT_FINGER_UP        => Some("SDL_EVENT_FINGER_UP")
        case SDL_EVENT_FINGER_MOTION    => Some("SDL_EVENT_FINGER_MOTION")
        case SDL_EVENT_CLIPBOARD_UPDATE => Some("SDL_EVENT_CLIPBOARD_UPDATE")
        case SDL_EVENT_DROP_FILE        => Some("SDL_EVENT_DROP_FILE")
        case SDL_EVENT_DROP_TEXT        => Some("SDL_EVENT_DROP_TEXT")
        case SDL_EVENT_DROP_BEGIN       => Some("SDL_EVENT_DROP_BEGIN")
        case SDL_EVENT_DROP_COMPLETE    => Some("SDL_EVENT_DROP_COMPLETE")
        case SDL_EVENT_DROP_POSITION    => Some("SDL_EVENT_DROP_POSITION")
        case SDL_EVENT_AUDIO_DEVICE_ADDED =>
          Some("SDL_EVENT_AUDIO_DEVICE_ADDED")
        case SDL_EVENT_AUDIO_DEVICE_REMOVED =>
          Some("SDL_EVENT_AUDIO_DEVICE_REMOVED")
        case SDL_EVENT_AUDIO_DEVICE_FORMAT_CHANGED =>
          Some("SDL_EVENT_AUDIO_DEVICE_FORMAT_CHANGED")
        case SDL_EVENT_SENSOR_UPDATE     => Some("SDL_EVENT_SENSOR_UPDATE")
        case SDL_EVENT_PEN_PROXIMITY_IN  => Some("SDL_EVENT_PEN_PROXIMITY_IN")
        case SDL_EVENT_PEN_PROXIMITY_OUT => Some("SDL_EVENT_PEN_PROXIMITY_OUT")
        case SDL_EVENT_PEN_DOWN          => Some("SDL_EVENT_PEN_DOWN")
        case SDL_EVENT_PEN_UP            => Some("SDL_EVENT_PEN_UP")
        case SDL_EVENT_PEN_BUTTON_DOWN   => Some("SDL_EVENT_PEN_BUTTON_DOWN")
        case SDL_EVENT_PEN_BUTTON_UP     => Some("SDL_EVENT_PEN_BUTTON_UP")
        case SDL_EVENT_PEN_MOTION        => Some("SDL_EVENT_PEN_MOTION")
        case SDL_EVENT_PEN_AXIS          => Some("SDL_EVENT_PEN_AXIS")
        case SDL_EVENT_CAMERA_DEVICE_ADDED =>
          Some("SDL_EVENT_CAMERA_DEVICE_ADDED")
        case SDL_EVENT_CAMERA_DEVICE_REMOVED =>
          Some("SDL_EVENT_CAMERA_DEVICE_REMOVED")
        case SDL_EVENT_CAMERA_DEVICE_APPROVED =>
          Some("SDL_EVENT_CAMERA_DEVICE_APPROVED")
        case SDL_EVENT_CAMERA_DEVICE_DENIED =>
          Some("SDL_EVENT_CAMERA_DEVICE_DENIED")
        case SDL_EVENT_RENDER_TARGETS_RESET =>
          Some("SDL_EVENT_RENDER_TARGETS_RESET")
        case SDL_EVENT_RENDER_DEVICE_RESET =>
          Some("SDL_EVENT_RENDER_DEVICE_RESET")
        case SDL_EVENT_RENDER_DEVICE_LOST =>
          Some("SDL_EVENT_RENDER_DEVICE_LOST")
        case SDL_EVENT_PRIVATE0      => Some("SDL_EVENT_PRIVATE0")
        case SDL_EVENT_PRIVATE1      => Some("SDL_EVENT_PRIVATE1")
        case SDL_EVENT_PRIVATE2      => Some("SDL_EVENT_PRIVATE2")
        case SDL_EVENT_PRIVATE3      => Some("SDL_EVENT_PRIVATE3")
        case SDL_EVENT_POLL_SENTINEL => Some("SDL_EVENT_POLL_SENTINEL")
        case SDL_EVENT_USER          => Some("SDL_EVENT_USER")
        case SDL_EVENT_LAST          => Some("SDL_EVENT_LAST")
        case SDL_EVENT_ENUM_PADDING  => Some("SDL_EVENT_ENUM_PADDING")
        case _                       => _root_.scala.None
    extension (a: SDL_EventType)
      inline def &(b: SDL_EventType): SDL_EventType = a & b
      inline def |(b: SDL_EventType): SDL_EventType = a | b
      inline def is(b: SDL_EventType): Boolean = (a & b) == b
  end SDL_EventType

  /** Window flash operation.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  opaque type SDL_FlashOperation = CUnsignedInt
  object SDL_FlashOperation
      extends _BindgenEnumCUnsignedInt[SDL_FlashOperation]:
    given _tag: Tag[SDL_FlashOperation] = Tag.UInt
    inline def define(inline a: Long): SDL_FlashOperation = a.toUInt
    val SDL_FLASH_CANCEL = define(0)
    val SDL_FLASH_BRIEFLY = define(1)
    val SDL_FLASH_UNTIL_FOCUSED = define(2)
    inline def getName(inline value: SDL_FlashOperation): Option[String] =
      inline value match
        case SDL_FLASH_CANCEL        => Some("SDL_FLASH_CANCEL")
        case SDL_FLASH_BRIEFLY       => Some("SDL_FLASH_BRIEFLY")
        case SDL_FLASH_UNTIL_FOCUSED => Some("SDL_FLASH_UNTIL_FOCUSED")
        case _                       => _root_.scala.None
    extension (a: SDL_FlashOperation)
      inline def &(b: SDL_FlashOperation): SDL_FlashOperation = a & b
      inline def |(b: SDL_FlashOperation): SDL_FlashOperation = a | b
      inline def is(b: SDL_FlashOperation): Boolean = (a & b) == b
  end SDL_FlashOperation

  /** The flip mode.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  opaque type SDL_FlipMode = CUnsignedInt
  object SDL_FlipMode extends _BindgenEnumCUnsignedInt[SDL_FlipMode]:
    given _tag: Tag[SDL_FlipMode] = Tag.UInt
    inline def define(inline a: Long): SDL_FlipMode = a.toUInt
    val SDL_FLIP_NONE = define(0)
    val SDL_FLIP_HORIZONTAL = define(1)
    val SDL_FLIP_VERTICAL = define(2)
    inline def getName(inline value: SDL_FlipMode): Option[String] =
      inline value match
        case SDL_FLIP_NONE       => Some("SDL_FLIP_NONE")
        case SDL_FLIP_HORIZONTAL => Some("SDL_FLIP_HORIZONTAL")
        case SDL_FLIP_VERTICAL   => Some("SDL_FLIP_VERTICAL")
        case _                   => _root_.scala.None
    extension (a: SDL_FlipMode)
      inline def &(b: SDL_FlipMode): SDL_FlipMode = a & b
      inline def |(b: SDL_FlipMode): SDL_FlipMode = a | b
      inline def is(b: SDL_FlipMode): Boolean = (a & b) == b
  end SDL_FlipMode

  /** The type of the OS-provided default folder for a specific purpose.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_filesystem.h
    */
  opaque type SDL_Folder = CUnsignedInt
  object SDL_Folder extends _BindgenEnumCUnsignedInt[SDL_Folder]:
    given _tag: Tag[SDL_Folder] = Tag.UInt
    inline def define(inline a: Long): SDL_Folder = a.toUInt
    val SDL_FOLDER_HOME = define(0)
    val SDL_FOLDER_DESKTOP = define(1)
    val SDL_FOLDER_DOCUMENTS = define(2)
    val SDL_FOLDER_DOWNLOADS = define(3)
    val SDL_FOLDER_MUSIC = define(4)
    val SDL_FOLDER_PICTURES = define(5)
    val SDL_FOLDER_PUBLICSHARE = define(6)
    val SDL_FOLDER_SAVEDGAMES = define(7)
    val SDL_FOLDER_SCREENSHOTS = define(8)
    val SDL_FOLDER_TEMPLATES = define(9)
    val SDL_FOLDER_VIDEOS = define(10)
    val SDL_FOLDER_COUNT = define(11)
    inline def getName(inline value: SDL_Folder): Option[String] =
      inline value match
        case SDL_FOLDER_HOME        => Some("SDL_FOLDER_HOME")
        case SDL_FOLDER_DESKTOP     => Some("SDL_FOLDER_DESKTOP")
        case SDL_FOLDER_DOCUMENTS   => Some("SDL_FOLDER_DOCUMENTS")
        case SDL_FOLDER_DOWNLOADS   => Some("SDL_FOLDER_DOWNLOADS")
        case SDL_FOLDER_MUSIC       => Some("SDL_FOLDER_MUSIC")
        case SDL_FOLDER_PICTURES    => Some("SDL_FOLDER_PICTURES")
        case SDL_FOLDER_PUBLICSHARE => Some("SDL_FOLDER_PUBLICSHARE")
        case SDL_FOLDER_SAVEDGAMES  => Some("SDL_FOLDER_SAVEDGAMES")
        case SDL_FOLDER_SCREENSHOTS => Some("SDL_FOLDER_SCREENSHOTS")
        case SDL_FOLDER_TEMPLATES   => Some("SDL_FOLDER_TEMPLATES")
        case SDL_FOLDER_VIDEOS      => Some("SDL_FOLDER_VIDEOS")
        case SDL_FOLDER_COUNT       => Some("SDL_FOLDER_COUNT")
        case _                      => _root_.scala.None
    extension (a: SDL_Folder)
      inline def &(b: SDL_Folder): SDL_Folder = a & b
      inline def |(b: SDL_Folder): SDL_Folder = a | b
      inline def is(b: SDL_Folder): Boolean = (a & b) == b
  end SDL_Folder

  /** An enumeration of OpenGL configuration attributes.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  opaque type SDL_GLAttr = CUnsignedInt
  object SDL_GLAttr extends _BindgenEnumCUnsignedInt[SDL_GLAttr]:
    given _tag: Tag[SDL_GLAttr] = Tag.UInt
    inline def define(inline a: Long): SDL_GLAttr = a.toUInt
    val SDL_GL_RED_SIZE = define(0)
    val SDL_GL_GREEN_SIZE = define(1)
    val SDL_GL_BLUE_SIZE = define(2)
    val SDL_GL_ALPHA_SIZE = define(3)
    val SDL_GL_BUFFER_SIZE = define(4)
    val SDL_GL_DOUBLEBUFFER = define(5)
    val SDL_GL_DEPTH_SIZE = define(6)
    val SDL_GL_STENCIL_SIZE = define(7)
    val SDL_GL_ACCUM_RED_SIZE = define(8)
    val SDL_GL_ACCUM_GREEN_SIZE = define(9)
    val SDL_GL_ACCUM_BLUE_SIZE = define(10)
    val SDL_GL_ACCUM_ALPHA_SIZE = define(11)
    val SDL_GL_STEREO = define(12)
    val SDL_GL_MULTISAMPLEBUFFERS = define(13)
    val SDL_GL_MULTISAMPLESAMPLES = define(14)
    val SDL_GL_ACCELERATED_VISUAL = define(15)
    val SDL_GL_RETAINED_BACKING = define(16)
    val SDL_GL_CONTEXT_MAJOR_VERSION = define(17)
    val SDL_GL_CONTEXT_MINOR_VERSION = define(18)
    val SDL_GL_CONTEXT_FLAGS = define(19)
    val SDL_GL_CONTEXT_PROFILE_MASK = define(20)
    val SDL_GL_SHARE_WITH_CURRENT_CONTEXT = define(21)
    val SDL_GL_FRAMEBUFFER_SRGB_CAPABLE = define(22)
    val SDL_GL_CONTEXT_RELEASE_BEHAVIOR = define(23)
    val SDL_GL_CONTEXT_RESET_NOTIFICATION = define(24)
    val SDL_GL_CONTEXT_NO_ERROR = define(25)
    val SDL_GL_FLOATBUFFERS = define(26)
    val SDL_GL_EGL_PLATFORM = define(27)
    inline def getName(inline value: SDL_GLAttr): Option[String] =
      inline value match
        case SDL_GL_RED_SIZE           => Some("SDL_GL_RED_SIZE")
        case SDL_GL_GREEN_SIZE         => Some("SDL_GL_GREEN_SIZE")
        case SDL_GL_BLUE_SIZE          => Some("SDL_GL_BLUE_SIZE")
        case SDL_GL_ALPHA_SIZE         => Some("SDL_GL_ALPHA_SIZE")
        case SDL_GL_BUFFER_SIZE        => Some("SDL_GL_BUFFER_SIZE")
        case SDL_GL_DOUBLEBUFFER       => Some("SDL_GL_DOUBLEBUFFER")
        case SDL_GL_DEPTH_SIZE         => Some("SDL_GL_DEPTH_SIZE")
        case SDL_GL_STENCIL_SIZE       => Some("SDL_GL_STENCIL_SIZE")
        case SDL_GL_ACCUM_RED_SIZE     => Some("SDL_GL_ACCUM_RED_SIZE")
        case SDL_GL_ACCUM_GREEN_SIZE   => Some("SDL_GL_ACCUM_GREEN_SIZE")
        case SDL_GL_ACCUM_BLUE_SIZE    => Some("SDL_GL_ACCUM_BLUE_SIZE")
        case SDL_GL_ACCUM_ALPHA_SIZE   => Some("SDL_GL_ACCUM_ALPHA_SIZE")
        case SDL_GL_STEREO             => Some("SDL_GL_STEREO")
        case SDL_GL_MULTISAMPLEBUFFERS => Some("SDL_GL_MULTISAMPLEBUFFERS")
        case SDL_GL_MULTISAMPLESAMPLES => Some("SDL_GL_MULTISAMPLESAMPLES")
        case SDL_GL_ACCELERATED_VISUAL => Some("SDL_GL_ACCELERATED_VISUAL")
        case SDL_GL_RETAINED_BACKING   => Some("SDL_GL_RETAINED_BACKING")
        case SDL_GL_CONTEXT_MAJOR_VERSION =>
          Some("SDL_GL_CONTEXT_MAJOR_VERSION")
        case SDL_GL_CONTEXT_MINOR_VERSION =>
          Some("SDL_GL_CONTEXT_MINOR_VERSION")
        case SDL_GL_CONTEXT_FLAGS        => Some("SDL_GL_CONTEXT_FLAGS")
        case SDL_GL_CONTEXT_PROFILE_MASK => Some("SDL_GL_CONTEXT_PROFILE_MASK")
        case SDL_GL_SHARE_WITH_CURRENT_CONTEXT =>
          Some("SDL_GL_SHARE_WITH_CURRENT_CONTEXT")
        case SDL_GL_FRAMEBUFFER_SRGB_CAPABLE =>
          Some("SDL_GL_FRAMEBUFFER_SRGB_CAPABLE")
        case SDL_GL_CONTEXT_RELEASE_BEHAVIOR =>
          Some("SDL_GL_CONTEXT_RELEASE_BEHAVIOR")
        case SDL_GL_CONTEXT_RESET_NOTIFICATION =>
          Some("SDL_GL_CONTEXT_RESET_NOTIFICATION")
        case SDL_GL_CONTEXT_NO_ERROR => Some("SDL_GL_CONTEXT_NO_ERROR")
        case SDL_GL_FLOATBUFFERS     => Some("SDL_GL_FLOATBUFFERS")
        case SDL_GL_EGL_PLATFORM     => Some("SDL_GL_EGL_PLATFORM")
        case _                       => _root_.scala.None
    extension (a: SDL_GLAttr)
      inline def &(b: SDL_GLAttr): SDL_GLAttr = a & b
      inline def |(b: SDL_GLAttr): SDL_GLAttr = a | b
      inline def is(b: SDL_GLAttr): Boolean = (a & b) == b
  end SDL_GLAttr

  /** Specifies a blending factor to be used when pixels in a render target are
    * blended with existing pixels in the texture.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUBlendFactor = CUnsignedInt
  object SDL_GPUBlendFactor
      extends _BindgenEnumCUnsignedInt[SDL_GPUBlendFactor]:
    given _tag: Tag[SDL_GPUBlendFactor] = Tag.UInt
    inline def define(inline a: Long): SDL_GPUBlendFactor = a.toUInt
    val SDL_GPU_BLENDFACTOR_INVALID = define(0)
    val SDL_GPU_BLENDFACTOR_ZERO = define(1)
    val SDL_GPU_BLENDFACTOR_ONE = define(2)
    val SDL_GPU_BLENDFACTOR_SRC_COLOR = define(3)
    val SDL_GPU_BLENDFACTOR_ONE_MINUS_SRC_COLOR = define(4)
    val SDL_GPU_BLENDFACTOR_DST_COLOR = define(5)
    val SDL_GPU_BLENDFACTOR_ONE_MINUS_DST_COLOR = define(6)
    val SDL_GPU_BLENDFACTOR_SRC_ALPHA = define(7)
    val SDL_GPU_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = define(8)
    val SDL_GPU_BLENDFACTOR_DST_ALPHA = define(9)
    val SDL_GPU_BLENDFACTOR_ONE_MINUS_DST_ALPHA = define(10)
    val SDL_GPU_BLENDFACTOR_CONSTANT_COLOR = define(11)
    val SDL_GPU_BLENDFACTOR_ONE_MINUS_CONSTANT_COLOR = define(12)
    val SDL_GPU_BLENDFACTOR_SRC_ALPHA_SATURATE = define(13)
    inline def getName(inline value: SDL_GPUBlendFactor): Option[String] =
      inline value match
        case SDL_GPU_BLENDFACTOR_INVALID => Some("SDL_GPU_BLENDFACTOR_INVALID")
        case SDL_GPU_BLENDFACTOR_ZERO    => Some("SDL_GPU_BLENDFACTOR_ZERO")
        case SDL_GPU_BLENDFACTOR_ONE     => Some("SDL_GPU_BLENDFACTOR_ONE")
        case SDL_GPU_BLENDFACTOR_SRC_COLOR =>
          Some("SDL_GPU_BLENDFACTOR_SRC_COLOR")
        case SDL_GPU_BLENDFACTOR_ONE_MINUS_SRC_COLOR =>
          Some("SDL_GPU_BLENDFACTOR_ONE_MINUS_SRC_COLOR")
        case SDL_GPU_BLENDFACTOR_DST_COLOR =>
          Some("SDL_GPU_BLENDFACTOR_DST_COLOR")
        case SDL_GPU_BLENDFACTOR_ONE_MINUS_DST_COLOR =>
          Some("SDL_GPU_BLENDFACTOR_ONE_MINUS_DST_COLOR")
        case SDL_GPU_BLENDFACTOR_SRC_ALPHA =>
          Some("SDL_GPU_BLENDFACTOR_SRC_ALPHA")
        case SDL_GPU_BLENDFACTOR_ONE_MINUS_SRC_ALPHA =>
          Some("SDL_GPU_BLENDFACTOR_ONE_MINUS_SRC_ALPHA")
        case SDL_GPU_BLENDFACTOR_DST_ALPHA =>
          Some("SDL_GPU_BLENDFACTOR_DST_ALPHA")
        case SDL_GPU_BLENDFACTOR_ONE_MINUS_DST_ALPHA =>
          Some("SDL_GPU_BLENDFACTOR_ONE_MINUS_DST_ALPHA")
        case SDL_GPU_BLENDFACTOR_CONSTANT_COLOR =>
          Some("SDL_GPU_BLENDFACTOR_CONSTANT_COLOR")
        case SDL_GPU_BLENDFACTOR_ONE_MINUS_CONSTANT_COLOR =>
          Some("SDL_GPU_BLENDFACTOR_ONE_MINUS_CONSTANT_COLOR")
        case SDL_GPU_BLENDFACTOR_SRC_ALPHA_SATURATE =>
          Some("SDL_GPU_BLENDFACTOR_SRC_ALPHA_SATURATE")
        case _ => _root_.scala.None
    extension (a: SDL_GPUBlendFactor)
      inline def &(b: SDL_GPUBlendFactor): SDL_GPUBlendFactor = a & b
      inline def |(b: SDL_GPUBlendFactor): SDL_GPUBlendFactor = a | b
      inline def is(b: SDL_GPUBlendFactor): Boolean = (a & b) == b
  end SDL_GPUBlendFactor

  /** Specifies the operator to be used when pixels in a render target are
    * blended with existing pixels in the texture.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUBlendOp = CUnsignedInt
  object SDL_GPUBlendOp extends _BindgenEnumCUnsignedInt[SDL_GPUBlendOp]:
    given _tag: Tag[SDL_GPUBlendOp] = Tag.UInt
    inline def define(inline a: Long): SDL_GPUBlendOp = a.toUInt
    val SDL_GPU_BLENDOP_INVALID = define(0)
    val SDL_GPU_BLENDOP_ADD = define(1)
    val SDL_GPU_BLENDOP_SUBTRACT = define(2)
    val SDL_GPU_BLENDOP_REVERSE_SUBTRACT = define(3)
    val SDL_GPU_BLENDOP_MIN = define(4)
    val SDL_GPU_BLENDOP_MAX = define(5)
    inline def getName(inline value: SDL_GPUBlendOp): Option[String] =
      inline value match
        case SDL_GPU_BLENDOP_INVALID  => Some("SDL_GPU_BLENDOP_INVALID")
        case SDL_GPU_BLENDOP_ADD      => Some("SDL_GPU_BLENDOP_ADD")
        case SDL_GPU_BLENDOP_SUBTRACT => Some("SDL_GPU_BLENDOP_SUBTRACT")
        case SDL_GPU_BLENDOP_REVERSE_SUBTRACT =>
          Some("SDL_GPU_BLENDOP_REVERSE_SUBTRACT")
        case SDL_GPU_BLENDOP_MIN => Some("SDL_GPU_BLENDOP_MIN")
        case SDL_GPU_BLENDOP_MAX => Some("SDL_GPU_BLENDOP_MAX")
        case _                   => _root_.scala.None
    extension (a: SDL_GPUBlendOp)
      inline def &(b: SDL_GPUBlendOp): SDL_GPUBlendOp = a & b
      inline def |(b: SDL_GPUBlendOp): SDL_GPUBlendOp = a | b
      inline def is(b: SDL_GPUBlendOp): Boolean = (a & b) == b
  end SDL_GPUBlendOp

  /** Specifies a comparison operator for depth, stencil and sampler operations.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUCompareOp = CUnsignedInt
  object SDL_GPUCompareOp extends _BindgenEnumCUnsignedInt[SDL_GPUCompareOp]:
    given _tag: Tag[SDL_GPUCompareOp] = Tag.UInt
    inline def define(inline a: Long): SDL_GPUCompareOp = a.toUInt
    val SDL_GPU_COMPAREOP_INVALID = define(0)
    val SDL_GPU_COMPAREOP_NEVER = define(1)
    val SDL_GPU_COMPAREOP_LESS = define(2)
    val SDL_GPU_COMPAREOP_EQUAL = define(3)
    val SDL_GPU_COMPAREOP_LESS_OR_EQUAL = define(4)
    val SDL_GPU_COMPAREOP_GREATER = define(5)
    val SDL_GPU_COMPAREOP_NOT_EQUAL = define(6)
    val SDL_GPU_COMPAREOP_GREATER_OR_EQUAL = define(7)
    val SDL_GPU_COMPAREOP_ALWAYS = define(8)
    inline def getName(inline value: SDL_GPUCompareOp): Option[String] =
      inline value match
        case SDL_GPU_COMPAREOP_INVALID => Some("SDL_GPU_COMPAREOP_INVALID")
        case SDL_GPU_COMPAREOP_NEVER   => Some("SDL_GPU_COMPAREOP_NEVER")
        case SDL_GPU_COMPAREOP_LESS    => Some("SDL_GPU_COMPAREOP_LESS")
        case SDL_GPU_COMPAREOP_EQUAL   => Some("SDL_GPU_COMPAREOP_EQUAL")
        case SDL_GPU_COMPAREOP_LESS_OR_EQUAL =>
          Some("SDL_GPU_COMPAREOP_LESS_OR_EQUAL")
        case SDL_GPU_COMPAREOP_GREATER   => Some("SDL_GPU_COMPAREOP_GREATER")
        case SDL_GPU_COMPAREOP_NOT_EQUAL => Some("SDL_GPU_COMPAREOP_NOT_EQUAL")
        case SDL_GPU_COMPAREOP_GREATER_OR_EQUAL =>
          Some("SDL_GPU_COMPAREOP_GREATER_OR_EQUAL")
        case SDL_GPU_COMPAREOP_ALWAYS => Some("SDL_GPU_COMPAREOP_ALWAYS")
        case _                        => _root_.scala.None
    extension (a: SDL_GPUCompareOp)
      inline def &(b: SDL_GPUCompareOp): SDL_GPUCompareOp = a & b
      inline def |(b: SDL_GPUCompareOp): SDL_GPUCompareOp = a | b
      inline def is(b: SDL_GPUCompareOp): Boolean = (a & b) == b
  end SDL_GPUCompareOp

  /** Specifies the face of a cube map.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUCubeMapFace = CUnsignedInt
  object SDL_GPUCubeMapFace
      extends _BindgenEnumCUnsignedInt[SDL_GPUCubeMapFace]:
    given _tag: Tag[SDL_GPUCubeMapFace] = Tag.UInt
    inline def define(inline a: Long): SDL_GPUCubeMapFace = a.toUInt
    val SDL_GPU_CUBEMAPFACE_POSITIVEX = define(0)
    val SDL_GPU_CUBEMAPFACE_NEGATIVEX = define(1)
    val SDL_GPU_CUBEMAPFACE_POSITIVEY = define(2)
    val SDL_GPU_CUBEMAPFACE_NEGATIVEY = define(3)
    val SDL_GPU_CUBEMAPFACE_POSITIVEZ = define(4)
    val SDL_GPU_CUBEMAPFACE_NEGATIVEZ = define(5)
    inline def getName(inline value: SDL_GPUCubeMapFace): Option[String] =
      inline value match
        case SDL_GPU_CUBEMAPFACE_POSITIVEX =>
          Some("SDL_GPU_CUBEMAPFACE_POSITIVEX")
        case SDL_GPU_CUBEMAPFACE_NEGATIVEX =>
          Some("SDL_GPU_CUBEMAPFACE_NEGATIVEX")
        case SDL_GPU_CUBEMAPFACE_POSITIVEY =>
          Some("SDL_GPU_CUBEMAPFACE_POSITIVEY")
        case SDL_GPU_CUBEMAPFACE_NEGATIVEY =>
          Some("SDL_GPU_CUBEMAPFACE_NEGATIVEY")
        case SDL_GPU_CUBEMAPFACE_POSITIVEZ =>
          Some("SDL_GPU_CUBEMAPFACE_POSITIVEZ")
        case SDL_GPU_CUBEMAPFACE_NEGATIVEZ =>
          Some("SDL_GPU_CUBEMAPFACE_NEGATIVEZ")
        case _ => _root_.scala.None
    extension (a: SDL_GPUCubeMapFace)
      inline def &(b: SDL_GPUCubeMapFace): SDL_GPUCubeMapFace = a & b
      inline def |(b: SDL_GPUCubeMapFace): SDL_GPUCubeMapFace = a | b
      inline def is(b: SDL_GPUCubeMapFace): Boolean = (a & b) == b
  end SDL_GPUCubeMapFace

  /** Specifies the facing direction in which triangle faces will be culled.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUCullMode = CUnsignedInt
  object SDL_GPUCullMode extends _BindgenEnumCUnsignedInt[SDL_GPUCullMode]:
    given _tag: Tag[SDL_GPUCullMode] = Tag.UInt
    inline def define(inline a: Long): SDL_GPUCullMode = a.toUInt
    val SDL_GPU_CULLMODE_NONE = define(0)
    val SDL_GPU_CULLMODE_FRONT = define(1)
    val SDL_GPU_CULLMODE_BACK = define(2)
    inline def getName(inline value: SDL_GPUCullMode): Option[String] =
      inline value match
        case SDL_GPU_CULLMODE_NONE  => Some("SDL_GPU_CULLMODE_NONE")
        case SDL_GPU_CULLMODE_FRONT => Some("SDL_GPU_CULLMODE_FRONT")
        case SDL_GPU_CULLMODE_BACK  => Some("SDL_GPU_CULLMODE_BACK")
        case _                      => _root_.scala.None
    extension (a: SDL_GPUCullMode)
      inline def &(b: SDL_GPUCullMode): SDL_GPUCullMode = a & b
      inline def |(b: SDL_GPUCullMode): SDL_GPUCullMode = a | b
      inline def is(b: SDL_GPUCullMode): Boolean = (a & b) == b
  end SDL_GPUCullMode

  /** Specifies the fill mode of the graphics pipeline.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUFillMode = CUnsignedInt
  object SDL_GPUFillMode extends _BindgenEnumCUnsignedInt[SDL_GPUFillMode]:
    given _tag: Tag[SDL_GPUFillMode] = Tag.UInt
    inline def define(inline a: Long): SDL_GPUFillMode = a.toUInt
    val SDL_GPU_FILLMODE_FILL = define(0)
    val SDL_GPU_FILLMODE_LINE = define(1)
    inline def getName(inline value: SDL_GPUFillMode): Option[String] =
      inline value match
        case SDL_GPU_FILLMODE_FILL => Some("SDL_GPU_FILLMODE_FILL")
        case SDL_GPU_FILLMODE_LINE => Some("SDL_GPU_FILLMODE_LINE")
        case _                     => _root_.scala.None
    extension (a: SDL_GPUFillMode)
      inline def &(b: SDL_GPUFillMode): SDL_GPUFillMode = a & b
      inline def |(b: SDL_GPUFillMode): SDL_GPUFillMode = a | b
      inline def is(b: SDL_GPUFillMode): Boolean = (a & b) == b
  end SDL_GPUFillMode

  /** Specifies a filter operation used by a sampler.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUFilter = CUnsignedInt
  object SDL_GPUFilter extends _BindgenEnumCUnsignedInt[SDL_GPUFilter]:
    given _tag: Tag[SDL_GPUFilter] = Tag.UInt
    inline def define(inline a: Long): SDL_GPUFilter = a.toUInt
    val SDL_GPU_FILTER_NEAREST = define(0)
    val SDL_GPU_FILTER_LINEAR = define(1)
    inline def getName(inline value: SDL_GPUFilter): Option[String] =
      inline value match
        case SDL_GPU_FILTER_NEAREST => Some("SDL_GPU_FILTER_NEAREST")
        case SDL_GPU_FILTER_LINEAR  => Some("SDL_GPU_FILTER_LINEAR")
        case _                      => _root_.scala.None
    extension (a: SDL_GPUFilter)
      inline def &(b: SDL_GPUFilter): SDL_GPUFilter = a & b
      inline def |(b: SDL_GPUFilter): SDL_GPUFilter = a | b
      inline def is(b: SDL_GPUFilter): Boolean = (a & b) == b
  end SDL_GPUFilter

  /** Specifies the vertex winding that will cause a triangle to be determined
    * to be front-facing.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUFrontFace = CUnsignedInt
  object SDL_GPUFrontFace extends _BindgenEnumCUnsignedInt[SDL_GPUFrontFace]:
    given _tag: Tag[SDL_GPUFrontFace] = Tag.UInt
    inline def define(inline a: Long): SDL_GPUFrontFace = a.toUInt
    val SDL_GPU_FRONTFACE_COUNTER_CLOCKWISE = define(0)
    val SDL_GPU_FRONTFACE_CLOCKWISE = define(1)
    inline def getName(inline value: SDL_GPUFrontFace): Option[String] =
      inline value match
        case SDL_GPU_FRONTFACE_COUNTER_CLOCKWISE =>
          Some("SDL_GPU_FRONTFACE_COUNTER_CLOCKWISE")
        case SDL_GPU_FRONTFACE_CLOCKWISE => Some("SDL_GPU_FRONTFACE_CLOCKWISE")
        case _                           => _root_.scala.None
    extension (a: SDL_GPUFrontFace)
      inline def &(b: SDL_GPUFrontFace): SDL_GPUFrontFace = a & b
      inline def |(b: SDL_GPUFrontFace): SDL_GPUFrontFace = a | b
      inline def is(b: SDL_GPUFrontFace): Boolean = (a & b) == b
  end SDL_GPUFrontFace

  /** Specifies the size of elements in an index buffer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUIndexElementSize = CUnsignedInt
  object SDL_GPUIndexElementSize
      extends _BindgenEnumCUnsignedInt[SDL_GPUIndexElementSize]:
    given _tag: Tag[SDL_GPUIndexElementSize] = Tag.UInt
    inline def define(inline a: Long): SDL_GPUIndexElementSize = a.toUInt
    val SDL_GPU_INDEXELEMENTSIZE_16BIT = define(0)
    val SDL_GPU_INDEXELEMENTSIZE_32BIT = define(1)
    inline def getName(inline value: SDL_GPUIndexElementSize): Option[String] =
      inline value match
        case SDL_GPU_INDEXELEMENTSIZE_16BIT =>
          Some("SDL_GPU_INDEXELEMENTSIZE_16BIT")
        case SDL_GPU_INDEXELEMENTSIZE_32BIT =>
          Some("SDL_GPU_INDEXELEMENTSIZE_32BIT")
        case _ => _root_.scala.None
    extension (a: SDL_GPUIndexElementSize)
      inline def &(b: SDL_GPUIndexElementSize): SDL_GPUIndexElementSize = a & b
      inline def |(b: SDL_GPUIndexElementSize): SDL_GPUIndexElementSize = a | b
      inline def is(b: SDL_GPUIndexElementSize): Boolean = (a & b) == b
  end SDL_GPUIndexElementSize

  /** Specifies how the contents of a texture attached to a render pass are
    * treated at the beginning of the render pass.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPULoadOp = CUnsignedInt
  object SDL_GPULoadOp extends _BindgenEnumCUnsignedInt[SDL_GPULoadOp]:
    given _tag: Tag[SDL_GPULoadOp] = Tag.UInt
    inline def define(inline a: Long): SDL_GPULoadOp = a.toUInt
    val SDL_GPU_LOADOP_LOAD = define(0)
    val SDL_GPU_LOADOP_CLEAR = define(1)
    val SDL_GPU_LOADOP_DONT_CARE = define(2)
    inline def getName(inline value: SDL_GPULoadOp): Option[String] =
      inline value match
        case SDL_GPU_LOADOP_LOAD      => Some("SDL_GPU_LOADOP_LOAD")
        case SDL_GPU_LOADOP_CLEAR     => Some("SDL_GPU_LOADOP_CLEAR")
        case SDL_GPU_LOADOP_DONT_CARE => Some("SDL_GPU_LOADOP_DONT_CARE")
        case _                        => _root_.scala.None
    extension (a: SDL_GPULoadOp)
      inline def &(b: SDL_GPULoadOp): SDL_GPULoadOp = a & b
      inline def |(b: SDL_GPULoadOp): SDL_GPULoadOp = a | b
      inline def is(b: SDL_GPULoadOp): Boolean = (a & b) == b
  end SDL_GPULoadOp

  /** Specifies the timing that will be used to present swapchain textures to
    * the OS.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUPresentMode = CUnsignedInt
  object SDL_GPUPresentMode
      extends _BindgenEnumCUnsignedInt[SDL_GPUPresentMode]:
    given _tag: Tag[SDL_GPUPresentMode] = Tag.UInt
    inline def define(inline a: Long): SDL_GPUPresentMode = a.toUInt
    val SDL_GPU_PRESENTMODE_VSYNC = define(0)
    val SDL_GPU_PRESENTMODE_IMMEDIATE = define(1)
    val SDL_GPU_PRESENTMODE_MAILBOX = define(2)
    inline def getName(inline value: SDL_GPUPresentMode): Option[String] =
      inline value match
        case SDL_GPU_PRESENTMODE_VSYNC => Some("SDL_GPU_PRESENTMODE_VSYNC")
        case SDL_GPU_PRESENTMODE_IMMEDIATE =>
          Some("SDL_GPU_PRESENTMODE_IMMEDIATE")
        case SDL_GPU_PRESENTMODE_MAILBOX => Some("SDL_GPU_PRESENTMODE_MAILBOX")
        case _                           => _root_.scala.None
    extension (a: SDL_GPUPresentMode)
      inline def &(b: SDL_GPUPresentMode): SDL_GPUPresentMode = a & b
      inline def |(b: SDL_GPUPresentMode): SDL_GPUPresentMode = a | b
      inline def is(b: SDL_GPUPresentMode): Boolean = (a & b) == b
  end SDL_GPUPresentMode

  /** Specifies the primitive topology of a graphics pipeline.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUPrimitiveType = CUnsignedInt
  object SDL_GPUPrimitiveType
      extends _BindgenEnumCUnsignedInt[SDL_GPUPrimitiveType]:
    given _tag: Tag[SDL_GPUPrimitiveType] = Tag.UInt
    inline def define(inline a: Long): SDL_GPUPrimitiveType = a.toUInt
    val SDL_GPU_PRIMITIVETYPE_TRIANGLELIST = define(0)
    val SDL_GPU_PRIMITIVETYPE_TRIANGLESTRIP = define(1)
    val SDL_GPU_PRIMITIVETYPE_LINELIST = define(2)
    val SDL_GPU_PRIMITIVETYPE_LINESTRIP = define(3)
    val SDL_GPU_PRIMITIVETYPE_POINTLIST = define(4)
    inline def getName(inline value: SDL_GPUPrimitiveType): Option[String] =
      inline value match
        case SDL_GPU_PRIMITIVETYPE_TRIANGLELIST =>
          Some("SDL_GPU_PRIMITIVETYPE_TRIANGLELIST")
        case SDL_GPU_PRIMITIVETYPE_TRIANGLESTRIP =>
          Some("SDL_GPU_PRIMITIVETYPE_TRIANGLESTRIP")
        case SDL_GPU_PRIMITIVETYPE_LINELIST =>
          Some("SDL_GPU_PRIMITIVETYPE_LINELIST")
        case SDL_GPU_PRIMITIVETYPE_LINESTRIP =>
          Some("SDL_GPU_PRIMITIVETYPE_LINESTRIP")
        case SDL_GPU_PRIMITIVETYPE_POINTLIST =>
          Some("SDL_GPU_PRIMITIVETYPE_POINTLIST")
        case _ => _root_.scala.None
    extension (a: SDL_GPUPrimitiveType)
      inline def &(b: SDL_GPUPrimitiveType): SDL_GPUPrimitiveType = a & b
      inline def |(b: SDL_GPUPrimitiveType): SDL_GPUPrimitiveType = a | b
      inline def is(b: SDL_GPUPrimitiveType): Boolean = (a & b) == b
  end SDL_GPUPrimitiveType

  /** Specifies the sample count of a texture.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUSampleCount = CUnsignedInt
  object SDL_GPUSampleCount
      extends _BindgenEnumCUnsignedInt[SDL_GPUSampleCount]:
    given _tag: Tag[SDL_GPUSampleCount] = Tag.UInt
    inline def define(inline a: Long): SDL_GPUSampleCount = a.toUInt
    val SDL_GPU_SAMPLECOUNT_1 = define(0)
    val SDL_GPU_SAMPLECOUNT_2 = define(1)
    val SDL_GPU_SAMPLECOUNT_4 = define(2)
    val SDL_GPU_SAMPLECOUNT_8 = define(3)
    inline def getName(inline value: SDL_GPUSampleCount): Option[String] =
      inline value match
        case SDL_GPU_SAMPLECOUNT_1 => Some("SDL_GPU_SAMPLECOUNT_1")
        case SDL_GPU_SAMPLECOUNT_2 => Some("SDL_GPU_SAMPLECOUNT_2")
        case SDL_GPU_SAMPLECOUNT_4 => Some("SDL_GPU_SAMPLECOUNT_4")
        case SDL_GPU_SAMPLECOUNT_8 => Some("SDL_GPU_SAMPLECOUNT_8")
        case _                     => _root_.scala.None
    extension (a: SDL_GPUSampleCount)
      inline def &(b: SDL_GPUSampleCount): SDL_GPUSampleCount = a & b
      inline def |(b: SDL_GPUSampleCount): SDL_GPUSampleCount = a | b
      inline def is(b: SDL_GPUSampleCount): Boolean = (a & b) == b
  end SDL_GPUSampleCount

  /** Specifies behavior of texture sampling when the coordinates exceed the 0-1
    * range.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUSamplerAddressMode = CUnsignedInt
  object SDL_GPUSamplerAddressMode
      extends _BindgenEnumCUnsignedInt[SDL_GPUSamplerAddressMode]:
    given _tag: Tag[SDL_GPUSamplerAddressMode] = Tag.UInt
    inline def define(inline a: Long): SDL_GPUSamplerAddressMode = a.toUInt
    val SDL_GPU_SAMPLERADDRESSMODE_REPEAT = define(0)
    val SDL_GPU_SAMPLERADDRESSMODE_MIRRORED_REPEAT = define(1)
    val SDL_GPU_SAMPLERADDRESSMODE_CLAMP_TO_EDGE = define(2)
    inline def getName(
        inline value: SDL_GPUSamplerAddressMode
    ): Option[String] =
      inline value match
        case SDL_GPU_SAMPLERADDRESSMODE_REPEAT =>
          Some("SDL_GPU_SAMPLERADDRESSMODE_REPEAT")
        case SDL_GPU_SAMPLERADDRESSMODE_MIRRORED_REPEAT =>
          Some("SDL_GPU_SAMPLERADDRESSMODE_MIRRORED_REPEAT")
        case SDL_GPU_SAMPLERADDRESSMODE_CLAMP_TO_EDGE =>
          Some("SDL_GPU_SAMPLERADDRESSMODE_CLAMP_TO_EDGE")
        case _ => _root_.scala.None
    extension (a: SDL_GPUSamplerAddressMode)
      inline def &(b: SDL_GPUSamplerAddressMode): SDL_GPUSamplerAddressMode =
        a & b
      inline def |(b: SDL_GPUSamplerAddressMode): SDL_GPUSamplerAddressMode =
        a | b
      inline def is(b: SDL_GPUSamplerAddressMode): Boolean = (a & b) == b
    end extension
  end SDL_GPUSamplerAddressMode

  /** Specifies a mipmap mode used by a sampler.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUSamplerMipmapMode = CUnsignedInt
  object SDL_GPUSamplerMipmapMode
      extends _BindgenEnumCUnsignedInt[SDL_GPUSamplerMipmapMode]:
    given _tag: Tag[SDL_GPUSamplerMipmapMode] = Tag.UInt
    inline def define(inline a: Long): SDL_GPUSamplerMipmapMode = a.toUInt
    val SDL_GPU_SAMPLERMIPMAPMODE_NEAREST = define(0)
    val SDL_GPU_SAMPLERMIPMAPMODE_LINEAR = define(1)
    inline def getName(inline value: SDL_GPUSamplerMipmapMode): Option[String] =
      inline value match
        case SDL_GPU_SAMPLERMIPMAPMODE_NEAREST =>
          Some("SDL_GPU_SAMPLERMIPMAPMODE_NEAREST")
        case SDL_GPU_SAMPLERMIPMAPMODE_LINEAR =>
          Some("SDL_GPU_SAMPLERMIPMAPMODE_LINEAR")
        case _ => _root_.scala.None
    extension (a: SDL_GPUSamplerMipmapMode)
      inline def &(b: SDL_GPUSamplerMipmapMode): SDL_GPUSamplerMipmapMode =
        a & b
      inline def |(b: SDL_GPUSamplerMipmapMode): SDL_GPUSamplerMipmapMode =
        a | b
      inline def is(b: SDL_GPUSamplerMipmapMode): Boolean = (a & b) == b
    end extension
  end SDL_GPUSamplerMipmapMode

  /** Specifies which stage a shader program corresponds to.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUShaderStage = CUnsignedInt
  object SDL_GPUShaderStage
      extends _BindgenEnumCUnsignedInt[SDL_GPUShaderStage]:
    given _tag: Tag[SDL_GPUShaderStage] = Tag.UInt
    inline def define(inline a: Long): SDL_GPUShaderStage = a.toUInt
    val SDL_GPU_SHADERSTAGE_VERTEX = define(0)
    val SDL_GPU_SHADERSTAGE_FRAGMENT = define(1)
    inline def getName(inline value: SDL_GPUShaderStage): Option[String] =
      inline value match
        case SDL_GPU_SHADERSTAGE_VERTEX => Some("SDL_GPU_SHADERSTAGE_VERTEX")
        case SDL_GPU_SHADERSTAGE_FRAGMENT =>
          Some("SDL_GPU_SHADERSTAGE_FRAGMENT")
        case _ => _root_.scala.None
    extension (a: SDL_GPUShaderStage)
      inline def &(b: SDL_GPUShaderStage): SDL_GPUShaderStage = a & b
      inline def |(b: SDL_GPUShaderStage): SDL_GPUShaderStage = a | b
      inline def is(b: SDL_GPUShaderStage): Boolean = (a & b) == b
  end SDL_GPUShaderStage

  /** Specifies what happens to a stored stencil value if stencil tests fail or
    * pass.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUStencilOp = CUnsignedInt
  object SDL_GPUStencilOp extends _BindgenEnumCUnsignedInt[SDL_GPUStencilOp]:
    given _tag: Tag[SDL_GPUStencilOp] = Tag.UInt
    inline def define(inline a: Long): SDL_GPUStencilOp = a.toUInt
    val SDL_GPU_STENCILOP_INVALID = define(0)
    val SDL_GPU_STENCILOP_KEEP = define(1)
    val SDL_GPU_STENCILOP_ZERO = define(2)
    val SDL_GPU_STENCILOP_REPLACE = define(3)
    val SDL_GPU_STENCILOP_INCREMENT_AND_CLAMP = define(4)
    val SDL_GPU_STENCILOP_DECREMENT_AND_CLAMP = define(5)
    val SDL_GPU_STENCILOP_INVERT = define(6)
    val SDL_GPU_STENCILOP_INCREMENT_AND_WRAP = define(7)
    val SDL_GPU_STENCILOP_DECREMENT_AND_WRAP = define(8)
    inline def getName(inline value: SDL_GPUStencilOp): Option[String] =
      inline value match
        case SDL_GPU_STENCILOP_INVALID => Some("SDL_GPU_STENCILOP_INVALID")
        case SDL_GPU_STENCILOP_KEEP    => Some("SDL_GPU_STENCILOP_KEEP")
        case SDL_GPU_STENCILOP_ZERO    => Some("SDL_GPU_STENCILOP_ZERO")
        case SDL_GPU_STENCILOP_REPLACE => Some("SDL_GPU_STENCILOP_REPLACE")
        case SDL_GPU_STENCILOP_INCREMENT_AND_CLAMP =>
          Some("SDL_GPU_STENCILOP_INCREMENT_AND_CLAMP")
        case SDL_GPU_STENCILOP_DECREMENT_AND_CLAMP =>
          Some("SDL_GPU_STENCILOP_DECREMENT_AND_CLAMP")
        case SDL_GPU_STENCILOP_INVERT => Some("SDL_GPU_STENCILOP_INVERT")
        case SDL_GPU_STENCILOP_INCREMENT_AND_WRAP =>
          Some("SDL_GPU_STENCILOP_INCREMENT_AND_WRAP")
        case SDL_GPU_STENCILOP_DECREMENT_AND_WRAP =>
          Some("SDL_GPU_STENCILOP_DECREMENT_AND_WRAP")
        case _ => _root_.scala.None
    extension (a: SDL_GPUStencilOp)
      inline def &(b: SDL_GPUStencilOp): SDL_GPUStencilOp = a & b
      inline def |(b: SDL_GPUStencilOp): SDL_GPUStencilOp = a | b
      inline def is(b: SDL_GPUStencilOp): Boolean = (a & b) == b
  end SDL_GPUStencilOp

  /** Specifies how the contents of a texture attached to a render pass are
    * treated at the end of the render pass.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUStoreOp = CUnsignedInt
  object SDL_GPUStoreOp extends _BindgenEnumCUnsignedInt[SDL_GPUStoreOp]:
    given _tag: Tag[SDL_GPUStoreOp] = Tag.UInt
    inline def define(inline a: Long): SDL_GPUStoreOp = a.toUInt
    val SDL_GPU_STOREOP_STORE = define(0)
    val SDL_GPU_STOREOP_DONT_CARE = define(1)
    val SDL_GPU_STOREOP_RESOLVE = define(2)
    val SDL_GPU_STOREOP_RESOLVE_AND_STORE = define(3)
    inline def getName(inline value: SDL_GPUStoreOp): Option[String] =
      inline value match
        case SDL_GPU_STOREOP_STORE     => Some("SDL_GPU_STOREOP_STORE")
        case SDL_GPU_STOREOP_DONT_CARE => Some("SDL_GPU_STOREOP_DONT_CARE")
        case SDL_GPU_STOREOP_RESOLVE   => Some("SDL_GPU_STOREOP_RESOLVE")
        case SDL_GPU_STOREOP_RESOLVE_AND_STORE =>
          Some("SDL_GPU_STOREOP_RESOLVE_AND_STORE")
        case _ => _root_.scala.None
    extension (a: SDL_GPUStoreOp)
      inline def &(b: SDL_GPUStoreOp): SDL_GPUStoreOp = a & b
      inline def |(b: SDL_GPUStoreOp): SDL_GPUStoreOp = a | b
      inline def is(b: SDL_GPUStoreOp): Boolean = (a & b) == b
  end SDL_GPUStoreOp

  /** Specifies the texture format and colorspace of the swapchain textures.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUSwapchainComposition = CUnsignedInt
  object SDL_GPUSwapchainComposition
      extends _BindgenEnumCUnsignedInt[SDL_GPUSwapchainComposition]:
    given _tag: Tag[SDL_GPUSwapchainComposition] = Tag.UInt
    inline def define(inline a: Long): SDL_GPUSwapchainComposition = a.toUInt
    val SDL_GPU_SWAPCHAINCOMPOSITION_SDR = define(0)
    val SDL_GPU_SWAPCHAINCOMPOSITION_SDR_LINEAR = define(1)
    val SDL_GPU_SWAPCHAINCOMPOSITION_HDR_EXTENDED_LINEAR = define(2)
    val SDL_GPU_SWAPCHAINCOMPOSITION_HDR10_ST2048 = define(3)
    inline def getName(
        inline value: SDL_GPUSwapchainComposition
    ): Option[String] =
      inline value match
        case SDL_GPU_SWAPCHAINCOMPOSITION_SDR =>
          Some("SDL_GPU_SWAPCHAINCOMPOSITION_SDR")
        case SDL_GPU_SWAPCHAINCOMPOSITION_SDR_LINEAR =>
          Some("SDL_GPU_SWAPCHAINCOMPOSITION_SDR_LINEAR")
        case SDL_GPU_SWAPCHAINCOMPOSITION_HDR_EXTENDED_LINEAR =>
          Some("SDL_GPU_SWAPCHAINCOMPOSITION_HDR_EXTENDED_LINEAR")
        case SDL_GPU_SWAPCHAINCOMPOSITION_HDR10_ST2048 =>
          Some("SDL_GPU_SWAPCHAINCOMPOSITION_HDR10_ST2048")
        case _ => _root_.scala.None
    extension (a: SDL_GPUSwapchainComposition)
      inline def &(
          b: SDL_GPUSwapchainComposition
      ): SDL_GPUSwapchainComposition = a & b
      inline def |(
          b: SDL_GPUSwapchainComposition
      ): SDL_GPUSwapchainComposition = a | b
      inline def is(b: SDL_GPUSwapchainComposition): Boolean = (a & b) == b
    end extension
  end SDL_GPUSwapchainComposition

  /** Specifies the pixel format of a texture.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUTextureFormat = CUnsignedInt
  object SDL_GPUTextureFormat
      extends _BindgenEnumCUnsignedInt[SDL_GPUTextureFormat]:
    given _tag: Tag[SDL_GPUTextureFormat] = Tag.UInt
    inline def define(inline a: Long): SDL_GPUTextureFormat = a.toUInt
    val SDL_GPU_TEXTUREFORMAT_INVALID = define(0)
    val SDL_GPU_TEXTUREFORMAT_A8_UNORM = define(1)
    val SDL_GPU_TEXTUREFORMAT_R8_UNORM = define(2)
    val SDL_GPU_TEXTUREFORMAT_R8G8_UNORM = define(3)
    val SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UNORM = define(4)
    val SDL_GPU_TEXTUREFORMAT_R16_UNORM = define(5)
    val SDL_GPU_TEXTUREFORMAT_R16G16_UNORM = define(6)
    val SDL_GPU_TEXTUREFORMAT_R16G16B16A16_UNORM = define(7)
    val SDL_GPU_TEXTUREFORMAT_R10G10B10A2_UNORM = define(8)
    val SDL_GPU_TEXTUREFORMAT_B5G6R5_UNORM = define(9)
    val SDL_GPU_TEXTUREFORMAT_B5G5R5A1_UNORM = define(10)
    val SDL_GPU_TEXTUREFORMAT_B4G4R4A4_UNORM = define(11)
    val SDL_GPU_TEXTUREFORMAT_B8G8R8A8_UNORM = define(12)
    val SDL_GPU_TEXTUREFORMAT_BC1_RGBA_UNORM = define(13)
    val SDL_GPU_TEXTUREFORMAT_BC2_RGBA_UNORM = define(14)
    val SDL_GPU_TEXTUREFORMAT_BC3_RGBA_UNORM = define(15)
    val SDL_GPU_TEXTUREFORMAT_BC4_R_UNORM = define(16)
    val SDL_GPU_TEXTUREFORMAT_BC5_RG_UNORM = define(17)
    val SDL_GPU_TEXTUREFORMAT_BC7_RGBA_UNORM = define(18)
    val SDL_GPU_TEXTUREFORMAT_BC6H_RGB_FLOAT = define(19)
    val SDL_GPU_TEXTUREFORMAT_BC6H_RGB_UFLOAT = define(20)
    val SDL_GPU_TEXTUREFORMAT_R8_SNORM = define(21)
    val SDL_GPU_TEXTUREFORMAT_R8G8_SNORM = define(22)
    val SDL_GPU_TEXTUREFORMAT_R8G8B8A8_SNORM = define(23)
    val SDL_GPU_TEXTUREFORMAT_R16_SNORM = define(24)
    val SDL_GPU_TEXTUREFORMAT_R16G16_SNORM = define(25)
    val SDL_GPU_TEXTUREFORMAT_R16G16B16A16_SNORM = define(26)
    val SDL_GPU_TEXTUREFORMAT_R16_FLOAT = define(27)
    val SDL_GPU_TEXTUREFORMAT_R16G16_FLOAT = define(28)
    val SDL_GPU_TEXTUREFORMAT_R16G16B16A16_FLOAT = define(29)
    val SDL_GPU_TEXTUREFORMAT_R32_FLOAT = define(30)
    val SDL_GPU_TEXTUREFORMAT_R32G32_FLOAT = define(31)
    val SDL_GPU_TEXTUREFORMAT_R32G32B32A32_FLOAT = define(32)
    val SDL_GPU_TEXTUREFORMAT_R11G11B10_UFLOAT = define(33)
    val SDL_GPU_TEXTUREFORMAT_R8_UINT = define(34)
    val SDL_GPU_TEXTUREFORMAT_R8G8_UINT = define(35)
    val SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UINT = define(36)
    val SDL_GPU_TEXTUREFORMAT_R16_UINT = define(37)
    val SDL_GPU_TEXTUREFORMAT_R16G16_UINT = define(38)
    val SDL_GPU_TEXTUREFORMAT_R16G16B16A16_UINT = define(39)
    val SDL_GPU_TEXTUREFORMAT_R32_UINT = define(40)
    val SDL_GPU_TEXTUREFORMAT_R32G32_UINT = define(41)
    val SDL_GPU_TEXTUREFORMAT_R32G32B32A32_UINT = define(42)
    val SDL_GPU_TEXTUREFORMAT_R8_INT = define(43)
    val SDL_GPU_TEXTUREFORMAT_R8G8_INT = define(44)
    val SDL_GPU_TEXTUREFORMAT_R8G8B8A8_INT = define(45)
    val SDL_GPU_TEXTUREFORMAT_R16_INT = define(46)
    val SDL_GPU_TEXTUREFORMAT_R16G16_INT = define(47)
    val SDL_GPU_TEXTUREFORMAT_R16G16B16A16_INT = define(48)
    val SDL_GPU_TEXTUREFORMAT_R32_INT = define(49)
    val SDL_GPU_TEXTUREFORMAT_R32G32_INT = define(50)
    val SDL_GPU_TEXTUREFORMAT_R32G32B32A32_INT = define(51)
    val SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UNORM_SRGB = define(52)
    val SDL_GPU_TEXTUREFORMAT_B8G8R8A8_UNORM_SRGB = define(53)
    val SDL_GPU_TEXTUREFORMAT_BC1_RGBA_UNORM_SRGB = define(54)
    val SDL_GPU_TEXTUREFORMAT_BC2_RGBA_UNORM_SRGB = define(55)
    val SDL_GPU_TEXTUREFORMAT_BC3_RGBA_UNORM_SRGB = define(56)
    val SDL_GPU_TEXTUREFORMAT_BC7_RGBA_UNORM_SRGB = define(57)
    val SDL_GPU_TEXTUREFORMAT_D16_UNORM = define(58)
    val SDL_GPU_TEXTUREFORMAT_D24_UNORM = define(59)
    val SDL_GPU_TEXTUREFORMAT_D32_FLOAT = define(60)
    val SDL_GPU_TEXTUREFORMAT_D24_UNORM_S8_UINT = define(61)
    val SDL_GPU_TEXTUREFORMAT_D32_FLOAT_S8_UINT = define(62)
    val SDL_GPU_TEXTUREFORMAT_ASTC_4x4_UNORM = define(63)
    val SDL_GPU_TEXTUREFORMAT_ASTC_5x4_UNORM = define(64)
    val SDL_GPU_TEXTUREFORMAT_ASTC_5x5_UNORM = define(65)
    val SDL_GPU_TEXTUREFORMAT_ASTC_6x5_UNORM = define(66)
    val SDL_GPU_TEXTUREFORMAT_ASTC_6x6_UNORM = define(67)
    val SDL_GPU_TEXTUREFORMAT_ASTC_8x5_UNORM = define(68)
    val SDL_GPU_TEXTUREFORMAT_ASTC_8x6_UNORM = define(69)
    val SDL_GPU_TEXTUREFORMAT_ASTC_8x8_UNORM = define(70)
    val SDL_GPU_TEXTUREFORMAT_ASTC_10x5_UNORM = define(71)
    val SDL_GPU_TEXTUREFORMAT_ASTC_10x6_UNORM = define(72)
    val SDL_GPU_TEXTUREFORMAT_ASTC_10x8_UNORM = define(73)
    val SDL_GPU_TEXTUREFORMAT_ASTC_10x10_UNORM = define(74)
    val SDL_GPU_TEXTUREFORMAT_ASTC_12x10_UNORM = define(75)
    val SDL_GPU_TEXTUREFORMAT_ASTC_12x12_UNORM = define(76)
    val SDL_GPU_TEXTUREFORMAT_ASTC_4x4_UNORM_SRGB = define(77)
    val SDL_GPU_TEXTUREFORMAT_ASTC_5x4_UNORM_SRGB = define(78)
    val SDL_GPU_TEXTUREFORMAT_ASTC_5x5_UNORM_SRGB = define(79)
    val SDL_GPU_TEXTUREFORMAT_ASTC_6x5_UNORM_SRGB = define(80)
    val SDL_GPU_TEXTUREFORMAT_ASTC_6x6_UNORM_SRGB = define(81)
    val SDL_GPU_TEXTUREFORMAT_ASTC_8x5_UNORM_SRGB = define(82)
    val SDL_GPU_TEXTUREFORMAT_ASTC_8x6_UNORM_SRGB = define(83)
    val SDL_GPU_TEXTUREFORMAT_ASTC_8x8_UNORM_SRGB = define(84)
    val SDL_GPU_TEXTUREFORMAT_ASTC_10x5_UNORM_SRGB = define(85)
    val SDL_GPU_TEXTUREFORMAT_ASTC_10x6_UNORM_SRGB = define(86)
    val SDL_GPU_TEXTUREFORMAT_ASTC_10x8_UNORM_SRGB = define(87)
    val SDL_GPU_TEXTUREFORMAT_ASTC_10x10_UNORM_SRGB = define(88)
    val SDL_GPU_TEXTUREFORMAT_ASTC_12x10_UNORM_SRGB = define(89)
    val SDL_GPU_TEXTUREFORMAT_ASTC_12x12_UNORM_SRGB = define(90)
    val SDL_GPU_TEXTUREFORMAT_ASTC_4x4_FLOAT = define(91)
    val SDL_GPU_TEXTUREFORMAT_ASTC_5x4_FLOAT = define(92)
    val SDL_GPU_TEXTUREFORMAT_ASTC_5x5_FLOAT = define(93)
    val SDL_GPU_TEXTUREFORMAT_ASTC_6x5_FLOAT = define(94)
    val SDL_GPU_TEXTUREFORMAT_ASTC_6x6_FLOAT = define(95)
    val SDL_GPU_TEXTUREFORMAT_ASTC_8x5_FLOAT = define(96)
    val SDL_GPU_TEXTUREFORMAT_ASTC_8x6_FLOAT = define(97)
    val SDL_GPU_TEXTUREFORMAT_ASTC_8x8_FLOAT = define(98)
    val SDL_GPU_TEXTUREFORMAT_ASTC_10x5_FLOAT = define(99)
    val SDL_GPU_TEXTUREFORMAT_ASTC_10x6_FLOAT = define(100)
    val SDL_GPU_TEXTUREFORMAT_ASTC_10x8_FLOAT = define(101)
    val SDL_GPU_TEXTUREFORMAT_ASTC_10x10_FLOAT = define(102)
    val SDL_GPU_TEXTUREFORMAT_ASTC_12x10_FLOAT = define(103)
    val SDL_GPU_TEXTUREFORMAT_ASTC_12x12_FLOAT = define(104)
    inline def getName(inline value: SDL_GPUTextureFormat): Option[String] =
      inline value match
        case SDL_GPU_TEXTUREFORMAT_INVALID =>
          Some("SDL_GPU_TEXTUREFORMAT_INVALID")
        case SDL_GPU_TEXTUREFORMAT_A8_UNORM =>
          Some("SDL_GPU_TEXTUREFORMAT_A8_UNORM")
        case SDL_GPU_TEXTUREFORMAT_R8_UNORM =>
          Some("SDL_GPU_TEXTUREFORMAT_R8_UNORM")
        case SDL_GPU_TEXTUREFORMAT_R8G8_UNORM =>
          Some("SDL_GPU_TEXTUREFORMAT_R8G8_UNORM")
        case SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UNORM =>
          Some("SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UNORM")
        case SDL_GPU_TEXTUREFORMAT_R16_UNORM =>
          Some("SDL_GPU_TEXTUREFORMAT_R16_UNORM")
        case SDL_GPU_TEXTUREFORMAT_R16G16_UNORM =>
          Some("SDL_GPU_TEXTUREFORMAT_R16G16_UNORM")
        case SDL_GPU_TEXTUREFORMAT_R16G16B16A16_UNORM =>
          Some("SDL_GPU_TEXTUREFORMAT_R16G16B16A16_UNORM")
        case SDL_GPU_TEXTUREFORMAT_R10G10B10A2_UNORM =>
          Some("SDL_GPU_TEXTUREFORMAT_R10G10B10A2_UNORM")
        case SDL_GPU_TEXTUREFORMAT_B5G6R5_UNORM =>
          Some("SDL_GPU_TEXTUREFORMAT_B5G6R5_UNORM")
        case SDL_GPU_TEXTUREFORMAT_B5G5R5A1_UNORM =>
          Some("SDL_GPU_TEXTUREFORMAT_B5G5R5A1_UNORM")
        case SDL_GPU_TEXTUREFORMAT_B4G4R4A4_UNORM =>
          Some("SDL_GPU_TEXTUREFORMAT_B4G4R4A4_UNORM")
        case SDL_GPU_TEXTUREFORMAT_B8G8R8A8_UNORM =>
          Some("SDL_GPU_TEXTUREFORMAT_B8G8R8A8_UNORM")
        case SDL_GPU_TEXTUREFORMAT_BC1_RGBA_UNORM =>
          Some("SDL_GPU_TEXTUREFORMAT_BC1_RGBA_UNORM")
        case SDL_GPU_TEXTUREFORMAT_BC2_RGBA_UNORM =>
          Some("SDL_GPU_TEXTUREFORMAT_BC2_RGBA_UNORM")
        case SDL_GPU_TEXTUREFORMAT_BC3_RGBA_UNORM =>
          Some("SDL_GPU_TEXTUREFORMAT_BC3_RGBA_UNORM")
        case SDL_GPU_TEXTUREFORMAT_BC4_R_UNORM =>
          Some("SDL_GPU_TEXTUREFORMAT_BC4_R_UNORM")
        case SDL_GPU_TEXTUREFORMAT_BC5_RG_UNORM =>
          Some("SDL_GPU_TEXTUREFORMAT_BC5_RG_UNORM")
        case SDL_GPU_TEXTUREFORMAT_BC7_RGBA_UNORM =>
          Some("SDL_GPU_TEXTUREFORMAT_BC7_RGBA_UNORM")
        case SDL_GPU_TEXTUREFORMAT_BC6H_RGB_FLOAT =>
          Some("SDL_GPU_TEXTUREFORMAT_BC6H_RGB_FLOAT")
        case SDL_GPU_TEXTUREFORMAT_BC6H_RGB_UFLOAT =>
          Some("SDL_GPU_TEXTUREFORMAT_BC6H_RGB_UFLOAT")
        case SDL_GPU_TEXTUREFORMAT_R8_SNORM =>
          Some("SDL_GPU_TEXTUREFORMAT_R8_SNORM")
        case SDL_GPU_TEXTUREFORMAT_R8G8_SNORM =>
          Some("SDL_GPU_TEXTUREFORMAT_R8G8_SNORM")
        case SDL_GPU_TEXTUREFORMAT_R8G8B8A8_SNORM =>
          Some("SDL_GPU_TEXTUREFORMAT_R8G8B8A8_SNORM")
        case SDL_GPU_TEXTUREFORMAT_R16_SNORM =>
          Some("SDL_GPU_TEXTUREFORMAT_R16_SNORM")
        case SDL_GPU_TEXTUREFORMAT_R16G16_SNORM =>
          Some("SDL_GPU_TEXTUREFORMAT_R16G16_SNORM")
        case SDL_GPU_TEXTUREFORMAT_R16G16B16A16_SNORM =>
          Some("SDL_GPU_TEXTUREFORMAT_R16G16B16A16_SNORM")
        case SDL_GPU_TEXTUREFORMAT_R16_FLOAT =>
          Some("SDL_GPU_TEXTUREFORMAT_R16_FLOAT")
        case SDL_GPU_TEXTUREFORMAT_R16G16_FLOAT =>
          Some("SDL_GPU_TEXTUREFORMAT_R16G16_FLOAT")
        case SDL_GPU_TEXTUREFORMAT_R16G16B16A16_FLOAT =>
          Some("SDL_GPU_TEXTUREFORMAT_R16G16B16A16_FLOAT")
        case SDL_GPU_TEXTUREFORMAT_R32_FLOAT =>
          Some("SDL_GPU_TEXTUREFORMAT_R32_FLOAT")
        case SDL_GPU_TEXTUREFORMAT_R32G32_FLOAT =>
          Some("SDL_GPU_TEXTUREFORMAT_R32G32_FLOAT")
        case SDL_GPU_TEXTUREFORMAT_R32G32B32A32_FLOAT =>
          Some("SDL_GPU_TEXTUREFORMAT_R32G32B32A32_FLOAT")
        case SDL_GPU_TEXTUREFORMAT_R11G11B10_UFLOAT =>
          Some("SDL_GPU_TEXTUREFORMAT_R11G11B10_UFLOAT")
        case SDL_GPU_TEXTUREFORMAT_R8_UINT =>
          Some("SDL_GPU_TEXTUREFORMAT_R8_UINT")
        case SDL_GPU_TEXTUREFORMAT_R8G8_UINT =>
          Some("SDL_GPU_TEXTUREFORMAT_R8G8_UINT")
        case SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UINT =>
          Some("SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UINT")
        case SDL_GPU_TEXTUREFORMAT_R16_UINT =>
          Some("SDL_GPU_TEXTUREFORMAT_R16_UINT")
        case SDL_GPU_TEXTUREFORMAT_R16G16_UINT =>
          Some("SDL_GPU_TEXTUREFORMAT_R16G16_UINT")
        case SDL_GPU_TEXTUREFORMAT_R16G16B16A16_UINT =>
          Some("SDL_GPU_TEXTUREFORMAT_R16G16B16A16_UINT")
        case SDL_GPU_TEXTUREFORMAT_R32_UINT =>
          Some("SDL_GPU_TEXTUREFORMAT_R32_UINT")
        case SDL_GPU_TEXTUREFORMAT_R32G32_UINT =>
          Some("SDL_GPU_TEXTUREFORMAT_R32G32_UINT")
        case SDL_GPU_TEXTUREFORMAT_R32G32B32A32_UINT =>
          Some("SDL_GPU_TEXTUREFORMAT_R32G32B32A32_UINT")
        case SDL_GPU_TEXTUREFORMAT_R8_INT =>
          Some("SDL_GPU_TEXTUREFORMAT_R8_INT")
        case SDL_GPU_TEXTUREFORMAT_R8G8_INT =>
          Some("SDL_GPU_TEXTUREFORMAT_R8G8_INT")
        case SDL_GPU_TEXTUREFORMAT_R8G8B8A8_INT =>
          Some("SDL_GPU_TEXTUREFORMAT_R8G8B8A8_INT")
        case SDL_GPU_TEXTUREFORMAT_R16_INT =>
          Some("SDL_GPU_TEXTUREFORMAT_R16_INT")
        case SDL_GPU_TEXTUREFORMAT_R16G16_INT =>
          Some("SDL_GPU_TEXTUREFORMAT_R16G16_INT")
        case SDL_GPU_TEXTUREFORMAT_R16G16B16A16_INT =>
          Some("SDL_GPU_TEXTUREFORMAT_R16G16B16A16_INT")
        case SDL_GPU_TEXTUREFORMAT_R32_INT =>
          Some("SDL_GPU_TEXTUREFORMAT_R32_INT")
        case SDL_GPU_TEXTUREFORMAT_R32G32_INT =>
          Some("SDL_GPU_TEXTUREFORMAT_R32G32_INT")
        case SDL_GPU_TEXTUREFORMAT_R32G32B32A32_INT =>
          Some("SDL_GPU_TEXTUREFORMAT_R32G32B32A32_INT")
        case SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UNORM_SRGB =>
          Some("SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UNORM_SRGB")
        case SDL_GPU_TEXTUREFORMAT_B8G8R8A8_UNORM_SRGB =>
          Some("SDL_GPU_TEXTUREFORMAT_B8G8R8A8_UNORM_SRGB")
        case SDL_GPU_TEXTUREFORMAT_BC1_RGBA_UNORM_SRGB =>
          Some("SDL_GPU_TEXTUREFORMAT_BC1_RGBA_UNORM_SRGB")
        case SDL_GPU_TEXTUREFORMAT_BC2_RGBA_UNORM_SRGB =>
          Some("SDL_GPU_TEXTUREFORMAT_BC2_RGBA_UNORM_SRGB")
        case SDL_GPU_TEXTUREFORMAT_BC3_RGBA_UNORM_SRGB =>
          Some("SDL_GPU_TEXTUREFORMAT_BC3_RGBA_UNORM_SRGB")
        case SDL_GPU_TEXTUREFORMAT_BC7_RGBA_UNORM_SRGB =>
          Some("SDL_GPU_TEXTUREFORMAT_BC7_RGBA_UNORM_SRGB")
        case SDL_GPU_TEXTUREFORMAT_D16_UNORM =>
          Some("SDL_GPU_TEXTUREFORMAT_D16_UNORM")
        case SDL_GPU_TEXTUREFORMAT_D24_UNORM =>
          Some("SDL_GPU_TEXTUREFORMAT_D24_UNORM")
        case SDL_GPU_TEXTUREFORMAT_D32_FLOAT =>
          Some("SDL_GPU_TEXTUREFORMAT_D32_FLOAT")
        case SDL_GPU_TEXTUREFORMAT_D24_UNORM_S8_UINT =>
          Some("SDL_GPU_TEXTUREFORMAT_D24_UNORM_S8_UINT")
        case SDL_GPU_TEXTUREFORMAT_D32_FLOAT_S8_UINT =>
          Some("SDL_GPU_TEXTUREFORMAT_D32_FLOAT_S8_UINT")
        case SDL_GPU_TEXTUREFORMAT_ASTC_4x4_UNORM =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_4x4_UNORM")
        case SDL_GPU_TEXTUREFORMAT_ASTC_5x4_UNORM =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_5x4_UNORM")
        case SDL_GPU_TEXTUREFORMAT_ASTC_5x5_UNORM =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_5x5_UNORM")
        case SDL_GPU_TEXTUREFORMAT_ASTC_6x5_UNORM =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_6x5_UNORM")
        case SDL_GPU_TEXTUREFORMAT_ASTC_6x6_UNORM =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_6x6_UNORM")
        case SDL_GPU_TEXTUREFORMAT_ASTC_8x5_UNORM =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_8x5_UNORM")
        case SDL_GPU_TEXTUREFORMAT_ASTC_8x6_UNORM =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_8x6_UNORM")
        case SDL_GPU_TEXTUREFORMAT_ASTC_8x8_UNORM =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_8x8_UNORM")
        case SDL_GPU_TEXTUREFORMAT_ASTC_10x5_UNORM =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_10x5_UNORM")
        case SDL_GPU_TEXTUREFORMAT_ASTC_10x6_UNORM =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_10x6_UNORM")
        case SDL_GPU_TEXTUREFORMAT_ASTC_10x8_UNORM =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_10x8_UNORM")
        case SDL_GPU_TEXTUREFORMAT_ASTC_10x10_UNORM =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_10x10_UNORM")
        case SDL_GPU_TEXTUREFORMAT_ASTC_12x10_UNORM =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_12x10_UNORM")
        case SDL_GPU_TEXTUREFORMAT_ASTC_12x12_UNORM =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_12x12_UNORM")
        case SDL_GPU_TEXTUREFORMAT_ASTC_4x4_UNORM_SRGB =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_4x4_UNORM_SRGB")
        case SDL_GPU_TEXTUREFORMAT_ASTC_5x4_UNORM_SRGB =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_5x4_UNORM_SRGB")
        case SDL_GPU_TEXTUREFORMAT_ASTC_5x5_UNORM_SRGB =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_5x5_UNORM_SRGB")
        case SDL_GPU_TEXTUREFORMAT_ASTC_6x5_UNORM_SRGB =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_6x5_UNORM_SRGB")
        case SDL_GPU_TEXTUREFORMAT_ASTC_6x6_UNORM_SRGB =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_6x6_UNORM_SRGB")
        case SDL_GPU_TEXTUREFORMAT_ASTC_8x5_UNORM_SRGB =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_8x5_UNORM_SRGB")
        case SDL_GPU_TEXTUREFORMAT_ASTC_8x6_UNORM_SRGB =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_8x6_UNORM_SRGB")
        case SDL_GPU_TEXTUREFORMAT_ASTC_8x8_UNORM_SRGB =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_8x8_UNORM_SRGB")
        case SDL_GPU_TEXTUREFORMAT_ASTC_10x5_UNORM_SRGB =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_10x5_UNORM_SRGB")
        case SDL_GPU_TEXTUREFORMAT_ASTC_10x6_UNORM_SRGB =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_10x6_UNORM_SRGB")
        case SDL_GPU_TEXTUREFORMAT_ASTC_10x8_UNORM_SRGB =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_10x8_UNORM_SRGB")
        case SDL_GPU_TEXTUREFORMAT_ASTC_10x10_UNORM_SRGB =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_10x10_UNORM_SRGB")
        case SDL_GPU_TEXTUREFORMAT_ASTC_12x10_UNORM_SRGB =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_12x10_UNORM_SRGB")
        case SDL_GPU_TEXTUREFORMAT_ASTC_12x12_UNORM_SRGB =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_12x12_UNORM_SRGB")
        case SDL_GPU_TEXTUREFORMAT_ASTC_4x4_FLOAT =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_4x4_FLOAT")
        case SDL_GPU_TEXTUREFORMAT_ASTC_5x4_FLOAT =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_5x4_FLOAT")
        case SDL_GPU_TEXTUREFORMAT_ASTC_5x5_FLOAT =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_5x5_FLOAT")
        case SDL_GPU_TEXTUREFORMAT_ASTC_6x5_FLOAT =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_6x5_FLOAT")
        case SDL_GPU_TEXTUREFORMAT_ASTC_6x6_FLOAT =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_6x6_FLOAT")
        case SDL_GPU_TEXTUREFORMAT_ASTC_8x5_FLOAT =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_8x5_FLOAT")
        case SDL_GPU_TEXTUREFORMAT_ASTC_8x6_FLOAT =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_8x6_FLOAT")
        case SDL_GPU_TEXTUREFORMAT_ASTC_8x8_FLOAT =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_8x8_FLOAT")
        case SDL_GPU_TEXTUREFORMAT_ASTC_10x5_FLOAT =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_10x5_FLOAT")
        case SDL_GPU_TEXTUREFORMAT_ASTC_10x6_FLOAT =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_10x6_FLOAT")
        case SDL_GPU_TEXTUREFORMAT_ASTC_10x8_FLOAT =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_10x8_FLOAT")
        case SDL_GPU_TEXTUREFORMAT_ASTC_10x10_FLOAT =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_10x10_FLOAT")
        case SDL_GPU_TEXTUREFORMAT_ASTC_12x10_FLOAT =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_12x10_FLOAT")
        case SDL_GPU_TEXTUREFORMAT_ASTC_12x12_FLOAT =>
          Some("SDL_GPU_TEXTUREFORMAT_ASTC_12x12_FLOAT")
        case _ => _root_.scala.None
    extension (a: SDL_GPUTextureFormat)
      inline def &(b: SDL_GPUTextureFormat): SDL_GPUTextureFormat = a & b
      inline def |(b: SDL_GPUTextureFormat): SDL_GPUTextureFormat = a | b
      inline def is(b: SDL_GPUTextureFormat): Boolean = (a & b) == b
  end SDL_GPUTextureFormat

  /** Specifies the type of a texture.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUTextureType = CUnsignedInt
  object SDL_GPUTextureType
      extends _BindgenEnumCUnsignedInt[SDL_GPUTextureType]:
    given _tag: Tag[SDL_GPUTextureType] = Tag.UInt
    inline def define(inline a: Long): SDL_GPUTextureType = a.toUInt
    val SDL_GPU_TEXTURETYPE_2D = define(0)
    val SDL_GPU_TEXTURETYPE_2D_ARRAY = define(1)
    val SDL_GPU_TEXTURETYPE_3D = define(2)
    val SDL_GPU_TEXTURETYPE_CUBE = define(3)
    val SDL_GPU_TEXTURETYPE_CUBE_ARRAY = define(4)
    inline def getName(inline value: SDL_GPUTextureType): Option[String] =
      inline value match
        case SDL_GPU_TEXTURETYPE_2D => Some("SDL_GPU_TEXTURETYPE_2D")
        case SDL_GPU_TEXTURETYPE_2D_ARRAY =>
          Some("SDL_GPU_TEXTURETYPE_2D_ARRAY")
        case SDL_GPU_TEXTURETYPE_3D   => Some("SDL_GPU_TEXTURETYPE_3D")
        case SDL_GPU_TEXTURETYPE_CUBE => Some("SDL_GPU_TEXTURETYPE_CUBE")
        case SDL_GPU_TEXTURETYPE_CUBE_ARRAY =>
          Some("SDL_GPU_TEXTURETYPE_CUBE_ARRAY")
        case _ => _root_.scala.None
    extension (a: SDL_GPUTextureType)
      inline def &(b: SDL_GPUTextureType): SDL_GPUTextureType = a & b
      inline def |(b: SDL_GPUTextureType): SDL_GPUTextureType = a | b
      inline def is(b: SDL_GPUTextureType): Boolean = (a & b) == b
  end SDL_GPUTextureType

  /** Specifies how a transfer buffer is intended to be used by the client.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUTransferBufferUsage = CUnsignedInt
  object SDL_GPUTransferBufferUsage
      extends _BindgenEnumCUnsignedInt[SDL_GPUTransferBufferUsage]:
    given _tag: Tag[SDL_GPUTransferBufferUsage] = Tag.UInt
    inline def define(inline a: Long): SDL_GPUTransferBufferUsage = a.toUInt
    val SDL_GPU_TRANSFERBUFFERUSAGE_UPLOAD = define(0)
    val SDL_GPU_TRANSFERBUFFERUSAGE_DOWNLOAD = define(1)
    inline def getName(
        inline value: SDL_GPUTransferBufferUsage
    ): Option[String] =
      inline value match
        case SDL_GPU_TRANSFERBUFFERUSAGE_UPLOAD =>
          Some("SDL_GPU_TRANSFERBUFFERUSAGE_UPLOAD")
        case SDL_GPU_TRANSFERBUFFERUSAGE_DOWNLOAD =>
          Some("SDL_GPU_TRANSFERBUFFERUSAGE_DOWNLOAD")
        case _ => _root_.scala.None
    extension (a: SDL_GPUTransferBufferUsage)
      inline def &(b: SDL_GPUTransferBufferUsage): SDL_GPUTransferBufferUsage =
        a & b
      inline def |(b: SDL_GPUTransferBufferUsage): SDL_GPUTransferBufferUsage =
        a | b
      inline def is(b: SDL_GPUTransferBufferUsage): Boolean = (a & b) == b
    end extension
  end SDL_GPUTransferBufferUsage

  /** Specifies the format of a vertex attribute.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUVertexElementFormat = CUnsignedInt
  object SDL_GPUVertexElementFormat
      extends _BindgenEnumCUnsignedInt[SDL_GPUVertexElementFormat]:
    given _tag: Tag[SDL_GPUVertexElementFormat] = Tag.UInt
    inline def define(inline a: Long): SDL_GPUVertexElementFormat = a.toUInt
    val SDL_GPU_VERTEXELEMENTFORMAT_INVALID = define(0)
    val SDL_GPU_VERTEXELEMENTFORMAT_INT = define(1)
    val SDL_GPU_VERTEXELEMENTFORMAT_INT2 = define(2)
    val SDL_GPU_VERTEXELEMENTFORMAT_INT3 = define(3)
    val SDL_GPU_VERTEXELEMENTFORMAT_INT4 = define(4)
    val SDL_GPU_VERTEXELEMENTFORMAT_UINT = define(5)
    val SDL_GPU_VERTEXELEMENTFORMAT_UINT2 = define(6)
    val SDL_GPU_VERTEXELEMENTFORMAT_UINT3 = define(7)
    val SDL_GPU_VERTEXELEMENTFORMAT_UINT4 = define(8)
    val SDL_GPU_VERTEXELEMENTFORMAT_FLOAT = define(9)
    val SDL_GPU_VERTEXELEMENTFORMAT_FLOAT2 = define(10)
    val SDL_GPU_VERTEXELEMENTFORMAT_FLOAT3 = define(11)
    val SDL_GPU_VERTEXELEMENTFORMAT_FLOAT4 = define(12)
    val SDL_GPU_VERTEXELEMENTFORMAT_BYTE2 = define(13)
    val SDL_GPU_VERTEXELEMENTFORMAT_BYTE4 = define(14)
    val SDL_GPU_VERTEXELEMENTFORMAT_UBYTE2 = define(15)
    val SDL_GPU_VERTEXELEMENTFORMAT_UBYTE4 = define(16)
    val SDL_GPU_VERTEXELEMENTFORMAT_BYTE2_NORM = define(17)
    val SDL_GPU_VERTEXELEMENTFORMAT_BYTE4_NORM = define(18)
    val SDL_GPU_VERTEXELEMENTFORMAT_UBYTE2_NORM = define(19)
    val SDL_GPU_VERTEXELEMENTFORMAT_UBYTE4_NORM = define(20)
    val SDL_GPU_VERTEXELEMENTFORMAT_SHORT2 = define(21)
    val SDL_GPU_VERTEXELEMENTFORMAT_SHORT4 = define(22)
    val SDL_GPU_VERTEXELEMENTFORMAT_USHORT2 = define(23)
    val SDL_GPU_VERTEXELEMENTFORMAT_USHORT4 = define(24)
    val SDL_GPU_VERTEXELEMENTFORMAT_SHORT2_NORM = define(25)
    val SDL_GPU_VERTEXELEMENTFORMAT_SHORT4_NORM = define(26)
    val SDL_GPU_VERTEXELEMENTFORMAT_USHORT2_NORM = define(27)
    val SDL_GPU_VERTEXELEMENTFORMAT_USHORT4_NORM = define(28)
    val SDL_GPU_VERTEXELEMENTFORMAT_HALF2 = define(29)
    val SDL_GPU_VERTEXELEMENTFORMAT_HALF4 = define(30)
    inline def getName(
        inline value: SDL_GPUVertexElementFormat
    ): Option[String] =
      inline value match
        case SDL_GPU_VERTEXELEMENTFORMAT_INVALID =>
          Some("SDL_GPU_VERTEXELEMENTFORMAT_INVALID")
        case SDL_GPU_VERTEXELEMENTFORMAT_INT =>
          Some("SDL_GPU_VERTEXELEMENTFORMAT_INT")
        case SDL_GPU_VERTEXELEMENTFORMAT_INT2 =>
          Some("SDL_GPU_VERTEXELEMENTFORMAT_INT2")
        case SDL_GPU_VERTEXELEMENTFORMAT_INT3 =>
          Some("SDL_GPU_VERTEXELEMENTFORMAT_INT3")
        case SDL_GPU_VERTEXELEMENTFORMAT_INT4 =>
          Some("SDL_GPU_VERTEXELEMENTFORMAT_INT4")
        case SDL_GPU_VERTEXELEMENTFORMAT_UINT =>
          Some("SDL_GPU_VERTEXELEMENTFORMAT_UINT")
        case SDL_GPU_VERTEXELEMENTFORMAT_UINT2 =>
          Some("SDL_GPU_VERTEXELEMENTFORMAT_UINT2")
        case SDL_GPU_VERTEXELEMENTFORMAT_UINT3 =>
          Some("SDL_GPU_VERTEXELEMENTFORMAT_UINT3")
        case SDL_GPU_VERTEXELEMENTFORMAT_UINT4 =>
          Some("SDL_GPU_VERTEXELEMENTFORMAT_UINT4")
        case SDL_GPU_VERTEXELEMENTFORMAT_FLOAT =>
          Some("SDL_GPU_VERTEXELEMENTFORMAT_FLOAT")
        case SDL_GPU_VERTEXELEMENTFORMAT_FLOAT2 =>
          Some("SDL_GPU_VERTEXELEMENTFORMAT_FLOAT2")
        case SDL_GPU_VERTEXELEMENTFORMAT_FLOAT3 =>
          Some("SDL_GPU_VERTEXELEMENTFORMAT_FLOAT3")
        case SDL_GPU_VERTEXELEMENTFORMAT_FLOAT4 =>
          Some("SDL_GPU_VERTEXELEMENTFORMAT_FLOAT4")
        case SDL_GPU_VERTEXELEMENTFORMAT_BYTE2 =>
          Some("SDL_GPU_VERTEXELEMENTFORMAT_BYTE2")
        case SDL_GPU_VERTEXELEMENTFORMAT_BYTE4 =>
          Some("SDL_GPU_VERTEXELEMENTFORMAT_BYTE4")
        case SDL_GPU_VERTEXELEMENTFORMAT_UBYTE2 =>
          Some("SDL_GPU_VERTEXELEMENTFORMAT_UBYTE2")
        case SDL_GPU_VERTEXELEMENTFORMAT_UBYTE4 =>
          Some("SDL_GPU_VERTEXELEMENTFORMAT_UBYTE4")
        case SDL_GPU_VERTEXELEMENTFORMAT_BYTE2_NORM =>
          Some("SDL_GPU_VERTEXELEMENTFORMAT_BYTE2_NORM")
        case SDL_GPU_VERTEXELEMENTFORMAT_BYTE4_NORM =>
          Some("SDL_GPU_VERTEXELEMENTFORMAT_BYTE4_NORM")
        case SDL_GPU_VERTEXELEMENTFORMAT_UBYTE2_NORM =>
          Some("SDL_GPU_VERTEXELEMENTFORMAT_UBYTE2_NORM")
        case SDL_GPU_VERTEXELEMENTFORMAT_UBYTE4_NORM =>
          Some("SDL_GPU_VERTEXELEMENTFORMAT_UBYTE4_NORM")
        case SDL_GPU_VERTEXELEMENTFORMAT_SHORT2 =>
          Some("SDL_GPU_VERTEXELEMENTFORMAT_SHORT2")
        case SDL_GPU_VERTEXELEMENTFORMAT_SHORT4 =>
          Some("SDL_GPU_VERTEXELEMENTFORMAT_SHORT4")
        case SDL_GPU_VERTEXELEMENTFORMAT_USHORT2 =>
          Some("SDL_GPU_VERTEXELEMENTFORMAT_USHORT2")
        case SDL_GPU_VERTEXELEMENTFORMAT_USHORT4 =>
          Some("SDL_GPU_VERTEXELEMENTFORMAT_USHORT4")
        case SDL_GPU_VERTEXELEMENTFORMAT_SHORT2_NORM =>
          Some("SDL_GPU_VERTEXELEMENTFORMAT_SHORT2_NORM")
        case SDL_GPU_VERTEXELEMENTFORMAT_SHORT4_NORM =>
          Some("SDL_GPU_VERTEXELEMENTFORMAT_SHORT4_NORM")
        case SDL_GPU_VERTEXELEMENTFORMAT_USHORT2_NORM =>
          Some("SDL_GPU_VERTEXELEMENTFORMAT_USHORT2_NORM")
        case SDL_GPU_VERTEXELEMENTFORMAT_USHORT4_NORM =>
          Some("SDL_GPU_VERTEXELEMENTFORMAT_USHORT4_NORM")
        case SDL_GPU_VERTEXELEMENTFORMAT_HALF2 =>
          Some("SDL_GPU_VERTEXELEMENTFORMAT_HALF2")
        case SDL_GPU_VERTEXELEMENTFORMAT_HALF4 =>
          Some("SDL_GPU_VERTEXELEMENTFORMAT_HALF4")
        case _ => _root_.scala.None
    extension (a: SDL_GPUVertexElementFormat)
      inline def &(b: SDL_GPUVertexElementFormat): SDL_GPUVertexElementFormat =
        a & b
      inline def |(b: SDL_GPUVertexElementFormat): SDL_GPUVertexElementFormat =
        a | b
      inline def is(b: SDL_GPUVertexElementFormat): Boolean = (a & b) == b
    end extension
  end SDL_GPUVertexElementFormat

  /** Specifies the rate at which vertex attributes are pulled from buffers.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUVertexInputRate = CUnsignedInt
  object SDL_GPUVertexInputRate
      extends _BindgenEnumCUnsignedInt[SDL_GPUVertexInputRate]:
    given _tag: Tag[SDL_GPUVertexInputRate] = Tag.UInt
    inline def define(inline a: Long): SDL_GPUVertexInputRate = a.toUInt
    val SDL_GPU_VERTEXINPUTRATE_VERTEX = define(0)
    val SDL_GPU_VERTEXINPUTRATE_INSTANCE = define(1)
    inline def getName(inline value: SDL_GPUVertexInputRate): Option[String] =
      inline value match
        case SDL_GPU_VERTEXINPUTRATE_VERTEX =>
          Some("SDL_GPU_VERTEXINPUTRATE_VERTEX")
        case SDL_GPU_VERTEXINPUTRATE_INSTANCE =>
          Some("SDL_GPU_VERTEXINPUTRATE_INSTANCE")
        case _ => _root_.scala.None
    extension (a: SDL_GPUVertexInputRate)
      inline def &(b: SDL_GPUVertexInputRate): SDL_GPUVertexInputRate = a & b
      inline def |(b: SDL_GPUVertexInputRate): SDL_GPUVertexInputRate = a | b
      inline def is(b: SDL_GPUVertexInputRate): Boolean = (a & b) == b
  end SDL_GPUVertexInputRate

  /** The list of axes available on a gamepad
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  opaque type SDL_GamepadAxis = CInt
  object SDL_GamepadAxis extends _BindgenEnumCInt[SDL_GamepadAxis]:
    given _tag: Tag[SDL_GamepadAxis] = Tag.Int
    inline def define(inline a: CInt): SDL_GamepadAxis = a
    val SDL_GAMEPAD_AXIS_INVALID = define(-1)
    val SDL_GAMEPAD_AXIS_LEFTX = define(0)
    val SDL_GAMEPAD_AXIS_LEFTY = define(1)
    val SDL_GAMEPAD_AXIS_RIGHTX = define(2)
    val SDL_GAMEPAD_AXIS_RIGHTY = define(3)
    val SDL_GAMEPAD_AXIS_LEFT_TRIGGER = define(4)
    val SDL_GAMEPAD_AXIS_RIGHT_TRIGGER = define(5)
    val SDL_GAMEPAD_AXIS_COUNT = define(6)
    inline def getName(inline value: SDL_GamepadAxis): Option[String] =
      inline value match
        case SDL_GAMEPAD_AXIS_INVALID => Some("SDL_GAMEPAD_AXIS_INVALID")
        case SDL_GAMEPAD_AXIS_LEFTX   => Some("SDL_GAMEPAD_AXIS_LEFTX")
        case SDL_GAMEPAD_AXIS_LEFTY   => Some("SDL_GAMEPAD_AXIS_LEFTY")
        case SDL_GAMEPAD_AXIS_RIGHTX  => Some("SDL_GAMEPAD_AXIS_RIGHTX")
        case SDL_GAMEPAD_AXIS_RIGHTY  => Some("SDL_GAMEPAD_AXIS_RIGHTY")
        case SDL_GAMEPAD_AXIS_LEFT_TRIGGER =>
          Some("SDL_GAMEPAD_AXIS_LEFT_TRIGGER")
        case SDL_GAMEPAD_AXIS_RIGHT_TRIGGER =>
          Some("SDL_GAMEPAD_AXIS_RIGHT_TRIGGER")
        case SDL_GAMEPAD_AXIS_COUNT => Some("SDL_GAMEPAD_AXIS_COUNT")
        case _                      => _root_.scala.None
    extension (a: SDL_GamepadAxis)
      inline def &(b: SDL_GamepadAxis): SDL_GamepadAxis = a & b
      inline def |(b: SDL_GamepadAxis): SDL_GamepadAxis = a | b
      inline def is(b: SDL_GamepadAxis): Boolean = (a & b) == b
  end SDL_GamepadAxis

  /** Types of gamepad control bindings.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  opaque type SDL_GamepadBindingType = CUnsignedInt
  object SDL_GamepadBindingType
      extends _BindgenEnumCUnsignedInt[SDL_GamepadBindingType]:
    given _tag: Tag[SDL_GamepadBindingType] = Tag.UInt
    inline def define(inline a: Long): SDL_GamepadBindingType = a.toUInt
    val SDL_GAMEPAD_BINDTYPE_NONE = define(0)
    val SDL_GAMEPAD_BINDTYPE_BUTTON = define(1)
    val SDL_GAMEPAD_BINDTYPE_AXIS = define(2)
    val SDL_GAMEPAD_BINDTYPE_HAT = define(3)
    inline def getName(inline value: SDL_GamepadBindingType): Option[String] =
      inline value match
        case SDL_GAMEPAD_BINDTYPE_NONE   => Some("SDL_GAMEPAD_BINDTYPE_NONE")
        case SDL_GAMEPAD_BINDTYPE_BUTTON => Some("SDL_GAMEPAD_BINDTYPE_BUTTON")
        case SDL_GAMEPAD_BINDTYPE_AXIS   => Some("SDL_GAMEPAD_BINDTYPE_AXIS")
        case SDL_GAMEPAD_BINDTYPE_HAT    => Some("SDL_GAMEPAD_BINDTYPE_HAT")
        case _                           => _root_.scala.None
    extension (a: SDL_GamepadBindingType)
      inline def &(b: SDL_GamepadBindingType): SDL_GamepadBindingType = a & b
      inline def |(b: SDL_GamepadBindingType): SDL_GamepadBindingType = a | b
      inline def is(b: SDL_GamepadBindingType): Boolean = (a & b) == b
  end SDL_GamepadBindingType

  /** The list of buttons available on a gamepad
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  opaque type SDL_GamepadButton = CInt
  object SDL_GamepadButton extends _BindgenEnumCInt[SDL_GamepadButton]:
    given _tag: Tag[SDL_GamepadButton] = Tag.Int
    inline def define(inline a: CInt): SDL_GamepadButton = a
    val SDL_GAMEPAD_BUTTON_INVALID = define(-1)
    val SDL_GAMEPAD_BUTTON_SOUTH = define(0)
    val SDL_GAMEPAD_BUTTON_EAST = define(1)
    val SDL_GAMEPAD_BUTTON_WEST = define(2)
    val SDL_GAMEPAD_BUTTON_NORTH = define(3)
    val SDL_GAMEPAD_BUTTON_BACK = define(4)
    val SDL_GAMEPAD_BUTTON_GUIDE = define(5)
    val SDL_GAMEPAD_BUTTON_START = define(6)
    val SDL_GAMEPAD_BUTTON_LEFT_STICK = define(7)
    val SDL_GAMEPAD_BUTTON_RIGHT_STICK = define(8)
    val SDL_GAMEPAD_BUTTON_LEFT_SHOULDER = define(9)
    val SDL_GAMEPAD_BUTTON_RIGHT_SHOULDER = define(10)
    val SDL_GAMEPAD_BUTTON_DPAD_UP = define(11)
    val SDL_GAMEPAD_BUTTON_DPAD_DOWN = define(12)
    val SDL_GAMEPAD_BUTTON_DPAD_LEFT = define(13)
    val SDL_GAMEPAD_BUTTON_DPAD_RIGHT = define(14)
    val SDL_GAMEPAD_BUTTON_MISC1 = define(15)
    val SDL_GAMEPAD_BUTTON_RIGHT_PADDLE1 = define(16)
    val SDL_GAMEPAD_BUTTON_LEFT_PADDLE1 = define(17)
    val SDL_GAMEPAD_BUTTON_RIGHT_PADDLE2 = define(18)
    val SDL_GAMEPAD_BUTTON_LEFT_PADDLE2 = define(19)
    val SDL_GAMEPAD_BUTTON_TOUCHPAD = define(20)
    val SDL_GAMEPAD_BUTTON_MISC2 = define(21)
    val SDL_GAMEPAD_BUTTON_MISC3 = define(22)
    val SDL_GAMEPAD_BUTTON_MISC4 = define(23)
    val SDL_GAMEPAD_BUTTON_MISC5 = define(24)
    val SDL_GAMEPAD_BUTTON_MISC6 = define(25)
    val SDL_GAMEPAD_BUTTON_COUNT = define(26)
    inline def getName(inline value: SDL_GamepadButton): Option[String] =
      inline value match
        case SDL_GAMEPAD_BUTTON_INVALID => Some("SDL_GAMEPAD_BUTTON_INVALID")
        case SDL_GAMEPAD_BUTTON_SOUTH   => Some("SDL_GAMEPAD_BUTTON_SOUTH")
        case SDL_GAMEPAD_BUTTON_EAST    => Some("SDL_GAMEPAD_BUTTON_EAST")
        case SDL_GAMEPAD_BUTTON_WEST    => Some("SDL_GAMEPAD_BUTTON_WEST")
        case SDL_GAMEPAD_BUTTON_NORTH   => Some("SDL_GAMEPAD_BUTTON_NORTH")
        case SDL_GAMEPAD_BUTTON_BACK    => Some("SDL_GAMEPAD_BUTTON_BACK")
        case SDL_GAMEPAD_BUTTON_GUIDE   => Some("SDL_GAMEPAD_BUTTON_GUIDE")
        case SDL_GAMEPAD_BUTTON_START   => Some("SDL_GAMEPAD_BUTTON_START")
        case SDL_GAMEPAD_BUTTON_LEFT_STICK =>
          Some("SDL_GAMEPAD_BUTTON_LEFT_STICK")
        case SDL_GAMEPAD_BUTTON_RIGHT_STICK =>
          Some("SDL_GAMEPAD_BUTTON_RIGHT_STICK")
        case SDL_GAMEPAD_BUTTON_LEFT_SHOULDER =>
          Some("SDL_GAMEPAD_BUTTON_LEFT_SHOULDER")
        case SDL_GAMEPAD_BUTTON_RIGHT_SHOULDER =>
          Some("SDL_GAMEPAD_BUTTON_RIGHT_SHOULDER")
        case SDL_GAMEPAD_BUTTON_DPAD_UP => Some("SDL_GAMEPAD_BUTTON_DPAD_UP")
        case SDL_GAMEPAD_BUTTON_DPAD_DOWN =>
          Some("SDL_GAMEPAD_BUTTON_DPAD_DOWN")
        case SDL_GAMEPAD_BUTTON_DPAD_LEFT =>
          Some("SDL_GAMEPAD_BUTTON_DPAD_LEFT")
        case SDL_GAMEPAD_BUTTON_DPAD_RIGHT =>
          Some("SDL_GAMEPAD_BUTTON_DPAD_RIGHT")
        case SDL_GAMEPAD_BUTTON_MISC1 => Some("SDL_GAMEPAD_BUTTON_MISC1")
        case SDL_GAMEPAD_BUTTON_RIGHT_PADDLE1 =>
          Some("SDL_GAMEPAD_BUTTON_RIGHT_PADDLE1")
        case SDL_GAMEPAD_BUTTON_LEFT_PADDLE1 =>
          Some("SDL_GAMEPAD_BUTTON_LEFT_PADDLE1")
        case SDL_GAMEPAD_BUTTON_RIGHT_PADDLE2 =>
          Some("SDL_GAMEPAD_BUTTON_RIGHT_PADDLE2")
        case SDL_GAMEPAD_BUTTON_LEFT_PADDLE2 =>
          Some("SDL_GAMEPAD_BUTTON_LEFT_PADDLE2")
        case SDL_GAMEPAD_BUTTON_TOUCHPAD => Some("SDL_GAMEPAD_BUTTON_TOUCHPAD")
        case SDL_GAMEPAD_BUTTON_MISC2    => Some("SDL_GAMEPAD_BUTTON_MISC2")
        case SDL_GAMEPAD_BUTTON_MISC3    => Some("SDL_GAMEPAD_BUTTON_MISC3")
        case SDL_GAMEPAD_BUTTON_MISC4    => Some("SDL_GAMEPAD_BUTTON_MISC4")
        case SDL_GAMEPAD_BUTTON_MISC5    => Some("SDL_GAMEPAD_BUTTON_MISC5")
        case SDL_GAMEPAD_BUTTON_MISC6    => Some("SDL_GAMEPAD_BUTTON_MISC6")
        case SDL_GAMEPAD_BUTTON_COUNT    => Some("SDL_GAMEPAD_BUTTON_COUNT")
        case _                           => _root_.scala.None
    extension (a: SDL_GamepadButton)
      inline def &(b: SDL_GamepadButton): SDL_GamepadButton = a & b
      inline def |(b: SDL_GamepadButton): SDL_GamepadButton = a | b
      inline def is(b: SDL_GamepadButton): Boolean = (a & b) == b
  end SDL_GamepadButton

  /** The set of gamepad button labels
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  opaque type SDL_GamepadButtonLabel = CUnsignedInt
  object SDL_GamepadButtonLabel
      extends _BindgenEnumCUnsignedInt[SDL_GamepadButtonLabel]:
    given _tag: Tag[SDL_GamepadButtonLabel] = Tag.UInt
    inline def define(inline a: Long): SDL_GamepadButtonLabel = a.toUInt
    val SDL_GAMEPAD_BUTTON_LABEL_UNKNOWN = define(0)
    val SDL_GAMEPAD_BUTTON_LABEL_A = define(1)
    val SDL_GAMEPAD_BUTTON_LABEL_B = define(2)
    val SDL_GAMEPAD_BUTTON_LABEL_X = define(3)
    val SDL_GAMEPAD_BUTTON_LABEL_Y = define(4)
    val SDL_GAMEPAD_BUTTON_LABEL_CROSS = define(5)
    val SDL_GAMEPAD_BUTTON_LABEL_CIRCLE = define(6)
    val SDL_GAMEPAD_BUTTON_LABEL_SQUARE = define(7)
    val SDL_GAMEPAD_BUTTON_LABEL_TRIANGLE = define(8)
    inline def getName(inline value: SDL_GamepadButtonLabel): Option[String] =
      inline value match
        case SDL_GAMEPAD_BUTTON_LABEL_UNKNOWN =>
          Some("SDL_GAMEPAD_BUTTON_LABEL_UNKNOWN")
        case SDL_GAMEPAD_BUTTON_LABEL_A => Some("SDL_GAMEPAD_BUTTON_LABEL_A")
        case SDL_GAMEPAD_BUTTON_LABEL_B => Some("SDL_GAMEPAD_BUTTON_LABEL_B")
        case SDL_GAMEPAD_BUTTON_LABEL_X => Some("SDL_GAMEPAD_BUTTON_LABEL_X")
        case SDL_GAMEPAD_BUTTON_LABEL_Y => Some("SDL_GAMEPAD_BUTTON_LABEL_Y")
        case SDL_GAMEPAD_BUTTON_LABEL_CROSS =>
          Some("SDL_GAMEPAD_BUTTON_LABEL_CROSS")
        case SDL_GAMEPAD_BUTTON_LABEL_CIRCLE =>
          Some("SDL_GAMEPAD_BUTTON_LABEL_CIRCLE")
        case SDL_GAMEPAD_BUTTON_LABEL_SQUARE =>
          Some("SDL_GAMEPAD_BUTTON_LABEL_SQUARE")
        case SDL_GAMEPAD_BUTTON_LABEL_TRIANGLE =>
          Some("SDL_GAMEPAD_BUTTON_LABEL_TRIANGLE")
        case _ => _root_.scala.None
    extension (a: SDL_GamepadButtonLabel)
      inline def &(b: SDL_GamepadButtonLabel): SDL_GamepadButtonLabel = a & b
      inline def |(b: SDL_GamepadButtonLabel): SDL_GamepadButtonLabel = a | b
      inline def is(b: SDL_GamepadButtonLabel): Boolean = (a & b) == b
  end SDL_GamepadButtonLabel

  /** Standard gamepad types.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  opaque type SDL_GamepadType = CUnsignedInt
  object SDL_GamepadType extends _BindgenEnumCUnsignedInt[SDL_GamepadType]:
    given _tag: Tag[SDL_GamepadType] = Tag.UInt
    inline def define(inline a: Long): SDL_GamepadType = a.toUInt
    val SDL_GAMEPAD_TYPE_UNKNOWN = define(0)
    val SDL_GAMEPAD_TYPE_STANDARD = define(1)
    val SDL_GAMEPAD_TYPE_XBOX360 = define(2)
    val SDL_GAMEPAD_TYPE_XBOXONE = define(3)
    val SDL_GAMEPAD_TYPE_PS3 = define(4)
    val SDL_GAMEPAD_TYPE_PS4 = define(5)
    val SDL_GAMEPAD_TYPE_PS5 = define(6)
    val SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_PRO = define(7)
    val SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_LEFT = define(8)
    val SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT = define(9)
    val SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_PAIR = define(10)
    val SDL_GAMEPAD_TYPE_COUNT = define(11)
    inline def getName(inline value: SDL_GamepadType): Option[String] =
      inline value match
        case SDL_GAMEPAD_TYPE_UNKNOWN  => Some("SDL_GAMEPAD_TYPE_UNKNOWN")
        case SDL_GAMEPAD_TYPE_STANDARD => Some("SDL_GAMEPAD_TYPE_STANDARD")
        case SDL_GAMEPAD_TYPE_XBOX360  => Some("SDL_GAMEPAD_TYPE_XBOX360")
        case SDL_GAMEPAD_TYPE_XBOXONE  => Some("SDL_GAMEPAD_TYPE_XBOXONE")
        case SDL_GAMEPAD_TYPE_PS3      => Some("SDL_GAMEPAD_TYPE_PS3")
        case SDL_GAMEPAD_TYPE_PS4      => Some("SDL_GAMEPAD_TYPE_PS4")
        case SDL_GAMEPAD_TYPE_PS5      => Some("SDL_GAMEPAD_TYPE_PS5")
        case SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_PRO =>
          Some("SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_PRO")
        case SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_LEFT =>
          Some("SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_LEFT")
        case SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT =>
          Some("SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT")
        case SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_PAIR =>
          Some("SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_PAIR")
        case SDL_GAMEPAD_TYPE_COUNT => Some("SDL_GAMEPAD_TYPE_COUNT")
        case _                      => _root_.scala.None
    extension (a: SDL_GamepadType)
      inline def &(b: SDL_GamepadType): SDL_GamepadType = a & b
      inline def |(b: SDL_GamepadType): SDL_GamepadType = a | b
      inline def is(b: SDL_GamepadType): Boolean = (a & b) == b
  end SDL_GamepadType

  /** An enumeration of hint priorities.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_hints.h
    */
  opaque type SDL_HintPriority = CUnsignedInt
  object SDL_HintPriority extends _BindgenEnumCUnsignedInt[SDL_HintPriority]:
    given _tag: Tag[SDL_HintPriority] = Tag.UInt
    inline def define(inline a: Long): SDL_HintPriority = a.toUInt
    val SDL_HINT_DEFAULT = define(0)
    val SDL_HINT_NORMAL = define(1)
    val SDL_HINT_OVERRIDE = define(2)
    inline def getName(inline value: SDL_HintPriority): Option[String] =
      inline value match
        case SDL_HINT_DEFAULT  => Some("SDL_HINT_DEFAULT")
        case SDL_HINT_NORMAL   => Some("SDL_HINT_NORMAL")
        case SDL_HINT_OVERRIDE => Some("SDL_HINT_OVERRIDE")
        case _                 => _root_.scala.None
    extension (a: SDL_HintPriority)
      inline def &(b: SDL_HintPriority): SDL_HintPriority = a & b
      inline def |(b: SDL_HintPriority): SDL_HintPriority = a | b
      inline def is(b: SDL_HintPriority): Boolean = (a & b) == b
  end SDL_HintPriority

  /** Possible return values from the SDL_HitTest callback.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  opaque type SDL_HitTestResult = CUnsignedInt
  object SDL_HitTestResult extends _BindgenEnumCUnsignedInt[SDL_HitTestResult]:
    given _tag: Tag[SDL_HitTestResult] = Tag.UInt
    inline def define(inline a: Long): SDL_HitTestResult = a.toUInt
    val SDL_HITTEST_NORMAL = define(0)
    val SDL_HITTEST_DRAGGABLE = define(1)
    val SDL_HITTEST_RESIZE_TOPLEFT = define(2)
    val SDL_HITTEST_RESIZE_TOP = define(3)
    val SDL_HITTEST_RESIZE_TOPRIGHT = define(4)
    val SDL_HITTEST_RESIZE_RIGHT = define(5)
    val SDL_HITTEST_RESIZE_BOTTOMRIGHT = define(6)
    val SDL_HITTEST_RESIZE_BOTTOM = define(7)
    val SDL_HITTEST_RESIZE_BOTTOMLEFT = define(8)
    val SDL_HITTEST_RESIZE_LEFT = define(9)
    inline def getName(inline value: SDL_HitTestResult): Option[String] =
      inline value match
        case SDL_HITTEST_NORMAL          => Some("SDL_HITTEST_NORMAL")
        case SDL_HITTEST_DRAGGABLE       => Some("SDL_HITTEST_DRAGGABLE")
        case SDL_HITTEST_RESIZE_TOPLEFT  => Some("SDL_HITTEST_RESIZE_TOPLEFT")
        case SDL_HITTEST_RESIZE_TOP      => Some("SDL_HITTEST_RESIZE_TOP")
        case SDL_HITTEST_RESIZE_TOPRIGHT => Some("SDL_HITTEST_RESIZE_TOPRIGHT")
        case SDL_HITTEST_RESIZE_RIGHT    => Some("SDL_HITTEST_RESIZE_RIGHT")
        case SDL_HITTEST_RESIZE_BOTTOMRIGHT =>
          Some("SDL_HITTEST_RESIZE_BOTTOMRIGHT")
        case SDL_HITTEST_RESIZE_BOTTOM => Some("SDL_HITTEST_RESIZE_BOTTOM")
        case SDL_HITTEST_RESIZE_BOTTOMLEFT =>
          Some("SDL_HITTEST_RESIZE_BOTTOMLEFT")
        case SDL_HITTEST_RESIZE_LEFT => Some("SDL_HITTEST_RESIZE_LEFT")
        case _                       => _root_.scala.None
    extension (a: SDL_HitTestResult)
      inline def &(b: SDL_HitTestResult): SDL_HitTestResult = a & b
      inline def |(b: SDL_HitTestResult): SDL_HitTestResult = a | b
      inline def is(b: SDL_HitTestResult): Boolean = (a & b) == b
  end SDL_HitTestResult

  /** SDL_IOStream status, set by a read or write operation.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  opaque type SDL_IOStatus = CUnsignedInt
  object SDL_IOStatus extends _BindgenEnumCUnsignedInt[SDL_IOStatus]:
    given _tag: Tag[SDL_IOStatus] = Tag.UInt
    inline def define(inline a: Long): SDL_IOStatus = a.toUInt
    val SDL_IO_STATUS_READY = define(0)
    val SDL_IO_STATUS_ERROR = define(1)
    val SDL_IO_STATUS_EOF = define(2)
    val SDL_IO_STATUS_NOT_READY = define(3)
    val SDL_IO_STATUS_READONLY = define(4)
    val SDL_IO_STATUS_WRITEONLY = define(5)
    inline def getName(inline value: SDL_IOStatus): Option[String] =
      inline value match
        case SDL_IO_STATUS_READY     => Some("SDL_IO_STATUS_READY")
        case SDL_IO_STATUS_ERROR     => Some("SDL_IO_STATUS_ERROR")
        case SDL_IO_STATUS_EOF       => Some("SDL_IO_STATUS_EOF")
        case SDL_IO_STATUS_NOT_READY => Some("SDL_IO_STATUS_NOT_READY")
        case SDL_IO_STATUS_READONLY  => Some("SDL_IO_STATUS_READONLY")
        case SDL_IO_STATUS_WRITEONLY => Some("SDL_IO_STATUS_WRITEONLY")
        case _                       => _root_.scala.None
    extension (a: SDL_IOStatus)
      inline def &(b: SDL_IOStatus): SDL_IOStatus = a & b
      inline def |(b: SDL_IOStatus): SDL_IOStatus = a | b
      inline def is(b: SDL_IOStatus): Boolean = (a & b) == b
  end SDL_IOStatus

  /** Possible `whence` values for SDL_IOStream seeking.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  opaque type SDL_IOWhence = CUnsignedInt
  object SDL_IOWhence extends _BindgenEnumCUnsignedInt[SDL_IOWhence]:
    given _tag: Tag[SDL_IOWhence] = Tag.UInt
    inline def define(inline a: Long): SDL_IOWhence = a.toUInt
    val SDL_IO_SEEK_SET = define(0)
    val SDL_IO_SEEK_CUR = define(1)
    val SDL_IO_SEEK_END = define(2)
    inline def getName(inline value: SDL_IOWhence): Option[String] =
      inline value match
        case SDL_IO_SEEK_SET => Some("SDL_IO_SEEK_SET")
        case SDL_IO_SEEK_CUR => Some("SDL_IO_SEEK_CUR")
        case SDL_IO_SEEK_END => Some("SDL_IO_SEEK_END")
        case _               => _root_.scala.None
    extension (a: SDL_IOWhence)
      inline def &(b: SDL_IOWhence): SDL_IOWhence = a & b
      inline def |(b: SDL_IOWhence): SDL_IOWhence = a | b
      inline def is(b: SDL_IOWhence): Boolean = (a & b) == b
  end SDL_IOWhence

  /** The current status of an SDL_InitState structure.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mutex.h
    */
  opaque type SDL_InitStatus = CUnsignedInt
  object SDL_InitStatus extends _BindgenEnumCUnsignedInt[SDL_InitStatus]:
    given _tag: Tag[SDL_InitStatus] = Tag.UInt
    inline def define(inline a: Long): SDL_InitStatus = a.toUInt
    val SDL_INIT_STATUS_UNINITIALIZED = define(0)
    val SDL_INIT_STATUS_INITIALIZING = define(1)
    val SDL_INIT_STATUS_INITIALIZED = define(2)
    val SDL_INIT_STATUS_UNINITIALIZING = define(3)
    inline def getName(inline value: SDL_InitStatus): Option[String] =
      inline value match
        case SDL_INIT_STATUS_UNINITIALIZED =>
          Some("SDL_INIT_STATUS_UNINITIALIZED")
        case SDL_INIT_STATUS_INITIALIZING =>
          Some("SDL_INIT_STATUS_INITIALIZING")
        case SDL_INIT_STATUS_INITIALIZED => Some("SDL_INIT_STATUS_INITIALIZED")
        case SDL_INIT_STATUS_UNINITIALIZING =>
          Some("SDL_INIT_STATUS_UNINITIALIZING")
        case _ => _root_.scala.None
    extension (a: SDL_InitStatus)
      inline def &(b: SDL_InitStatus): SDL_InitStatus = a & b
      inline def |(b: SDL_InitStatus): SDL_InitStatus = a | b
      inline def is(b: SDL_InitStatus): Boolean = (a & b) == b
  end SDL_InitStatus

  /** Possible connection states for a joystick device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  opaque type SDL_JoystickConnectionState = CInt
  object SDL_JoystickConnectionState
      extends _BindgenEnumCInt[SDL_JoystickConnectionState]:
    given _tag: Tag[SDL_JoystickConnectionState] = Tag.Int
    inline def define(inline a: CInt): SDL_JoystickConnectionState = a
    val SDL_JOYSTICK_CONNECTION_INVALID = define(-1)
    val SDL_JOYSTICK_CONNECTION_UNKNOWN = define(0)
    val SDL_JOYSTICK_CONNECTION_WIRED = define(1)
    val SDL_JOYSTICK_CONNECTION_WIRELESS = define(2)
    inline def getName(
        inline value: SDL_JoystickConnectionState
    ): Option[String] =
      inline value match
        case SDL_JOYSTICK_CONNECTION_INVALID =>
          Some("SDL_JOYSTICK_CONNECTION_INVALID")
        case SDL_JOYSTICK_CONNECTION_UNKNOWN =>
          Some("SDL_JOYSTICK_CONNECTION_UNKNOWN")
        case SDL_JOYSTICK_CONNECTION_WIRED =>
          Some("SDL_JOYSTICK_CONNECTION_WIRED")
        case SDL_JOYSTICK_CONNECTION_WIRELESS =>
          Some("SDL_JOYSTICK_CONNECTION_WIRELESS")
        case _ => _root_.scala.None
    extension (a: SDL_JoystickConnectionState)
      inline def &(
          b: SDL_JoystickConnectionState
      ): SDL_JoystickConnectionState = a & b
      inline def |(
          b: SDL_JoystickConnectionState
      ): SDL_JoystickConnectionState = a | b
      inline def is(b: SDL_JoystickConnectionState): Boolean = (a & b) == b
    end extension
  end SDL_JoystickConnectionState

  /** An enum of some common joystick types.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  opaque type SDL_JoystickType = CUnsignedInt
  object SDL_JoystickType extends _BindgenEnumCUnsignedInt[SDL_JoystickType]:
    given _tag: Tag[SDL_JoystickType] = Tag.UInt
    inline def define(inline a: Long): SDL_JoystickType = a.toUInt
    val SDL_JOYSTICK_TYPE_UNKNOWN = define(0)
    val SDL_JOYSTICK_TYPE_GAMEPAD = define(1)
    val SDL_JOYSTICK_TYPE_WHEEL = define(2)
    val SDL_JOYSTICK_TYPE_ARCADE_STICK = define(3)
    val SDL_JOYSTICK_TYPE_FLIGHT_STICK = define(4)
    val SDL_JOYSTICK_TYPE_DANCE_PAD = define(5)
    val SDL_JOYSTICK_TYPE_GUITAR = define(6)
    val SDL_JOYSTICK_TYPE_DRUM_KIT = define(7)
    val SDL_JOYSTICK_TYPE_ARCADE_PAD = define(8)
    val SDL_JOYSTICK_TYPE_THROTTLE = define(9)
    val SDL_JOYSTICK_TYPE_COUNT = define(10)
    inline def getName(inline value: SDL_JoystickType): Option[String] =
      inline value match
        case SDL_JOYSTICK_TYPE_UNKNOWN => Some("SDL_JOYSTICK_TYPE_UNKNOWN")
        case SDL_JOYSTICK_TYPE_GAMEPAD => Some("SDL_JOYSTICK_TYPE_GAMEPAD")
        case SDL_JOYSTICK_TYPE_WHEEL   => Some("SDL_JOYSTICK_TYPE_WHEEL")
        case SDL_JOYSTICK_TYPE_ARCADE_STICK =>
          Some("SDL_JOYSTICK_TYPE_ARCADE_STICK")
        case SDL_JOYSTICK_TYPE_FLIGHT_STICK =>
          Some("SDL_JOYSTICK_TYPE_FLIGHT_STICK")
        case SDL_JOYSTICK_TYPE_DANCE_PAD => Some("SDL_JOYSTICK_TYPE_DANCE_PAD")
        case SDL_JOYSTICK_TYPE_GUITAR    => Some("SDL_JOYSTICK_TYPE_GUITAR")
        case SDL_JOYSTICK_TYPE_DRUM_KIT  => Some("SDL_JOYSTICK_TYPE_DRUM_KIT")
        case SDL_JOYSTICK_TYPE_ARCADE_PAD =>
          Some("SDL_JOYSTICK_TYPE_ARCADE_PAD")
        case SDL_JOYSTICK_TYPE_THROTTLE => Some("SDL_JOYSTICK_TYPE_THROTTLE")
        case SDL_JOYSTICK_TYPE_COUNT    => Some("SDL_JOYSTICK_TYPE_COUNT")
        case _                          => _root_.scala.None
    extension (a: SDL_JoystickType)
      inline def &(b: SDL_JoystickType): SDL_JoystickType = a & b
      inline def |(b: SDL_JoystickType): SDL_JoystickType = a | b
      inline def is(b: SDL_JoystickType): Boolean = (a & b) == b
  end SDL_JoystickType

  /** The predefined log categories
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_log.h
    */
  opaque type SDL_LogCategory = CUnsignedInt
  object SDL_LogCategory extends _BindgenEnumCUnsignedInt[SDL_LogCategory]:
    given _tag: Tag[SDL_LogCategory] = Tag.UInt
    inline def define(inline a: Long): SDL_LogCategory = a.toUInt
    val SDL_LOG_CATEGORY_APPLICATION = define(0)
    val SDL_LOG_CATEGORY_ERROR = define(1)
    val SDL_LOG_CATEGORY_ASSERT = define(2)
    val SDL_LOG_CATEGORY_SYSTEM = define(3)
    val SDL_LOG_CATEGORY_AUDIO = define(4)
    val SDL_LOG_CATEGORY_VIDEO = define(5)
    val SDL_LOG_CATEGORY_RENDER = define(6)
    val SDL_LOG_CATEGORY_INPUT = define(7)
    val SDL_LOG_CATEGORY_TEST = define(8)
    val SDL_LOG_CATEGORY_GPU = define(9)
    val SDL_LOG_CATEGORY_RESERVED2 = define(10)
    val SDL_LOG_CATEGORY_RESERVED3 = define(11)
    val SDL_LOG_CATEGORY_RESERVED4 = define(12)
    val SDL_LOG_CATEGORY_RESERVED5 = define(13)
    val SDL_LOG_CATEGORY_RESERVED6 = define(14)
    val SDL_LOG_CATEGORY_RESERVED7 = define(15)
    val SDL_LOG_CATEGORY_RESERVED8 = define(16)
    val SDL_LOG_CATEGORY_RESERVED9 = define(17)
    val SDL_LOG_CATEGORY_RESERVED10 = define(18)
    val SDL_LOG_CATEGORY_CUSTOM = define(19)
    inline def getName(inline value: SDL_LogCategory): Option[String] =
      inline value match
        case SDL_LOG_CATEGORY_APPLICATION =>
          Some("SDL_LOG_CATEGORY_APPLICATION")
        case SDL_LOG_CATEGORY_ERROR      => Some("SDL_LOG_CATEGORY_ERROR")
        case SDL_LOG_CATEGORY_ASSERT     => Some("SDL_LOG_CATEGORY_ASSERT")
        case SDL_LOG_CATEGORY_SYSTEM     => Some("SDL_LOG_CATEGORY_SYSTEM")
        case SDL_LOG_CATEGORY_AUDIO      => Some("SDL_LOG_CATEGORY_AUDIO")
        case SDL_LOG_CATEGORY_VIDEO      => Some("SDL_LOG_CATEGORY_VIDEO")
        case SDL_LOG_CATEGORY_RENDER     => Some("SDL_LOG_CATEGORY_RENDER")
        case SDL_LOG_CATEGORY_INPUT      => Some("SDL_LOG_CATEGORY_INPUT")
        case SDL_LOG_CATEGORY_TEST       => Some("SDL_LOG_CATEGORY_TEST")
        case SDL_LOG_CATEGORY_GPU        => Some("SDL_LOG_CATEGORY_GPU")
        case SDL_LOG_CATEGORY_RESERVED2  => Some("SDL_LOG_CATEGORY_RESERVED2")
        case SDL_LOG_CATEGORY_RESERVED3  => Some("SDL_LOG_CATEGORY_RESERVED3")
        case SDL_LOG_CATEGORY_RESERVED4  => Some("SDL_LOG_CATEGORY_RESERVED4")
        case SDL_LOG_CATEGORY_RESERVED5  => Some("SDL_LOG_CATEGORY_RESERVED5")
        case SDL_LOG_CATEGORY_RESERVED6  => Some("SDL_LOG_CATEGORY_RESERVED6")
        case SDL_LOG_CATEGORY_RESERVED7  => Some("SDL_LOG_CATEGORY_RESERVED7")
        case SDL_LOG_CATEGORY_RESERVED8  => Some("SDL_LOG_CATEGORY_RESERVED8")
        case SDL_LOG_CATEGORY_RESERVED9  => Some("SDL_LOG_CATEGORY_RESERVED9")
        case SDL_LOG_CATEGORY_RESERVED10 => Some("SDL_LOG_CATEGORY_RESERVED10")
        case SDL_LOG_CATEGORY_CUSTOM     => Some("SDL_LOG_CATEGORY_CUSTOM")
        case _                           => _root_.scala.None
    extension (a: SDL_LogCategory)
      inline def &(b: SDL_LogCategory): SDL_LogCategory = a & b
      inline def |(b: SDL_LogCategory): SDL_LogCategory = a | b
      inline def is(b: SDL_LogCategory): Boolean = (a & b) == b
  end SDL_LogCategory

  /** The predefined log priorities
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_log.h
    */
  opaque type SDL_LogPriority = CUnsignedInt
  object SDL_LogPriority extends _BindgenEnumCUnsignedInt[SDL_LogPriority]:
    given _tag: Tag[SDL_LogPriority] = Tag.UInt
    inline def define(inline a: Long): SDL_LogPriority = a.toUInt
    val SDL_LOG_PRIORITY_INVALID = define(0)
    val SDL_LOG_PRIORITY_TRACE = define(1)
    val SDL_LOG_PRIORITY_VERBOSE = define(2)
    val SDL_LOG_PRIORITY_DEBUG = define(3)
    val SDL_LOG_PRIORITY_INFO = define(4)
    val SDL_LOG_PRIORITY_WARN = define(5)
    val SDL_LOG_PRIORITY_ERROR = define(6)
    val SDL_LOG_PRIORITY_CRITICAL = define(7)
    val SDL_LOG_PRIORITY_COUNT = define(8)
    inline def getName(inline value: SDL_LogPriority): Option[String] =
      inline value match
        case SDL_LOG_PRIORITY_INVALID  => Some("SDL_LOG_PRIORITY_INVALID")
        case SDL_LOG_PRIORITY_TRACE    => Some("SDL_LOG_PRIORITY_TRACE")
        case SDL_LOG_PRIORITY_VERBOSE  => Some("SDL_LOG_PRIORITY_VERBOSE")
        case SDL_LOG_PRIORITY_DEBUG    => Some("SDL_LOG_PRIORITY_DEBUG")
        case SDL_LOG_PRIORITY_INFO     => Some("SDL_LOG_PRIORITY_INFO")
        case SDL_LOG_PRIORITY_WARN     => Some("SDL_LOG_PRIORITY_WARN")
        case SDL_LOG_PRIORITY_ERROR    => Some("SDL_LOG_PRIORITY_ERROR")
        case SDL_LOG_PRIORITY_CRITICAL => Some("SDL_LOG_PRIORITY_CRITICAL")
        case SDL_LOG_PRIORITY_COUNT    => Some("SDL_LOG_PRIORITY_COUNT")
        case _                         => _root_.scala.None
    extension (a: SDL_LogPriority)
      inline def &(b: SDL_LogPriority): SDL_LogPriority = a & b
      inline def |(b: SDL_LogPriority): SDL_LogPriority = a | b
      inline def is(b: SDL_LogPriority): Boolean = (a & b) == b
  end SDL_LogPriority

  /** Colorspace matrix coefficients.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_pixels.h
    */
  opaque type SDL_MatrixCoefficients = CUnsignedInt
  object SDL_MatrixCoefficients
      extends _BindgenEnumCUnsignedInt[SDL_MatrixCoefficients]:
    given _tag: Tag[SDL_MatrixCoefficients] = Tag.UInt
    inline def define(inline a: Long): SDL_MatrixCoefficients = a.toUInt
    val SDL_MATRIX_COEFFICIENTS_IDENTITY = define(0)
    val SDL_MATRIX_COEFFICIENTS_BT709 = define(1)
    val SDL_MATRIX_COEFFICIENTS_UNSPECIFIED = define(2)
    val SDL_MATRIX_COEFFICIENTS_FCC = define(4)
    val SDL_MATRIX_COEFFICIENTS_BT470BG = define(5)
    val SDL_MATRIX_COEFFICIENTS_BT601 = define(6)
    val SDL_MATRIX_COEFFICIENTS_SMPTE240 = define(7)
    val SDL_MATRIX_COEFFICIENTS_YCGCO = define(8)
    val SDL_MATRIX_COEFFICIENTS_BT2020_NCL = define(9)
    val SDL_MATRIX_COEFFICIENTS_BT2020_CL = define(10)
    val SDL_MATRIX_COEFFICIENTS_SMPTE2085 = define(11)
    val SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_NCL = define(12)
    val SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_CL = define(13)
    val SDL_MATRIX_COEFFICIENTS_ICTCP = define(14)
    val SDL_MATRIX_COEFFICIENTS_CUSTOM = define(31)
    inline def getName(inline value: SDL_MatrixCoefficients): Option[String] =
      inline value match
        case SDL_MATRIX_COEFFICIENTS_IDENTITY =>
          Some("SDL_MATRIX_COEFFICIENTS_IDENTITY")
        case SDL_MATRIX_COEFFICIENTS_BT709 =>
          Some("SDL_MATRIX_COEFFICIENTS_BT709")
        case SDL_MATRIX_COEFFICIENTS_UNSPECIFIED =>
          Some("SDL_MATRIX_COEFFICIENTS_UNSPECIFIED")
        case SDL_MATRIX_COEFFICIENTS_FCC => Some("SDL_MATRIX_COEFFICIENTS_FCC")
        case SDL_MATRIX_COEFFICIENTS_BT470BG =>
          Some("SDL_MATRIX_COEFFICIENTS_BT470BG")
        case SDL_MATRIX_COEFFICIENTS_BT601 =>
          Some("SDL_MATRIX_COEFFICIENTS_BT601")
        case SDL_MATRIX_COEFFICIENTS_SMPTE240 =>
          Some("SDL_MATRIX_COEFFICIENTS_SMPTE240")
        case SDL_MATRIX_COEFFICIENTS_YCGCO =>
          Some("SDL_MATRIX_COEFFICIENTS_YCGCO")
        case SDL_MATRIX_COEFFICIENTS_BT2020_NCL =>
          Some("SDL_MATRIX_COEFFICIENTS_BT2020_NCL")
        case SDL_MATRIX_COEFFICIENTS_BT2020_CL =>
          Some("SDL_MATRIX_COEFFICIENTS_BT2020_CL")
        case SDL_MATRIX_COEFFICIENTS_SMPTE2085 =>
          Some("SDL_MATRIX_COEFFICIENTS_SMPTE2085")
        case SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_NCL =>
          Some("SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_NCL")
        case SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_CL =>
          Some("SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_CL")
        case SDL_MATRIX_COEFFICIENTS_ICTCP =>
          Some("SDL_MATRIX_COEFFICIENTS_ICTCP")
        case SDL_MATRIX_COEFFICIENTS_CUSTOM =>
          Some("SDL_MATRIX_COEFFICIENTS_CUSTOM")
        case _ => _root_.scala.None
    extension (a: SDL_MatrixCoefficients)
      inline def &(b: SDL_MatrixCoefficients): SDL_MatrixCoefficients = a & b
      inline def |(b: SDL_MatrixCoefficients): SDL_MatrixCoefficients = a | b
      inline def is(b: SDL_MatrixCoefficients): Boolean = (a & b) == b
  end SDL_MatrixCoefficients

  /** An enumeration of indices inside the colors array of
    * SDL_MessageBoxColorScheme.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_messagebox.h
    */
  opaque type SDL_MessageBoxColorType = CUnsignedInt
  object SDL_MessageBoxColorType
      extends _BindgenEnumCUnsignedInt[SDL_MessageBoxColorType]:
    given _tag: Tag[SDL_MessageBoxColorType] = Tag.UInt
    inline def define(inline a: Long): SDL_MessageBoxColorType = a.toUInt
    val SDL_MESSAGEBOX_COLOR_BACKGROUND = define(0)
    val SDL_MESSAGEBOX_COLOR_TEXT = define(1)
    val SDL_MESSAGEBOX_COLOR_BUTTON_BORDER = define(2)
    val SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND = define(3)
    val SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED = define(4)
    val SDL_MESSAGEBOX_COLOR_COUNT = define(5)
    inline def getName(inline value: SDL_MessageBoxColorType): Option[String] =
      inline value match
        case SDL_MESSAGEBOX_COLOR_BACKGROUND =>
          Some("SDL_MESSAGEBOX_COLOR_BACKGROUND")
        case SDL_MESSAGEBOX_COLOR_TEXT => Some("SDL_MESSAGEBOX_COLOR_TEXT")
        case SDL_MESSAGEBOX_COLOR_BUTTON_BORDER =>
          Some("SDL_MESSAGEBOX_COLOR_BUTTON_BORDER")
        case SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND =>
          Some("SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND")
        case SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED =>
          Some("SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED")
        case SDL_MESSAGEBOX_COLOR_COUNT => Some("SDL_MESSAGEBOX_COLOR_COUNT")
        case _                          => _root_.scala.None
    extension (a: SDL_MessageBoxColorType)
      inline def &(b: SDL_MessageBoxColorType): SDL_MessageBoxColorType = a & b
      inline def |(b: SDL_MessageBoxColorType): SDL_MessageBoxColorType = a | b
      inline def is(b: SDL_MessageBoxColorType): Boolean = (a & b) == b
  end SDL_MessageBoxColorType

  /** Scroll direction types for the Scroll event
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mouse.h
    */
  opaque type SDL_MouseWheelDirection = CUnsignedInt
  object SDL_MouseWheelDirection
      extends _BindgenEnumCUnsignedInt[SDL_MouseWheelDirection]:
    given _tag: Tag[SDL_MouseWheelDirection] = Tag.UInt
    inline def define(inline a: Long): SDL_MouseWheelDirection = a.toUInt
    val SDL_MOUSEWHEEL_NORMAL = define(0)
    val SDL_MOUSEWHEEL_FLIPPED = define(1)
    inline def getName(inline value: SDL_MouseWheelDirection): Option[String] =
      inline value match
        case SDL_MOUSEWHEEL_NORMAL  => Some("SDL_MOUSEWHEEL_NORMAL")
        case SDL_MOUSEWHEEL_FLIPPED => Some("SDL_MOUSEWHEEL_FLIPPED")
        case _                      => _root_.scala.None
    extension (a: SDL_MouseWheelDirection)
      inline def &(b: SDL_MouseWheelDirection): SDL_MouseWheelDirection = a & b
      inline def |(b: SDL_MouseWheelDirection): SDL_MouseWheelDirection = a | b
      inline def is(b: SDL_MouseWheelDirection): Boolean = (a & b) == b
  end SDL_MouseWheelDirection

  /** Packed component layout.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_pixels.h
    */
  opaque type SDL_PackedLayout = CUnsignedInt
  object SDL_PackedLayout extends _BindgenEnumCUnsignedInt[SDL_PackedLayout]:
    given _tag: Tag[SDL_PackedLayout] = Tag.UInt
    inline def define(inline a: Long): SDL_PackedLayout = a.toUInt
    val SDL_PACKEDLAYOUT_NONE = define(0)
    val SDL_PACKEDLAYOUT_332 = define(1)
    val SDL_PACKEDLAYOUT_4444 = define(2)
    val SDL_PACKEDLAYOUT_1555 = define(3)
    val SDL_PACKEDLAYOUT_5551 = define(4)
    val SDL_PACKEDLAYOUT_565 = define(5)
    val SDL_PACKEDLAYOUT_8888 = define(6)
    val SDL_PACKEDLAYOUT_2101010 = define(7)
    val SDL_PACKEDLAYOUT_1010102 = define(8)
    inline def getName(inline value: SDL_PackedLayout): Option[String] =
      inline value match
        case SDL_PACKEDLAYOUT_NONE    => Some("SDL_PACKEDLAYOUT_NONE")
        case SDL_PACKEDLAYOUT_332     => Some("SDL_PACKEDLAYOUT_332")
        case SDL_PACKEDLAYOUT_4444    => Some("SDL_PACKEDLAYOUT_4444")
        case SDL_PACKEDLAYOUT_1555    => Some("SDL_PACKEDLAYOUT_1555")
        case SDL_PACKEDLAYOUT_5551    => Some("SDL_PACKEDLAYOUT_5551")
        case SDL_PACKEDLAYOUT_565     => Some("SDL_PACKEDLAYOUT_565")
        case SDL_PACKEDLAYOUT_8888    => Some("SDL_PACKEDLAYOUT_8888")
        case SDL_PACKEDLAYOUT_2101010 => Some("SDL_PACKEDLAYOUT_2101010")
        case SDL_PACKEDLAYOUT_1010102 => Some("SDL_PACKEDLAYOUT_1010102")
        case _                        => _root_.scala.None
    extension (a: SDL_PackedLayout)
      inline def &(b: SDL_PackedLayout): SDL_PackedLayout = a & b
      inline def |(b: SDL_PackedLayout): SDL_PackedLayout = a | b
      inline def is(b: SDL_PackedLayout): Boolean = (a & b) == b
  end SDL_PackedLayout

  /** Packed component order, high bit -> low bit.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_pixels.h
    */
  opaque type SDL_PackedOrder = CUnsignedInt
  object SDL_PackedOrder extends _BindgenEnumCUnsignedInt[SDL_PackedOrder]:
    given _tag: Tag[SDL_PackedOrder] = Tag.UInt
    inline def define(inline a: Long): SDL_PackedOrder = a.toUInt
    val SDL_PACKEDORDER_NONE = define(0)
    val SDL_PACKEDORDER_XRGB = define(1)
    val SDL_PACKEDORDER_RGBX = define(2)
    val SDL_PACKEDORDER_ARGB = define(3)
    val SDL_PACKEDORDER_RGBA = define(4)
    val SDL_PACKEDORDER_XBGR = define(5)
    val SDL_PACKEDORDER_BGRX = define(6)
    val SDL_PACKEDORDER_ABGR = define(7)
    val SDL_PACKEDORDER_BGRA = define(8)
    inline def getName(inline value: SDL_PackedOrder): Option[String] =
      inline value match
        case SDL_PACKEDORDER_NONE => Some("SDL_PACKEDORDER_NONE")
        case SDL_PACKEDORDER_XRGB => Some("SDL_PACKEDORDER_XRGB")
        case SDL_PACKEDORDER_RGBX => Some("SDL_PACKEDORDER_RGBX")
        case SDL_PACKEDORDER_ARGB => Some("SDL_PACKEDORDER_ARGB")
        case SDL_PACKEDORDER_RGBA => Some("SDL_PACKEDORDER_RGBA")
        case SDL_PACKEDORDER_XBGR => Some("SDL_PACKEDORDER_XBGR")
        case SDL_PACKEDORDER_BGRX => Some("SDL_PACKEDORDER_BGRX")
        case SDL_PACKEDORDER_ABGR => Some("SDL_PACKEDORDER_ABGR")
        case SDL_PACKEDORDER_BGRA => Some("SDL_PACKEDORDER_BGRA")
        case _                    => _root_.scala.None
    extension (a: SDL_PackedOrder)
      inline def &(b: SDL_PackedOrder): SDL_PackedOrder = a & b
      inline def |(b: SDL_PackedOrder): SDL_PackedOrder = a | b
      inline def is(b: SDL_PackedOrder): Boolean = (a & b) == b
  end SDL_PackedOrder

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_filesystem.h
    */
  opaque type SDL_PathType = CUnsignedInt
  object SDL_PathType extends _BindgenEnumCUnsignedInt[SDL_PathType]:
    given _tag: Tag[SDL_PathType] = Tag.UInt
    inline def define(inline a: Long): SDL_PathType = a.toUInt
    val SDL_PATHTYPE_NONE = define(0)
    val SDL_PATHTYPE_FILE = define(1)
    val SDL_PATHTYPE_DIRECTORY = define(2)
    val SDL_PATHTYPE_OTHER = define(3)
    inline def getName(inline value: SDL_PathType): Option[String] =
      inline value match
        case SDL_PATHTYPE_NONE      => Some("SDL_PATHTYPE_NONE")
        case SDL_PATHTYPE_FILE      => Some("SDL_PATHTYPE_FILE")
        case SDL_PATHTYPE_DIRECTORY => Some("SDL_PATHTYPE_DIRECTORY")
        case SDL_PATHTYPE_OTHER     => Some("SDL_PATHTYPE_OTHER")
        case _                      => _root_.scala.None
    extension (a: SDL_PathType)
      inline def &(b: SDL_PathType): SDL_PathType = a & b
      inline def |(b: SDL_PathType): SDL_PathType = a | b
      inline def is(b: SDL_PathType): Boolean = (a & b) == b
  end SDL_PathType

  /** Pen axis indices.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_pen.h
    */
  opaque type SDL_PenAxis = CUnsignedInt
  object SDL_PenAxis extends _BindgenEnumCUnsignedInt[SDL_PenAxis]:
    given _tag: Tag[SDL_PenAxis] = Tag.UInt
    inline def define(inline a: Long): SDL_PenAxis = a.toUInt
    val SDL_PEN_AXIS_PRESSURE = define(0)
    val SDL_PEN_AXIS_XTILT = define(1)
    val SDL_PEN_AXIS_YTILT = define(2)
    val SDL_PEN_AXIS_DISTANCE = define(3)
    val SDL_PEN_AXIS_ROTATION = define(4)
    val SDL_PEN_AXIS_SLIDER = define(5)
    val SDL_PEN_AXIS_TANGENTIAL_PRESSURE = define(6)
    val SDL_PEN_AXIS_COUNT = define(7)
    inline def getName(inline value: SDL_PenAxis): Option[String] =
      inline value match
        case SDL_PEN_AXIS_PRESSURE => Some("SDL_PEN_AXIS_PRESSURE")
        case SDL_PEN_AXIS_XTILT    => Some("SDL_PEN_AXIS_XTILT")
        case SDL_PEN_AXIS_YTILT    => Some("SDL_PEN_AXIS_YTILT")
        case SDL_PEN_AXIS_DISTANCE => Some("SDL_PEN_AXIS_DISTANCE")
        case SDL_PEN_AXIS_ROTATION => Some("SDL_PEN_AXIS_ROTATION")
        case SDL_PEN_AXIS_SLIDER   => Some("SDL_PEN_AXIS_SLIDER")
        case SDL_PEN_AXIS_TANGENTIAL_PRESSURE =>
          Some("SDL_PEN_AXIS_TANGENTIAL_PRESSURE")
        case SDL_PEN_AXIS_COUNT => Some("SDL_PEN_AXIS_COUNT")
        case _                  => _root_.scala.None
    extension (a: SDL_PenAxis)
      inline def &(b: SDL_PenAxis): SDL_PenAxis = a & b
      inline def |(b: SDL_PenAxis): SDL_PenAxis = a | b
      inline def is(b: SDL_PenAxis): Boolean = (a & b) == b
  end SDL_PenAxis

  /** Pixel format.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_pixels.h
    */
  opaque type SDL_PixelFormat = CUnsignedInt
  object SDL_PixelFormat extends _BindgenEnumCUnsignedInt[SDL_PixelFormat]:
    given _tag: Tag[SDL_PixelFormat] = Tag.UInt
    inline def define(inline a: Long): SDL_PixelFormat = a.toUInt
    val SDL_PIXELFORMAT_UNKNOWN = define(0)
    val SDL_PIXELFORMAT_INDEX1LSB = define(286261504)
    val SDL_PIXELFORMAT_INDEX1MSB = define(287310080)
    val SDL_PIXELFORMAT_INDEX2LSB = define(470811136)
    val SDL_PIXELFORMAT_INDEX2MSB = define(471859712)
    val SDL_PIXELFORMAT_INDEX4LSB = define(303039488)
    val SDL_PIXELFORMAT_INDEX4MSB = define(304088064)
    val SDL_PIXELFORMAT_INDEX8 = define(318769153)
    val SDL_PIXELFORMAT_RGB332 = define(336660481)
    val SDL_PIXELFORMAT_XRGB4444 = define(353504258)
    val SDL_PIXELFORMAT_XBGR4444 = define(357698562)
    val SDL_PIXELFORMAT_XRGB1555 = define(353570562)
    val SDL_PIXELFORMAT_XBGR1555 = define(357764866)
    val SDL_PIXELFORMAT_ARGB4444 = define(355602434)
    val SDL_PIXELFORMAT_RGBA4444 = define(356651010)
    val SDL_PIXELFORMAT_ABGR4444 = define(359796738)
    val SDL_PIXELFORMAT_BGRA4444 = define(360845314)
    val SDL_PIXELFORMAT_ARGB1555 = define(355667970)
    val SDL_PIXELFORMAT_RGBA5551 = define(356782082)
    val SDL_PIXELFORMAT_ABGR1555 = define(359862274)
    val SDL_PIXELFORMAT_BGRA5551 = define(360976386)
    val SDL_PIXELFORMAT_RGB565 = define(353701890)
    val SDL_PIXELFORMAT_BGR565 = define(357896194)
    val SDL_PIXELFORMAT_RGB24 = define(386930691)
    val SDL_PIXELFORMAT_BGR24 = define(390076419)
    val SDL_PIXELFORMAT_XRGB8888 = define(370546692)
    val SDL_PIXELFORMAT_RGBX8888 = define(371595268)
    val SDL_PIXELFORMAT_XBGR8888 = define(374740996)
    val SDL_PIXELFORMAT_BGRX8888 = define(375789572)
    val SDL_PIXELFORMAT_ARGB8888 = define(372645892)
    val SDL_PIXELFORMAT_RGBA8888 = define(373694468)
    val SDL_PIXELFORMAT_ABGR8888 = define(376840196)
    val SDL_PIXELFORMAT_BGRA8888 = define(377888772)
    val SDL_PIXELFORMAT_XRGB2101010 = define(370614276)
    val SDL_PIXELFORMAT_XBGR2101010 = define(374808580)
    val SDL_PIXELFORMAT_ARGB2101010 = define(372711428)
    val SDL_PIXELFORMAT_ABGR2101010 = define(376905732)
    val SDL_PIXELFORMAT_RGB48 = define(403714054)
    val SDL_PIXELFORMAT_BGR48 = define(406859782)
    val SDL_PIXELFORMAT_RGBA64 = define(404766728)
    val SDL_PIXELFORMAT_ARGB64 = define(405815304)
    val SDL_PIXELFORMAT_BGRA64 = define(407912456)
    val SDL_PIXELFORMAT_ABGR64 = define(408961032)
    val SDL_PIXELFORMAT_RGB48_FLOAT = define(437268486)
    val SDL_PIXELFORMAT_BGR48_FLOAT = define(440414214)
    val SDL_PIXELFORMAT_RGBA64_FLOAT = define(438321160)
    val SDL_PIXELFORMAT_ARGB64_FLOAT = define(439369736)
    val SDL_PIXELFORMAT_BGRA64_FLOAT = define(441466888)
    val SDL_PIXELFORMAT_ABGR64_FLOAT = define(442515464)
    val SDL_PIXELFORMAT_RGB96_FLOAT = define(454057996)
    val SDL_PIXELFORMAT_BGR96_FLOAT = define(457203724)
    val SDL_PIXELFORMAT_RGBA128_FLOAT = define(455114768)
    val SDL_PIXELFORMAT_ARGB128_FLOAT = define(456163344)
    val SDL_PIXELFORMAT_BGRA128_FLOAT = define(458260496)
    val SDL_PIXELFORMAT_ABGR128_FLOAT = define(459309072)
    val SDL_PIXELFORMAT_YV12 = define(842094169)
    val SDL_PIXELFORMAT_IYUV = define(1448433993)
    val SDL_PIXELFORMAT_YUY2 = define(844715353)
    val SDL_PIXELFORMAT_UYVY = define(1498831189)
    val SDL_PIXELFORMAT_YVYU = define(1431918169)
    val SDL_PIXELFORMAT_NV12 = define(842094158)
    val SDL_PIXELFORMAT_NV21 = define(825382478)
    val SDL_PIXELFORMAT_P010 = define(808530000)
    val SDL_PIXELFORMAT_EXTERNAL_OES = define(542328143)
    val SDL_PIXELFORMAT_RGBA32 = define(376840196)
    val SDL_PIXELFORMAT_ARGB32 = define(377888772)
    val SDL_PIXELFORMAT_BGRA32 = define(372645892)
    val SDL_PIXELFORMAT_ABGR32 = define(373694468)
    val SDL_PIXELFORMAT_RGBX32 = define(374740996)
    val SDL_PIXELFORMAT_XRGB32 = define(375789572)
    val SDL_PIXELFORMAT_BGRX32 = define(370546692)
    val SDL_PIXELFORMAT_XBGR32 = define(371595268)
    inline def getName(inline value: SDL_PixelFormat): Option[String] =
      inline value match
        case SDL_PIXELFORMAT_UNKNOWN     => Some("SDL_PIXELFORMAT_UNKNOWN")
        case SDL_PIXELFORMAT_INDEX1LSB   => Some("SDL_PIXELFORMAT_INDEX1LSB")
        case SDL_PIXELFORMAT_INDEX1MSB   => Some("SDL_PIXELFORMAT_INDEX1MSB")
        case SDL_PIXELFORMAT_INDEX2LSB   => Some("SDL_PIXELFORMAT_INDEX2LSB")
        case SDL_PIXELFORMAT_INDEX2MSB   => Some("SDL_PIXELFORMAT_INDEX2MSB")
        case SDL_PIXELFORMAT_INDEX4LSB   => Some("SDL_PIXELFORMAT_INDEX4LSB")
        case SDL_PIXELFORMAT_INDEX4MSB   => Some("SDL_PIXELFORMAT_INDEX4MSB")
        case SDL_PIXELFORMAT_INDEX8      => Some("SDL_PIXELFORMAT_INDEX8")
        case SDL_PIXELFORMAT_RGB332      => Some("SDL_PIXELFORMAT_RGB332")
        case SDL_PIXELFORMAT_XRGB4444    => Some("SDL_PIXELFORMAT_XRGB4444")
        case SDL_PIXELFORMAT_XBGR4444    => Some("SDL_PIXELFORMAT_XBGR4444")
        case SDL_PIXELFORMAT_XRGB1555    => Some("SDL_PIXELFORMAT_XRGB1555")
        case SDL_PIXELFORMAT_XBGR1555    => Some("SDL_PIXELFORMAT_XBGR1555")
        case SDL_PIXELFORMAT_ARGB4444    => Some("SDL_PIXELFORMAT_ARGB4444")
        case SDL_PIXELFORMAT_RGBA4444    => Some("SDL_PIXELFORMAT_RGBA4444")
        case SDL_PIXELFORMAT_ABGR4444    => Some("SDL_PIXELFORMAT_ABGR4444")
        case SDL_PIXELFORMAT_BGRA4444    => Some("SDL_PIXELFORMAT_BGRA4444")
        case SDL_PIXELFORMAT_ARGB1555    => Some("SDL_PIXELFORMAT_ARGB1555")
        case SDL_PIXELFORMAT_RGBA5551    => Some("SDL_PIXELFORMAT_RGBA5551")
        case SDL_PIXELFORMAT_ABGR1555    => Some("SDL_PIXELFORMAT_ABGR1555")
        case SDL_PIXELFORMAT_BGRA5551    => Some("SDL_PIXELFORMAT_BGRA5551")
        case SDL_PIXELFORMAT_RGB565      => Some("SDL_PIXELFORMAT_RGB565")
        case SDL_PIXELFORMAT_BGR565      => Some("SDL_PIXELFORMAT_BGR565")
        case SDL_PIXELFORMAT_RGB24       => Some("SDL_PIXELFORMAT_RGB24")
        case SDL_PIXELFORMAT_BGR24       => Some("SDL_PIXELFORMAT_BGR24")
        case SDL_PIXELFORMAT_XRGB8888    => Some("SDL_PIXELFORMAT_XRGB8888")
        case SDL_PIXELFORMAT_RGBX8888    => Some("SDL_PIXELFORMAT_RGBX8888")
        case SDL_PIXELFORMAT_XBGR8888    => Some("SDL_PIXELFORMAT_XBGR8888")
        case SDL_PIXELFORMAT_BGRX8888    => Some("SDL_PIXELFORMAT_BGRX8888")
        case SDL_PIXELFORMAT_ARGB8888    => Some("SDL_PIXELFORMAT_ARGB8888")
        case SDL_PIXELFORMAT_RGBA8888    => Some("SDL_PIXELFORMAT_RGBA8888")
        case SDL_PIXELFORMAT_ABGR8888    => Some("SDL_PIXELFORMAT_ABGR8888")
        case SDL_PIXELFORMAT_BGRA8888    => Some("SDL_PIXELFORMAT_BGRA8888")
        case SDL_PIXELFORMAT_XRGB2101010 => Some("SDL_PIXELFORMAT_XRGB2101010")
        case SDL_PIXELFORMAT_XBGR2101010 => Some("SDL_PIXELFORMAT_XBGR2101010")
        case SDL_PIXELFORMAT_ARGB2101010 => Some("SDL_PIXELFORMAT_ARGB2101010")
        case SDL_PIXELFORMAT_ABGR2101010 => Some("SDL_PIXELFORMAT_ABGR2101010")
        case SDL_PIXELFORMAT_RGB48       => Some("SDL_PIXELFORMAT_RGB48")
        case SDL_PIXELFORMAT_BGR48       => Some("SDL_PIXELFORMAT_BGR48")
        case SDL_PIXELFORMAT_RGBA64      => Some("SDL_PIXELFORMAT_RGBA64")
        case SDL_PIXELFORMAT_ARGB64      => Some("SDL_PIXELFORMAT_ARGB64")
        case SDL_PIXELFORMAT_BGRA64      => Some("SDL_PIXELFORMAT_BGRA64")
        case SDL_PIXELFORMAT_ABGR64      => Some("SDL_PIXELFORMAT_ABGR64")
        case SDL_PIXELFORMAT_RGB48_FLOAT => Some("SDL_PIXELFORMAT_RGB48_FLOAT")
        case SDL_PIXELFORMAT_BGR48_FLOAT => Some("SDL_PIXELFORMAT_BGR48_FLOAT")
        case SDL_PIXELFORMAT_RGBA64_FLOAT =>
          Some("SDL_PIXELFORMAT_RGBA64_FLOAT")
        case SDL_PIXELFORMAT_ARGB64_FLOAT =>
          Some("SDL_PIXELFORMAT_ARGB64_FLOAT")
        case SDL_PIXELFORMAT_BGRA64_FLOAT =>
          Some("SDL_PIXELFORMAT_BGRA64_FLOAT")
        case SDL_PIXELFORMAT_ABGR64_FLOAT =>
          Some("SDL_PIXELFORMAT_ABGR64_FLOAT")
        case SDL_PIXELFORMAT_RGB96_FLOAT => Some("SDL_PIXELFORMAT_RGB96_FLOAT")
        case SDL_PIXELFORMAT_BGR96_FLOAT => Some("SDL_PIXELFORMAT_BGR96_FLOAT")
        case SDL_PIXELFORMAT_RGBA128_FLOAT =>
          Some("SDL_PIXELFORMAT_RGBA128_FLOAT")
        case SDL_PIXELFORMAT_ARGB128_FLOAT =>
          Some("SDL_PIXELFORMAT_ARGB128_FLOAT")
        case SDL_PIXELFORMAT_BGRA128_FLOAT =>
          Some("SDL_PIXELFORMAT_BGRA128_FLOAT")
        case SDL_PIXELFORMAT_ABGR128_FLOAT =>
          Some("SDL_PIXELFORMAT_ABGR128_FLOAT")
        case SDL_PIXELFORMAT_YV12 => Some("SDL_PIXELFORMAT_YV12")
        case SDL_PIXELFORMAT_IYUV => Some("SDL_PIXELFORMAT_IYUV")
        case SDL_PIXELFORMAT_YUY2 => Some("SDL_PIXELFORMAT_YUY2")
        case SDL_PIXELFORMAT_UYVY => Some("SDL_PIXELFORMAT_UYVY")
        case SDL_PIXELFORMAT_YVYU => Some("SDL_PIXELFORMAT_YVYU")
        case SDL_PIXELFORMAT_NV12 => Some("SDL_PIXELFORMAT_NV12")
        case SDL_PIXELFORMAT_NV21 => Some("SDL_PIXELFORMAT_NV21")
        case SDL_PIXELFORMAT_P010 => Some("SDL_PIXELFORMAT_P010")
        case SDL_PIXELFORMAT_EXTERNAL_OES =>
          Some("SDL_PIXELFORMAT_EXTERNAL_OES")
        case SDL_PIXELFORMAT_RGBA32 => Some("SDL_PIXELFORMAT_RGBA32")
        case SDL_PIXELFORMAT_ARGB32 => Some("SDL_PIXELFORMAT_ARGB32")
        case SDL_PIXELFORMAT_BGRA32 => Some("SDL_PIXELFORMAT_BGRA32")
        case SDL_PIXELFORMAT_ABGR32 => Some("SDL_PIXELFORMAT_ABGR32")
        case SDL_PIXELFORMAT_RGBX32 => Some("SDL_PIXELFORMAT_RGBX32")
        case SDL_PIXELFORMAT_XRGB32 => Some("SDL_PIXELFORMAT_XRGB32")
        case SDL_PIXELFORMAT_BGRX32 => Some("SDL_PIXELFORMAT_BGRX32")
        case SDL_PIXELFORMAT_XBGR32 => Some("SDL_PIXELFORMAT_XBGR32")
        case _                      => _root_.scala.None
    extension (a: SDL_PixelFormat)
      inline def &(b: SDL_PixelFormat): SDL_PixelFormat = a & b
      inline def |(b: SDL_PixelFormat): SDL_PixelFormat = a | b
      inline def is(b: SDL_PixelFormat): Boolean = (a & b) == b
  end SDL_PixelFormat

  /** Pixel type.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_pixels.h
    */
  opaque type SDL_PixelType = CUnsignedInt
  object SDL_PixelType extends _BindgenEnumCUnsignedInt[SDL_PixelType]:
    given _tag: Tag[SDL_PixelType] = Tag.UInt
    inline def define(inline a: Long): SDL_PixelType = a.toUInt
    val SDL_PIXELTYPE_UNKNOWN = define(0)
    val SDL_PIXELTYPE_INDEX1 = define(1)
    val SDL_PIXELTYPE_INDEX4 = define(2)
    val SDL_PIXELTYPE_INDEX8 = define(3)
    val SDL_PIXELTYPE_PACKED8 = define(4)
    val SDL_PIXELTYPE_PACKED16 = define(5)
    val SDL_PIXELTYPE_PACKED32 = define(6)
    val SDL_PIXELTYPE_ARRAYU8 = define(7)
    val SDL_PIXELTYPE_ARRAYU16 = define(8)
    val SDL_PIXELTYPE_ARRAYU32 = define(9)
    val SDL_PIXELTYPE_ARRAYF16 = define(10)
    val SDL_PIXELTYPE_ARRAYF32 = define(11)
    val SDL_PIXELTYPE_INDEX2 = define(12)
    inline def getName(inline value: SDL_PixelType): Option[String] =
      inline value match
        case SDL_PIXELTYPE_UNKNOWN  => Some("SDL_PIXELTYPE_UNKNOWN")
        case SDL_PIXELTYPE_INDEX1   => Some("SDL_PIXELTYPE_INDEX1")
        case SDL_PIXELTYPE_INDEX4   => Some("SDL_PIXELTYPE_INDEX4")
        case SDL_PIXELTYPE_INDEX8   => Some("SDL_PIXELTYPE_INDEX8")
        case SDL_PIXELTYPE_PACKED8  => Some("SDL_PIXELTYPE_PACKED8")
        case SDL_PIXELTYPE_PACKED16 => Some("SDL_PIXELTYPE_PACKED16")
        case SDL_PIXELTYPE_PACKED32 => Some("SDL_PIXELTYPE_PACKED32")
        case SDL_PIXELTYPE_ARRAYU8  => Some("SDL_PIXELTYPE_ARRAYU8")
        case SDL_PIXELTYPE_ARRAYU16 => Some("SDL_PIXELTYPE_ARRAYU16")
        case SDL_PIXELTYPE_ARRAYU32 => Some("SDL_PIXELTYPE_ARRAYU32")
        case SDL_PIXELTYPE_ARRAYF16 => Some("SDL_PIXELTYPE_ARRAYF16")
        case SDL_PIXELTYPE_ARRAYF32 => Some("SDL_PIXELTYPE_ARRAYF32")
        case SDL_PIXELTYPE_INDEX2   => Some("SDL_PIXELTYPE_INDEX2")
        case _                      => _root_.scala.None
    extension (a: SDL_PixelType)
      inline def &(b: SDL_PixelType): SDL_PixelType = a & b
      inline def |(b: SDL_PixelType): SDL_PixelType = a | b
      inline def is(b: SDL_PixelType): Boolean = (a & b) == b
  end SDL_PixelType

  /** The basic state for the system's power supply.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_power.h
    */
  opaque type SDL_PowerState = CInt
  object SDL_PowerState extends _BindgenEnumCInt[SDL_PowerState]:
    given _tag: Tag[SDL_PowerState] = Tag.Int
    inline def define(inline a: CInt): SDL_PowerState = a
    val SDL_POWERSTATE_ERROR = define(-1)
    val SDL_POWERSTATE_UNKNOWN = define(0)
    val SDL_POWERSTATE_ON_BATTERY = define(1)
    val SDL_POWERSTATE_NO_BATTERY = define(2)
    val SDL_POWERSTATE_CHARGING = define(3)
    val SDL_POWERSTATE_CHARGED = define(4)
    inline def getName(inline value: SDL_PowerState): Option[String] =
      inline value match
        case SDL_POWERSTATE_ERROR      => Some("SDL_POWERSTATE_ERROR")
        case SDL_POWERSTATE_UNKNOWN    => Some("SDL_POWERSTATE_UNKNOWN")
        case SDL_POWERSTATE_ON_BATTERY => Some("SDL_POWERSTATE_ON_BATTERY")
        case SDL_POWERSTATE_NO_BATTERY => Some("SDL_POWERSTATE_NO_BATTERY")
        case SDL_POWERSTATE_CHARGING   => Some("SDL_POWERSTATE_CHARGING")
        case SDL_POWERSTATE_CHARGED    => Some("SDL_POWERSTATE_CHARGED")
        case _                         => _root_.scala.None
    extension (a: SDL_PowerState)
      inline def &(b: SDL_PowerState): SDL_PowerState = a & b
      inline def |(b: SDL_PowerState): SDL_PowerState = a | b
      inline def is(b: SDL_PowerState): Boolean = (a & b) == b
  end SDL_PowerState

  /** Description of where standard I/O should be directed when creating a
    * process.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_process.h
    */
  opaque type SDL_ProcessIO = CUnsignedInt
  object SDL_ProcessIO extends _BindgenEnumCUnsignedInt[SDL_ProcessIO]:
    given _tag: Tag[SDL_ProcessIO] = Tag.UInt
    inline def define(inline a: Long): SDL_ProcessIO = a.toUInt
    val SDL_PROCESS_STDIO_INHERITED = define(0)
    val SDL_PROCESS_STDIO_NULL = define(1)
    val SDL_PROCESS_STDIO_APP = define(2)
    val SDL_PROCESS_STDIO_REDIRECT = define(3)
    inline def getName(inline value: SDL_ProcessIO): Option[String] =
      inline value match
        case SDL_PROCESS_STDIO_INHERITED => Some("SDL_PROCESS_STDIO_INHERITED")
        case SDL_PROCESS_STDIO_NULL      => Some("SDL_PROCESS_STDIO_NULL")
        case SDL_PROCESS_STDIO_APP       => Some("SDL_PROCESS_STDIO_APP")
        case SDL_PROCESS_STDIO_REDIRECT  => Some("SDL_PROCESS_STDIO_REDIRECT")
        case _                           => _root_.scala.None
    extension (a: SDL_ProcessIO)
      inline def &(b: SDL_ProcessIO): SDL_ProcessIO = a & b
      inline def |(b: SDL_ProcessIO): SDL_ProcessIO = a | b
      inline def is(b: SDL_ProcessIO): Boolean = (a & b) == b
  end SDL_ProcessIO

  /** SDL property type
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_properties.h
    */
  opaque type SDL_PropertyType = CUnsignedInt
  object SDL_PropertyType extends _BindgenEnumCUnsignedInt[SDL_PropertyType]:
    given _tag: Tag[SDL_PropertyType] = Tag.UInt
    inline def define(inline a: Long): SDL_PropertyType = a.toUInt
    val SDL_PROPERTY_TYPE_INVALID = define(0)
    val SDL_PROPERTY_TYPE_POINTER = define(1)
    val SDL_PROPERTY_TYPE_STRING = define(2)
    val SDL_PROPERTY_TYPE_NUMBER = define(3)
    val SDL_PROPERTY_TYPE_FLOAT = define(4)
    val SDL_PROPERTY_TYPE_BOOLEAN = define(5)
    inline def getName(inline value: SDL_PropertyType): Option[String] =
      inline value match
        case SDL_PROPERTY_TYPE_INVALID => Some("SDL_PROPERTY_TYPE_INVALID")
        case SDL_PROPERTY_TYPE_POINTER => Some("SDL_PROPERTY_TYPE_POINTER")
        case SDL_PROPERTY_TYPE_STRING  => Some("SDL_PROPERTY_TYPE_STRING")
        case SDL_PROPERTY_TYPE_NUMBER  => Some("SDL_PROPERTY_TYPE_NUMBER")
        case SDL_PROPERTY_TYPE_FLOAT   => Some("SDL_PROPERTY_TYPE_FLOAT")
        case SDL_PROPERTY_TYPE_BOOLEAN => Some("SDL_PROPERTY_TYPE_BOOLEAN")
        case _                         => _root_.scala.None
    extension (a: SDL_PropertyType)
      inline def &(b: SDL_PropertyType): SDL_PropertyType = a & b
      inline def |(b: SDL_PropertyType): SDL_PropertyType = a | b
      inline def is(b: SDL_PropertyType): Boolean = (a & b) == b
  end SDL_PropertyType

  /** How the logical size is mapped to the output.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  opaque type SDL_RendererLogicalPresentation = CUnsignedInt
  object SDL_RendererLogicalPresentation
      extends _BindgenEnumCUnsignedInt[SDL_RendererLogicalPresentation]:
    given _tag: Tag[SDL_RendererLogicalPresentation] = Tag.UInt
    inline def define(inline a: Long): SDL_RendererLogicalPresentation =
      a.toUInt
    val SDL_LOGICAL_PRESENTATION_DISABLED = define(0)
    val SDL_LOGICAL_PRESENTATION_STRETCH = define(1)
    val SDL_LOGICAL_PRESENTATION_LETTERBOX = define(2)
    val SDL_LOGICAL_PRESENTATION_OVERSCAN = define(3)
    val SDL_LOGICAL_PRESENTATION_INTEGER_SCALE = define(4)
    inline def getName(
        inline value: SDL_RendererLogicalPresentation
    ): Option[String] =
      inline value match
        case SDL_LOGICAL_PRESENTATION_DISABLED =>
          Some("SDL_LOGICAL_PRESENTATION_DISABLED")
        case SDL_LOGICAL_PRESENTATION_STRETCH =>
          Some("SDL_LOGICAL_PRESENTATION_STRETCH")
        case SDL_LOGICAL_PRESENTATION_LETTERBOX =>
          Some("SDL_LOGICAL_PRESENTATION_LETTERBOX")
        case SDL_LOGICAL_PRESENTATION_OVERSCAN =>
          Some("SDL_LOGICAL_PRESENTATION_OVERSCAN")
        case SDL_LOGICAL_PRESENTATION_INTEGER_SCALE =>
          Some("SDL_LOGICAL_PRESENTATION_INTEGER_SCALE")
        case _ => _root_.scala.None
    extension (a: SDL_RendererLogicalPresentation)
      inline def &(
          b: SDL_RendererLogicalPresentation
      ): SDL_RendererLogicalPresentation = a & b
      inline def |(
          b: SDL_RendererLogicalPresentation
      ): SDL_RendererLogicalPresentation = a | b
      inline def is(b: SDL_RendererLogicalPresentation): Boolean = (a & b) == b
    end extension
  end SDL_RendererLogicalPresentation

  /** Application sandbox environment.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_system.h
    */
  opaque type SDL_Sandbox = CUnsignedInt
  object SDL_Sandbox extends _BindgenEnumCUnsignedInt[SDL_Sandbox]:
    given _tag: Tag[SDL_Sandbox] = Tag.UInt
    inline def define(inline a: Long): SDL_Sandbox = a.toUInt
    val SDL_SANDBOX_NONE = define(0)
    val SDL_SANDBOX_UNKNOWN_CONTAINER = define(1)
    val SDL_SANDBOX_FLATPAK = define(2)
    val SDL_SANDBOX_SNAP = define(3)
    val SDL_SANDBOX_MACOS = define(4)
    inline def getName(inline value: SDL_Sandbox): Option[String] =
      inline value match
        case SDL_SANDBOX_NONE => Some("SDL_SANDBOX_NONE")
        case SDL_SANDBOX_UNKNOWN_CONTAINER =>
          Some("SDL_SANDBOX_UNKNOWN_CONTAINER")
        case SDL_SANDBOX_FLATPAK => Some("SDL_SANDBOX_FLATPAK")
        case SDL_SANDBOX_SNAP    => Some("SDL_SANDBOX_SNAP")
        case SDL_SANDBOX_MACOS   => Some("SDL_SANDBOX_MACOS")
        case _                   => _root_.scala.None
    extension (a: SDL_Sandbox)
      inline def &(b: SDL_Sandbox): SDL_Sandbox = a & b
      inline def |(b: SDL_Sandbox): SDL_Sandbox = a | b
      inline def is(b: SDL_Sandbox): Boolean = (a & b) == b
  end SDL_Sandbox

  /** The scaling mode.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  opaque type SDL_ScaleMode = CUnsignedInt
  object SDL_ScaleMode extends _BindgenEnumCUnsignedInt[SDL_ScaleMode]:
    given _tag: Tag[SDL_ScaleMode] = Tag.UInt
    inline def define(inline a: Long): SDL_ScaleMode = a.toUInt
    val SDL_SCALEMODE_NEAREST = define(0)
    val SDL_SCALEMODE_LINEAR = define(1)
    inline def getName(inline value: SDL_ScaleMode): Option[String] =
      inline value match
        case SDL_SCALEMODE_NEAREST => Some("SDL_SCALEMODE_NEAREST")
        case SDL_SCALEMODE_LINEAR  => Some("SDL_SCALEMODE_LINEAR")
        case _                     => _root_.scala.None
    extension (a: SDL_ScaleMode)
      inline def &(b: SDL_ScaleMode): SDL_ScaleMode = a & b
      inline def |(b: SDL_ScaleMode): SDL_ScaleMode = a | b
      inline def is(b: SDL_ScaleMode): Boolean = (a & b) == b
  end SDL_ScaleMode

  /** The SDL keyboard scancode representation.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_scancode.h
    */
  opaque type SDL_Scancode = CUnsignedInt
  object SDL_Scancode extends _BindgenEnumCUnsignedInt[SDL_Scancode]:
    given _tag: Tag[SDL_Scancode] = Tag.UInt
    inline def define(inline a: Long): SDL_Scancode = a.toUInt
    val SDL_SCANCODE_UNKNOWN = define(0)
    val SDL_SCANCODE_A = define(4)
    val SDL_SCANCODE_B = define(5)
    val SDL_SCANCODE_C = define(6)
    val SDL_SCANCODE_D = define(7)
    val SDL_SCANCODE_E = define(8)
    val SDL_SCANCODE_F = define(9)
    val SDL_SCANCODE_G = define(10)
    val SDL_SCANCODE_H = define(11)
    val SDL_SCANCODE_I = define(12)
    val SDL_SCANCODE_J = define(13)
    val SDL_SCANCODE_K = define(14)
    val SDL_SCANCODE_L = define(15)
    val SDL_SCANCODE_M = define(16)
    val SDL_SCANCODE_N = define(17)
    val SDL_SCANCODE_O = define(18)
    val SDL_SCANCODE_P = define(19)
    val SDL_SCANCODE_Q = define(20)
    val SDL_SCANCODE_R = define(21)
    val SDL_SCANCODE_S = define(22)
    val SDL_SCANCODE_T = define(23)
    val SDL_SCANCODE_U = define(24)
    val SDL_SCANCODE_V = define(25)
    val SDL_SCANCODE_W = define(26)
    val SDL_SCANCODE_X = define(27)
    val SDL_SCANCODE_Y = define(28)
    val SDL_SCANCODE_Z = define(29)
    val SDL_SCANCODE_1 = define(30)
    val SDL_SCANCODE_2 = define(31)
    val SDL_SCANCODE_3 = define(32)
    val SDL_SCANCODE_4 = define(33)
    val SDL_SCANCODE_5 = define(34)
    val SDL_SCANCODE_6 = define(35)
    val SDL_SCANCODE_7 = define(36)
    val SDL_SCANCODE_8 = define(37)
    val SDL_SCANCODE_9 = define(38)
    val SDL_SCANCODE_0 = define(39)
    val SDL_SCANCODE_RETURN = define(40)
    val SDL_SCANCODE_ESCAPE = define(41)
    val SDL_SCANCODE_BACKSPACE = define(42)
    val SDL_SCANCODE_TAB = define(43)
    val SDL_SCANCODE_SPACE = define(44)
    val SDL_SCANCODE_MINUS = define(45)
    val SDL_SCANCODE_EQUALS = define(46)
    val SDL_SCANCODE_LEFTBRACKET = define(47)
    val SDL_SCANCODE_RIGHTBRACKET = define(48)
    val SDL_SCANCODE_BACKSLASH = define(49)
    val SDL_SCANCODE_NONUSHASH = define(50)
    val SDL_SCANCODE_SEMICOLON = define(51)
    val SDL_SCANCODE_APOSTROPHE = define(52)
    val SDL_SCANCODE_GRAVE = define(53)
    val SDL_SCANCODE_COMMA = define(54)
    val SDL_SCANCODE_PERIOD = define(55)
    val SDL_SCANCODE_SLASH = define(56)
    val SDL_SCANCODE_CAPSLOCK = define(57)
    val SDL_SCANCODE_F1 = define(58)
    val SDL_SCANCODE_F2 = define(59)
    val SDL_SCANCODE_F3 = define(60)
    val SDL_SCANCODE_F4 = define(61)
    val SDL_SCANCODE_F5 = define(62)
    val SDL_SCANCODE_F6 = define(63)
    val SDL_SCANCODE_F7 = define(64)
    val SDL_SCANCODE_F8 = define(65)
    val SDL_SCANCODE_F9 = define(66)
    val SDL_SCANCODE_F10 = define(67)
    val SDL_SCANCODE_F11 = define(68)
    val SDL_SCANCODE_F12 = define(69)
    val SDL_SCANCODE_PRINTSCREEN = define(70)
    val SDL_SCANCODE_SCROLLLOCK = define(71)
    val SDL_SCANCODE_PAUSE = define(72)
    val SDL_SCANCODE_INSERT = define(73)
    val SDL_SCANCODE_HOME = define(74)
    val SDL_SCANCODE_PAGEUP = define(75)
    val SDL_SCANCODE_DELETE = define(76)
    val SDL_SCANCODE_END = define(77)
    val SDL_SCANCODE_PAGEDOWN = define(78)
    val SDL_SCANCODE_RIGHT = define(79)
    val SDL_SCANCODE_LEFT = define(80)
    val SDL_SCANCODE_DOWN = define(81)
    val SDL_SCANCODE_UP = define(82)
    val SDL_SCANCODE_NUMLOCKCLEAR = define(83)
    val SDL_SCANCODE_KP_DIVIDE = define(84)
    val SDL_SCANCODE_KP_MULTIPLY = define(85)
    val SDL_SCANCODE_KP_MINUS = define(86)
    val SDL_SCANCODE_KP_PLUS = define(87)
    val SDL_SCANCODE_KP_ENTER = define(88)
    val SDL_SCANCODE_KP_1 = define(89)
    val SDL_SCANCODE_KP_2 = define(90)
    val SDL_SCANCODE_KP_3 = define(91)
    val SDL_SCANCODE_KP_4 = define(92)
    val SDL_SCANCODE_KP_5 = define(93)
    val SDL_SCANCODE_KP_6 = define(94)
    val SDL_SCANCODE_KP_7 = define(95)
    val SDL_SCANCODE_KP_8 = define(96)
    val SDL_SCANCODE_KP_9 = define(97)
    val SDL_SCANCODE_KP_0 = define(98)
    val SDL_SCANCODE_KP_PERIOD = define(99)
    val SDL_SCANCODE_NONUSBACKSLASH = define(100)
    val SDL_SCANCODE_APPLICATION = define(101)
    val SDL_SCANCODE_POWER = define(102)
    val SDL_SCANCODE_KP_EQUALS = define(103)
    val SDL_SCANCODE_F13 = define(104)
    val SDL_SCANCODE_F14 = define(105)
    val SDL_SCANCODE_F15 = define(106)
    val SDL_SCANCODE_F16 = define(107)
    val SDL_SCANCODE_F17 = define(108)
    val SDL_SCANCODE_F18 = define(109)
    val SDL_SCANCODE_F19 = define(110)
    val SDL_SCANCODE_F20 = define(111)
    val SDL_SCANCODE_F21 = define(112)
    val SDL_SCANCODE_F22 = define(113)
    val SDL_SCANCODE_F23 = define(114)
    val SDL_SCANCODE_F24 = define(115)
    val SDL_SCANCODE_EXECUTE = define(116)
    val SDL_SCANCODE_HELP = define(117)
    val SDL_SCANCODE_MENU = define(118)
    val SDL_SCANCODE_SELECT = define(119)
    val SDL_SCANCODE_STOP = define(120)
    val SDL_SCANCODE_AGAIN = define(121)
    val SDL_SCANCODE_UNDO = define(122)
    val SDL_SCANCODE_CUT = define(123)
    val SDL_SCANCODE_COPY = define(124)
    val SDL_SCANCODE_PASTE = define(125)
    val SDL_SCANCODE_FIND = define(126)
    val SDL_SCANCODE_MUTE = define(127)
    val SDL_SCANCODE_VOLUMEUP = define(128)
    val SDL_SCANCODE_VOLUMEDOWN = define(129)
    val SDL_SCANCODE_KP_COMMA = define(133)
    val SDL_SCANCODE_KP_EQUALSAS400 = define(134)
    val SDL_SCANCODE_INTERNATIONAL1 = define(135)
    val SDL_SCANCODE_INTERNATIONAL2 = define(136)
    val SDL_SCANCODE_INTERNATIONAL3 = define(137)
    val SDL_SCANCODE_INTERNATIONAL4 = define(138)
    val SDL_SCANCODE_INTERNATIONAL5 = define(139)
    val SDL_SCANCODE_INTERNATIONAL6 = define(140)
    val SDL_SCANCODE_INTERNATIONAL7 = define(141)
    val SDL_SCANCODE_INTERNATIONAL8 = define(142)
    val SDL_SCANCODE_INTERNATIONAL9 = define(143)
    val SDL_SCANCODE_LANG1 = define(144)
    val SDL_SCANCODE_LANG2 = define(145)
    val SDL_SCANCODE_LANG3 = define(146)
    val SDL_SCANCODE_LANG4 = define(147)
    val SDL_SCANCODE_LANG5 = define(148)
    val SDL_SCANCODE_LANG6 = define(149)
    val SDL_SCANCODE_LANG7 = define(150)
    val SDL_SCANCODE_LANG8 = define(151)
    val SDL_SCANCODE_LANG9 = define(152)
    val SDL_SCANCODE_ALTERASE = define(153)
    val SDL_SCANCODE_SYSREQ = define(154)
    val SDL_SCANCODE_CANCEL = define(155)
    val SDL_SCANCODE_CLEAR = define(156)
    val SDL_SCANCODE_PRIOR = define(157)
    val SDL_SCANCODE_RETURN2 = define(158)
    val SDL_SCANCODE_SEPARATOR = define(159)
    val SDL_SCANCODE_OUT = define(160)
    val SDL_SCANCODE_OPER = define(161)
    val SDL_SCANCODE_CLEARAGAIN = define(162)
    val SDL_SCANCODE_CRSEL = define(163)
    val SDL_SCANCODE_EXSEL = define(164)
    val SDL_SCANCODE_KP_00 = define(176)
    val SDL_SCANCODE_KP_000 = define(177)
    val SDL_SCANCODE_THOUSANDSSEPARATOR = define(178)
    val SDL_SCANCODE_DECIMALSEPARATOR = define(179)
    val SDL_SCANCODE_CURRENCYUNIT = define(180)
    val SDL_SCANCODE_CURRENCYSUBUNIT = define(181)
    val SDL_SCANCODE_KP_LEFTPAREN = define(182)
    val SDL_SCANCODE_KP_RIGHTPAREN = define(183)
    val SDL_SCANCODE_KP_LEFTBRACE = define(184)
    val SDL_SCANCODE_KP_RIGHTBRACE = define(185)
    val SDL_SCANCODE_KP_TAB = define(186)
    val SDL_SCANCODE_KP_BACKSPACE = define(187)
    val SDL_SCANCODE_KP_A = define(188)
    val SDL_SCANCODE_KP_B = define(189)
    val SDL_SCANCODE_KP_C = define(190)
    val SDL_SCANCODE_KP_D = define(191)
    val SDL_SCANCODE_KP_E = define(192)
    val SDL_SCANCODE_KP_F = define(193)
    val SDL_SCANCODE_KP_XOR = define(194)
    val SDL_SCANCODE_KP_POWER = define(195)
    val SDL_SCANCODE_KP_PERCENT = define(196)
    val SDL_SCANCODE_KP_LESS = define(197)
    val SDL_SCANCODE_KP_GREATER = define(198)
    val SDL_SCANCODE_KP_AMPERSAND = define(199)
    val SDL_SCANCODE_KP_DBLAMPERSAND = define(200)
    val SDL_SCANCODE_KP_VERTICALBAR = define(201)
    val SDL_SCANCODE_KP_DBLVERTICALBAR = define(202)
    val SDL_SCANCODE_KP_COLON = define(203)
    val SDL_SCANCODE_KP_HASH = define(204)
    val SDL_SCANCODE_KP_SPACE = define(205)
    val SDL_SCANCODE_KP_AT = define(206)
    val SDL_SCANCODE_KP_EXCLAM = define(207)
    val SDL_SCANCODE_KP_MEMSTORE = define(208)
    val SDL_SCANCODE_KP_MEMRECALL = define(209)
    val SDL_SCANCODE_KP_MEMCLEAR = define(210)
    val SDL_SCANCODE_KP_MEMADD = define(211)
    val SDL_SCANCODE_KP_MEMSUBTRACT = define(212)
    val SDL_SCANCODE_KP_MEMMULTIPLY = define(213)
    val SDL_SCANCODE_KP_MEMDIVIDE = define(214)
    val SDL_SCANCODE_KP_PLUSMINUS = define(215)
    val SDL_SCANCODE_KP_CLEAR = define(216)
    val SDL_SCANCODE_KP_CLEARENTRY = define(217)
    val SDL_SCANCODE_KP_BINARY = define(218)
    val SDL_SCANCODE_KP_OCTAL = define(219)
    val SDL_SCANCODE_KP_DECIMAL = define(220)
    val SDL_SCANCODE_KP_HEXADECIMAL = define(221)
    val SDL_SCANCODE_LCTRL = define(224)
    val SDL_SCANCODE_LSHIFT = define(225)
    val SDL_SCANCODE_LALT = define(226)
    val SDL_SCANCODE_LGUI = define(227)
    val SDL_SCANCODE_RCTRL = define(228)
    val SDL_SCANCODE_RSHIFT = define(229)
    val SDL_SCANCODE_RALT = define(230)
    val SDL_SCANCODE_RGUI = define(231)
    val SDL_SCANCODE_MODE = define(257)
    val SDL_SCANCODE_SLEEP = define(258)
    val SDL_SCANCODE_WAKE = define(259)
    val SDL_SCANCODE_CHANNEL_INCREMENT = define(260)
    val SDL_SCANCODE_CHANNEL_DECREMENT = define(261)
    val SDL_SCANCODE_MEDIA_PLAY = define(262)
    val SDL_SCANCODE_MEDIA_PAUSE = define(263)
    val SDL_SCANCODE_MEDIA_RECORD = define(264)
    val SDL_SCANCODE_MEDIA_FAST_FORWARD = define(265)
    val SDL_SCANCODE_MEDIA_REWIND = define(266)
    val SDL_SCANCODE_MEDIA_NEXT_TRACK = define(267)
    val SDL_SCANCODE_MEDIA_PREVIOUS_TRACK = define(268)
    val SDL_SCANCODE_MEDIA_STOP = define(269)
    val SDL_SCANCODE_MEDIA_EJECT = define(270)
    val SDL_SCANCODE_MEDIA_PLAY_PAUSE = define(271)
    val SDL_SCANCODE_MEDIA_SELECT = define(272)
    val SDL_SCANCODE_AC_NEW = define(273)
    val SDL_SCANCODE_AC_OPEN = define(274)
    val SDL_SCANCODE_AC_CLOSE = define(275)
    val SDL_SCANCODE_AC_EXIT = define(276)
    val SDL_SCANCODE_AC_SAVE = define(277)
    val SDL_SCANCODE_AC_PRINT = define(278)
    val SDL_SCANCODE_AC_PROPERTIES = define(279)
    val SDL_SCANCODE_AC_SEARCH = define(280)
    val SDL_SCANCODE_AC_HOME = define(281)
    val SDL_SCANCODE_AC_BACK = define(282)
    val SDL_SCANCODE_AC_FORWARD = define(283)
    val SDL_SCANCODE_AC_STOP = define(284)
    val SDL_SCANCODE_AC_REFRESH = define(285)
    val SDL_SCANCODE_AC_BOOKMARKS = define(286)
    val SDL_SCANCODE_SOFTLEFT = define(287)
    val SDL_SCANCODE_SOFTRIGHT = define(288)
    val SDL_SCANCODE_CALL = define(289)
    val SDL_SCANCODE_ENDCALL = define(290)
    val SDL_SCANCODE_RESERVED = define(400)
    val SDL_SCANCODE_COUNT = define(512)
    inline def getName(inline value: SDL_Scancode): Option[String] =
      inline value match
        case SDL_SCANCODE_UNKNOWN        => Some("SDL_SCANCODE_UNKNOWN")
        case SDL_SCANCODE_A              => Some("SDL_SCANCODE_A")
        case SDL_SCANCODE_B              => Some("SDL_SCANCODE_B")
        case SDL_SCANCODE_C              => Some("SDL_SCANCODE_C")
        case SDL_SCANCODE_D              => Some("SDL_SCANCODE_D")
        case SDL_SCANCODE_E              => Some("SDL_SCANCODE_E")
        case SDL_SCANCODE_F              => Some("SDL_SCANCODE_F")
        case SDL_SCANCODE_G              => Some("SDL_SCANCODE_G")
        case SDL_SCANCODE_H              => Some("SDL_SCANCODE_H")
        case SDL_SCANCODE_I              => Some("SDL_SCANCODE_I")
        case SDL_SCANCODE_J              => Some("SDL_SCANCODE_J")
        case SDL_SCANCODE_K              => Some("SDL_SCANCODE_K")
        case SDL_SCANCODE_L              => Some("SDL_SCANCODE_L")
        case SDL_SCANCODE_M              => Some("SDL_SCANCODE_M")
        case SDL_SCANCODE_N              => Some("SDL_SCANCODE_N")
        case SDL_SCANCODE_O              => Some("SDL_SCANCODE_O")
        case SDL_SCANCODE_P              => Some("SDL_SCANCODE_P")
        case SDL_SCANCODE_Q              => Some("SDL_SCANCODE_Q")
        case SDL_SCANCODE_R              => Some("SDL_SCANCODE_R")
        case SDL_SCANCODE_S              => Some("SDL_SCANCODE_S")
        case SDL_SCANCODE_T              => Some("SDL_SCANCODE_T")
        case SDL_SCANCODE_U              => Some("SDL_SCANCODE_U")
        case SDL_SCANCODE_V              => Some("SDL_SCANCODE_V")
        case SDL_SCANCODE_W              => Some("SDL_SCANCODE_W")
        case SDL_SCANCODE_X              => Some("SDL_SCANCODE_X")
        case SDL_SCANCODE_Y              => Some("SDL_SCANCODE_Y")
        case SDL_SCANCODE_Z              => Some("SDL_SCANCODE_Z")
        case SDL_SCANCODE_1              => Some("SDL_SCANCODE_1")
        case SDL_SCANCODE_2              => Some("SDL_SCANCODE_2")
        case SDL_SCANCODE_3              => Some("SDL_SCANCODE_3")
        case SDL_SCANCODE_4              => Some("SDL_SCANCODE_4")
        case SDL_SCANCODE_5              => Some("SDL_SCANCODE_5")
        case SDL_SCANCODE_6              => Some("SDL_SCANCODE_6")
        case SDL_SCANCODE_7              => Some("SDL_SCANCODE_7")
        case SDL_SCANCODE_8              => Some("SDL_SCANCODE_8")
        case SDL_SCANCODE_9              => Some("SDL_SCANCODE_9")
        case SDL_SCANCODE_0              => Some("SDL_SCANCODE_0")
        case SDL_SCANCODE_RETURN         => Some("SDL_SCANCODE_RETURN")
        case SDL_SCANCODE_ESCAPE         => Some("SDL_SCANCODE_ESCAPE")
        case SDL_SCANCODE_BACKSPACE      => Some("SDL_SCANCODE_BACKSPACE")
        case SDL_SCANCODE_TAB            => Some("SDL_SCANCODE_TAB")
        case SDL_SCANCODE_SPACE          => Some("SDL_SCANCODE_SPACE")
        case SDL_SCANCODE_MINUS          => Some("SDL_SCANCODE_MINUS")
        case SDL_SCANCODE_EQUALS         => Some("SDL_SCANCODE_EQUALS")
        case SDL_SCANCODE_LEFTBRACKET    => Some("SDL_SCANCODE_LEFTBRACKET")
        case SDL_SCANCODE_RIGHTBRACKET   => Some("SDL_SCANCODE_RIGHTBRACKET")
        case SDL_SCANCODE_BACKSLASH      => Some("SDL_SCANCODE_BACKSLASH")
        case SDL_SCANCODE_NONUSHASH      => Some("SDL_SCANCODE_NONUSHASH")
        case SDL_SCANCODE_SEMICOLON      => Some("SDL_SCANCODE_SEMICOLON")
        case SDL_SCANCODE_APOSTROPHE     => Some("SDL_SCANCODE_APOSTROPHE")
        case SDL_SCANCODE_GRAVE          => Some("SDL_SCANCODE_GRAVE")
        case SDL_SCANCODE_COMMA          => Some("SDL_SCANCODE_COMMA")
        case SDL_SCANCODE_PERIOD         => Some("SDL_SCANCODE_PERIOD")
        case SDL_SCANCODE_SLASH          => Some("SDL_SCANCODE_SLASH")
        case SDL_SCANCODE_CAPSLOCK       => Some("SDL_SCANCODE_CAPSLOCK")
        case SDL_SCANCODE_F1             => Some("SDL_SCANCODE_F1")
        case SDL_SCANCODE_F2             => Some("SDL_SCANCODE_F2")
        case SDL_SCANCODE_F3             => Some("SDL_SCANCODE_F3")
        case SDL_SCANCODE_F4             => Some("SDL_SCANCODE_F4")
        case SDL_SCANCODE_F5             => Some("SDL_SCANCODE_F5")
        case SDL_SCANCODE_F6             => Some("SDL_SCANCODE_F6")
        case SDL_SCANCODE_F7             => Some("SDL_SCANCODE_F7")
        case SDL_SCANCODE_F8             => Some("SDL_SCANCODE_F8")
        case SDL_SCANCODE_F9             => Some("SDL_SCANCODE_F9")
        case SDL_SCANCODE_F10            => Some("SDL_SCANCODE_F10")
        case SDL_SCANCODE_F11            => Some("SDL_SCANCODE_F11")
        case SDL_SCANCODE_F12            => Some("SDL_SCANCODE_F12")
        case SDL_SCANCODE_PRINTSCREEN    => Some("SDL_SCANCODE_PRINTSCREEN")
        case SDL_SCANCODE_SCROLLLOCK     => Some("SDL_SCANCODE_SCROLLLOCK")
        case SDL_SCANCODE_PAUSE          => Some("SDL_SCANCODE_PAUSE")
        case SDL_SCANCODE_INSERT         => Some("SDL_SCANCODE_INSERT")
        case SDL_SCANCODE_HOME           => Some("SDL_SCANCODE_HOME")
        case SDL_SCANCODE_PAGEUP         => Some("SDL_SCANCODE_PAGEUP")
        case SDL_SCANCODE_DELETE         => Some("SDL_SCANCODE_DELETE")
        case SDL_SCANCODE_END            => Some("SDL_SCANCODE_END")
        case SDL_SCANCODE_PAGEDOWN       => Some("SDL_SCANCODE_PAGEDOWN")
        case SDL_SCANCODE_RIGHT          => Some("SDL_SCANCODE_RIGHT")
        case SDL_SCANCODE_LEFT           => Some("SDL_SCANCODE_LEFT")
        case SDL_SCANCODE_DOWN           => Some("SDL_SCANCODE_DOWN")
        case SDL_SCANCODE_UP             => Some("SDL_SCANCODE_UP")
        case SDL_SCANCODE_NUMLOCKCLEAR   => Some("SDL_SCANCODE_NUMLOCKCLEAR")
        case SDL_SCANCODE_KP_DIVIDE      => Some("SDL_SCANCODE_KP_DIVIDE")
        case SDL_SCANCODE_KP_MULTIPLY    => Some("SDL_SCANCODE_KP_MULTIPLY")
        case SDL_SCANCODE_KP_MINUS       => Some("SDL_SCANCODE_KP_MINUS")
        case SDL_SCANCODE_KP_PLUS        => Some("SDL_SCANCODE_KP_PLUS")
        case SDL_SCANCODE_KP_ENTER       => Some("SDL_SCANCODE_KP_ENTER")
        case SDL_SCANCODE_KP_1           => Some("SDL_SCANCODE_KP_1")
        case SDL_SCANCODE_KP_2           => Some("SDL_SCANCODE_KP_2")
        case SDL_SCANCODE_KP_3           => Some("SDL_SCANCODE_KP_3")
        case SDL_SCANCODE_KP_4           => Some("SDL_SCANCODE_KP_4")
        case SDL_SCANCODE_KP_5           => Some("SDL_SCANCODE_KP_5")
        case SDL_SCANCODE_KP_6           => Some("SDL_SCANCODE_KP_6")
        case SDL_SCANCODE_KP_7           => Some("SDL_SCANCODE_KP_7")
        case SDL_SCANCODE_KP_8           => Some("SDL_SCANCODE_KP_8")
        case SDL_SCANCODE_KP_9           => Some("SDL_SCANCODE_KP_9")
        case SDL_SCANCODE_KP_0           => Some("SDL_SCANCODE_KP_0")
        case SDL_SCANCODE_KP_PERIOD      => Some("SDL_SCANCODE_KP_PERIOD")
        case SDL_SCANCODE_NONUSBACKSLASH => Some("SDL_SCANCODE_NONUSBACKSLASH")
        case SDL_SCANCODE_APPLICATION    => Some("SDL_SCANCODE_APPLICATION")
        case SDL_SCANCODE_POWER          => Some("SDL_SCANCODE_POWER")
        case SDL_SCANCODE_KP_EQUALS      => Some("SDL_SCANCODE_KP_EQUALS")
        case SDL_SCANCODE_F13            => Some("SDL_SCANCODE_F13")
        case SDL_SCANCODE_F14            => Some("SDL_SCANCODE_F14")
        case SDL_SCANCODE_F15            => Some("SDL_SCANCODE_F15")
        case SDL_SCANCODE_F16            => Some("SDL_SCANCODE_F16")
        case SDL_SCANCODE_F17            => Some("SDL_SCANCODE_F17")
        case SDL_SCANCODE_F18            => Some("SDL_SCANCODE_F18")
        case SDL_SCANCODE_F19            => Some("SDL_SCANCODE_F19")
        case SDL_SCANCODE_F20            => Some("SDL_SCANCODE_F20")
        case SDL_SCANCODE_F21            => Some("SDL_SCANCODE_F21")
        case SDL_SCANCODE_F22            => Some("SDL_SCANCODE_F22")
        case SDL_SCANCODE_F23            => Some("SDL_SCANCODE_F23")
        case SDL_SCANCODE_F24            => Some("SDL_SCANCODE_F24")
        case SDL_SCANCODE_EXECUTE        => Some("SDL_SCANCODE_EXECUTE")
        case SDL_SCANCODE_HELP           => Some("SDL_SCANCODE_HELP")
        case SDL_SCANCODE_MENU           => Some("SDL_SCANCODE_MENU")
        case SDL_SCANCODE_SELECT         => Some("SDL_SCANCODE_SELECT")
        case SDL_SCANCODE_STOP           => Some("SDL_SCANCODE_STOP")
        case SDL_SCANCODE_AGAIN          => Some("SDL_SCANCODE_AGAIN")
        case SDL_SCANCODE_UNDO           => Some("SDL_SCANCODE_UNDO")
        case SDL_SCANCODE_CUT            => Some("SDL_SCANCODE_CUT")
        case SDL_SCANCODE_COPY           => Some("SDL_SCANCODE_COPY")
        case SDL_SCANCODE_PASTE          => Some("SDL_SCANCODE_PASTE")
        case SDL_SCANCODE_FIND           => Some("SDL_SCANCODE_FIND")
        case SDL_SCANCODE_MUTE           => Some("SDL_SCANCODE_MUTE")
        case SDL_SCANCODE_VOLUMEUP       => Some("SDL_SCANCODE_VOLUMEUP")
        case SDL_SCANCODE_VOLUMEDOWN     => Some("SDL_SCANCODE_VOLUMEDOWN")
        case SDL_SCANCODE_KP_COMMA       => Some("SDL_SCANCODE_KP_COMMA")
        case SDL_SCANCODE_KP_EQUALSAS400 => Some("SDL_SCANCODE_KP_EQUALSAS400")
        case SDL_SCANCODE_INTERNATIONAL1 => Some("SDL_SCANCODE_INTERNATIONAL1")
        case SDL_SCANCODE_INTERNATIONAL2 => Some("SDL_SCANCODE_INTERNATIONAL2")
        case SDL_SCANCODE_INTERNATIONAL3 => Some("SDL_SCANCODE_INTERNATIONAL3")
        case SDL_SCANCODE_INTERNATIONAL4 => Some("SDL_SCANCODE_INTERNATIONAL4")
        case SDL_SCANCODE_INTERNATIONAL5 => Some("SDL_SCANCODE_INTERNATIONAL5")
        case SDL_SCANCODE_INTERNATIONAL6 => Some("SDL_SCANCODE_INTERNATIONAL6")
        case SDL_SCANCODE_INTERNATIONAL7 => Some("SDL_SCANCODE_INTERNATIONAL7")
        case SDL_SCANCODE_INTERNATIONAL8 => Some("SDL_SCANCODE_INTERNATIONAL8")
        case SDL_SCANCODE_INTERNATIONAL9 => Some("SDL_SCANCODE_INTERNATIONAL9")
        case SDL_SCANCODE_LANG1          => Some("SDL_SCANCODE_LANG1")
        case SDL_SCANCODE_LANG2          => Some("SDL_SCANCODE_LANG2")
        case SDL_SCANCODE_LANG3          => Some("SDL_SCANCODE_LANG3")
        case SDL_SCANCODE_LANG4          => Some("SDL_SCANCODE_LANG4")
        case SDL_SCANCODE_LANG5          => Some("SDL_SCANCODE_LANG5")
        case SDL_SCANCODE_LANG6          => Some("SDL_SCANCODE_LANG6")
        case SDL_SCANCODE_LANG7          => Some("SDL_SCANCODE_LANG7")
        case SDL_SCANCODE_LANG8          => Some("SDL_SCANCODE_LANG8")
        case SDL_SCANCODE_LANG9          => Some("SDL_SCANCODE_LANG9")
        case SDL_SCANCODE_ALTERASE       => Some("SDL_SCANCODE_ALTERASE")
        case SDL_SCANCODE_SYSREQ         => Some("SDL_SCANCODE_SYSREQ")
        case SDL_SCANCODE_CANCEL         => Some("SDL_SCANCODE_CANCEL")
        case SDL_SCANCODE_CLEAR          => Some("SDL_SCANCODE_CLEAR")
        case SDL_SCANCODE_PRIOR          => Some("SDL_SCANCODE_PRIOR")
        case SDL_SCANCODE_RETURN2        => Some("SDL_SCANCODE_RETURN2")
        case SDL_SCANCODE_SEPARATOR      => Some("SDL_SCANCODE_SEPARATOR")
        case SDL_SCANCODE_OUT            => Some("SDL_SCANCODE_OUT")
        case SDL_SCANCODE_OPER           => Some("SDL_SCANCODE_OPER")
        case SDL_SCANCODE_CLEARAGAIN     => Some("SDL_SCANCODE_CLEARAGAIN")
        case SDL_SCANCODE_CRSEL          => Some("SDL_SCANCODE_CRSEL")
        case SDL_SCANCODE_EXSEL          => Some("SDL_SCANCODE_EXSEL")
        case SDL_SCANCODE_KP_00          => Some("SDL_SCANCODE_KP_00")
        case SDL_SCANCODE_KP_000         => Some("SDL_SCANCODE_KP_000")
        case SDL_SCANCODE_THOUSANDSSEPARATOR =>
          Some("SDL_SCANCODE_THOUSANDSSEPARATOR")
        case SDL_SCANCODE_DECIMALSEPARATOR =>
          Some("SDL_SCANCODE_DECIMALSEPARATOR")
        case SDL_SCANCODE_CURRENCYUNIT => Some("SDL_SCANCODE_CURRENCYUNIT")
        case SDL_SCANCODE_CURRENCYSUBUNIT =>
          Some("SDL_SCANCODE_CURRENCYSUBUNIT")
        case SDL_SCANCODE_KP_LEFTPAREN  => Some("SDL_SCANCODE_KP_LEFTPAREN")
        case SDL_SCANCODE_KP_RIGHTPAREN => Some("SDL_SCANCODE_KP_RIGHTPAREN")
        case SDL_SCANCODE_KP_LEFTBRACE  => Some("SDL_SCANCODE_KP_LEFTBRACE")
        case SDL_SCANCODE_KP_RIGHTBRACE => Some("SDL_SCANCODE_KP_RIGHTBRACE")
        case SDL_SCANCODE_KP_TAB        => Some("SDL_SCANCODE_KP_TAB")
        case SDL_SCANCODE_KP_BACKSPACE  => Some("SDL_SCANCODE_KP_BACKSPACE")
        case SDL_SCANCODE_KP_A          => Some("SDL_SCANCODE_KP_A")
        case SDL_SCANCODE_KP_B          => Some("SDL_SCANCODE_KP_B")
        case SDL_SCANCODE_KP_C          => Some("SDL_SCANCODE_KP_C")
        case SDL_SCANCODE_KP_D          => Some("SDL_SCANCODE_KP_D")
        case SDL_SCANCODE_KP_E          => Some("SDL_SCANCODE_KP_E")
        case SDL_SCANCODE_KP_F          => Some("SDL_SCANCODE_KP_F")
        case SDL_SCANCODE_KP_XOR        => Some("SDL_SCANCODE_KP_XOR")
        case SDL_SCANCODE_KP_POWER      => Some("SDL_SCANCODE_KP_POWER")
        case SDL_SCANCODE_KP_PERCENT    => Some("SDL_SCANCODE_KP_PERCENT")
        case SDL_SCANCODE_KP_LESS       => Some("SDL_SCANCODE_KP_LESS")
        case SDL_SCANCODE_KP_GREATER    => Some("SDL_SCANCODE_KP_GREATER")
        case SDL_SCANCODE_KP_AMPERSAND  => Some("SDL_SCANCODE_KP_AMPERSAND")
        case SDL_SCANCODE_KP_DBLAMPERSAND =>
          Some("SDL_SCANCODE_KP_DBLAMPERSAND")
        case SDL_SCANCODE_KP_VERTICALBAR => Some("SDL_SCANCODE_KP_VERTICALBAR")
        case SDL_SCANCODE_KP_DBLVERTICALBAR =>
          Some("SDL_SCANCODE_KP_DBLVERTICALBAR")
        case SDL_SCANCODE_KP_COLON       => Some("SDL_SCANCODE_KP_COLON")
        case SDL_SCANCODE_KP_HASH        => Some("SDL_SCANCODE_KP_HASH")
        case SDL_SCANCODE_KP_SPACE       => Some("SDL_SCANCODE_KP_SPACE")
        case SDL_SCANCODE_KP_AT          => Some("SDL_SCANCODE_KP_AT")
        case SDL_SCANCODE_KP_EXCLAM      => Some("SDL_SCANCODE_KP_EXCLAM")
        case SDL_SCANCODE_KP_MEMSTORE    => Some("SDL_SCANCODE_KP_MEMSTORE")
        case SDL_SCANCODE_KP_MEMRECALL   => Some("SDL_SCANCODE_KP_MEMRECALL")
        case SDL_SCANCODE_KP_MEMCLEAR    => Some("SDL_SCANCODE_KP_MEMCLEAR")
        case SDL_SCANCODE_KP_MEMADD      => Some("SDL_SCANCODE_KP_MEMADD")
        case SDL_SCANCODE_KP_MEMSUBTRACT => Some("SDL_SCANCODE_KP_MEMSUBTRACT")
        case SDL_SCANCODE_KP_MEMMULTIPLY => Some("SDL_SCANCODE_KP_MEMMULTIPLY")
        case SDL_SCANCODE_KP_MEMDIVIDE   => Some("SDL_SCANCODE_KP_MEMDIVIDE")
        case SDL_SCANCODE_KP_PLUSMINUS   => Some("SDL_SCANCODE_KP_PLUSMINUS")
        case SDL_SCANCODE_KP_CLEAR       => Some("SDL_SCANCODE_KP_CLEAR")
        case SDL_SCANCODE_KP_CLEARENTRY  => Some("SDL_SCANCODE_KP_CLEARENTRY")
        case SDL_SCANCODE_KP_BINARY      => Some("SDL_SCANCODE_KP_BINARY")
        case SDL_SCANCODE_KP_OCTAL       => Some("SDL_SCANCODE_KP_OCTAL")
        case SDL_SCANCODE_KP_DECIMAL     => Some("SDL_SCANCODE_KP_DECIMAL")
        case SDL_SCANCODE_KP_HEXADECIMAL => Some("SDL_SCANCODE_KP_HEXADECIMAL")
        case SDL_SCANCODE_LCTRL          => Some("SDL_SCANCODE_LCTRL")
        case SDL_SCANCODE_LSHIFT         => Some("SDL_SCANCODE_LSHIFT")
        case SDL_SCANCODE_LALT           => Some("SDL_SCANCODE_LALT")
        case SDL_SCANCODE_LGUI           => Some("SDL_SCANCODE_LGUI")
        case SDL_SCANCODE_RCTRL          => Some("SDL_SCANCODE_RCTRL")
        case SDL_SCANCODE_RSHIFT         => Some("SDL_SCANCODE_RSHIFT")
        case SDL_SCANCODE_RALT           => Some("SDL_SCANCODE_RALT")
        case SDL_SCANCODE_RGUI           => Some("SDL_SCANCODE_RGUI")
        case SDL_SCANCODE_MODE           => Some("SDL_SCANCODE_MODE")
        case SDL_SCANCODE_SLEEP          => Some("SDL_SCANCODE_SLEEP")
        case SDL_SCANCODE_WAKE           => Some("SDL_SCANCODE_WAKE")
        case SDL_SCANCODE_CHANNEL_INCREMENT =>
          Some("SDL_SCANCODE_CHANNEL_INCREMENT")
        case SDL_SCANCODE_CHANNEL_DECREMENT =>
          Some("SDL_SCANCODE_CHANNEL_DECREMENT")
        case SDL_SCANCODE_MEDIA_PLAY   => Some("SDL_SCANCODE_MEDIA_PLAY")
        case SDL_SCANCODE_MEDIA_PAUSE  => Some("SDL_SCANCODE_MEDIA_PAUSE")
        case SDL_SCANCODE_MEDIA_RECORD => Some("SDL_SCANCODE_MEDIA_RECORD")
        case SDL_SCANCODE_MEDIA_FAST_FORWARD =>
          Some("SDL_SCANCODE_MEDIA_FAST_FORWARD")
        case SDL_SCANCODE_MEDIA_REWIND => Some("SDL_SCANCODE_MEDIA_REWIND")
        case SDL_SCANCODE_MEDIA_NEXT_TRACK =>
          Some("SDL_SCANCODE_MEDIA_NEXT_TRACK")
        case SDL_SCANCODE_MEDIA_PREVIOUS_TRACK =>
          Some("SDL_SCANCODE_MEDIA_PREVIOUS_TRACK")
        case SDL_SCANCODE_MEDIA_STOP  => Some("SDL_SCANCODE_MEDIA_STOP")
        case SDL_SCANCODE_MEDIA_EJECT => Some("SDL_SCANCODE_MEDIA_EJECT")
        case SDL_SCANCODE_MEDIA_PLAY_PAUSE =>
          Some("SDL_SCANCODE_MEDIA_PLAY_PAUSE")
        case SDL_SCANCODE_MEDIA_SELECT  => Some("SDL_SCANCODE_MEDIA_SELECT")
        case SDL_SCANCODE_AC_NEW        => Some("SDL_SCANCODE_AC_NEW")
        case SDL_SCANCODE_AC_OPEN       => Some("SDL_SCANCODE_AC_OPEN")
        case SDL_SCANCODE_AC_CLOSE      => Some("SDL_SCANCODE_AC_CLOSE")
        case SDL_SCANCODE_AC_EXIT       => Some("SDL_SCANCODE_AC_EXIT")
        case SDL_SCANCODE_AC_SAVE       => Some("SDL_SCANCODE_AC_SAVE")
        case SDL_SCANCODE_AC_PRINT      => Some("SDL_SCANCODE_AC_PRINT")
        case SDL_SCANCODE_AC_PROPERTIES => Some("SDL_SCANCODE_AC_PROPERTIES")
        case SDL_SCANCODE_AC_SEARCH     => Some("SDL_SCANCODE_AC_SEARCH")
        case SDL_SCANCODE_AC_HOME       => Some("SDL_SCANCODE_AC_HOME")
        case SDL_SCANCODE_AC_BACK       => Some("SDL_SCANCODE_AC_BACK")
        case SDL_SCANCODE_AC_FORWARD    => Some("SDL_SCANCODE_AC_FORWARD")
        case SDL_SCANCODE_AC_STOP       => Some("SDL_SCANCODE_AC_STOP")
        case SDL_SCANCODE_AC_REFRESH    => Some("SDL_SCANCODE_AC_REFRESH")
        case SDL_SCANCODE_AC_BOOKMARKS  => Some("SDL_SCANCODE_AC_BOOKMARKS")
        case SDL_SCANCODE_SOFTLEFT      => Some("SDL_SCANCODE_SOFTLEFT")
        case SDL_SCANCODE_SOFTRIGHT     => Some("SDL_SCANCODE_SOFTRIGHT")
        case SDL_SCANCODE_CALL          => Some("SDL_SCANCODE_CALL")
        case SDL_SCANCODE_ENDCALL       => Some("SDL_SCANCODE_ENDCALL")
        case SDL_SCANCODE_RESERVED      => Some("SDL_SCANCODE_RESERVED")
        case SDL_SCANCODE_COUNT         => Some("SDL_SCANCODE_COUNT")
        case _                          => _root_.scala.None
    extension (a: SDL_Scancode)
      inline def &(b: SDL_Scancode): SDL_Scancode = a & b
      inline def |(b: SDL_Scancode): SDL_Scancode = a | b
      inline def is(b: SDL_Scancode): Boolean = (a & b) == b
  end SDL_Scancode

  /** The different sensors defined by SDL.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_sensor.h
    */
  opaque type SDL_SensorType = CInt
  object SDL_SensorType extends _BindgenEnumCInt[SDL_SensorType]:
    given _tag: Tag[SDL_SensorType] = Tag.Int
    inline def define(inline a: CInt): SDL_SensorType = a
    val SDL_SENSOR_INVALID = define(-1)
    val SDL_SENSOR_UNKNOWN = define(0)
    val SDL_SENSOR_ACCEL = define(1)
    val SDL_SENSOR_GYRO = define(2)
    val SDL_SENSOR_ACCEL_L = define(3)
    val SDL_SENSOR_GYRO_L = define(4)
    val SDL_SENSOR_ACCEL_R = define(5)
    val SDL_SENSOR_GYRO_R = define(6)
    inline def getName(inline value: SDL_SensorType): Option[String] =
      inline value match
        case SDL_SENSOR_INVALID => Some("SDL_SENSOR_INVALID")
        case SDL_SENSOR_UNKNOWN => Some("SDL_SENSOR_UNKNOWN")
        case SDL_SENSOR_ACCEL   => Some("SDL_SENSOR_ACCEL")
        case SDL_SENSOR_GYRO    => Some("SDL_SENSOR_GYRO")
        case SDL_SENSOR_ACCEL_L => Some("SDL_SENSOR_ACCEL_L")
        case SDL_SENSOR_GYRO_L  => Some("SDL_SENSOR_GYRO_L")
        case SDL_SENSOR_ACCEL_R => Some("SDL_SENSOR_ACCEL_R")
        case SDL_SENSOR_GYRO_R  => Some("SDL_SENSOR_GYRO_R")
        case _                  => _root_.scala.None
    extension (a: SDL_SensorType)
      inline def &(b: SDL_SensorType): SDL_SensorType = a & b
      inline def |(b: SDL_SensorType): SDL_SensorType = a | b
      inline def is(b: SDL_SensorType): Boolean = (a & b) == b
  end SDL_SensorType

  /** Cursor types for SDL_CreateSystemCursor().
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mouse.h
    */
  opaque type SDL_SystemCursor = CUnsignedInt
  object SDL_SystemCursor extends _BindgenEnumCUnsignedInt[SDL_SystemCursor]:
    given _tag: Tag[SDL_SystemCursor] = Tag.UInt
    inline def define(inline a: Long): SDL_SystemCursor = a.toUInt
    val SDL_SYSTEM_CURSOR_DEFAULT = define(0)
    val SDL_SYSTEM_CURSOR_TEXT = define(1)
    val SDL_SYSTEM_CURSOR_WAIT = define(2)
    val SDL_SYSTEM_CURSOR_CROSSHAIR = define(3)
    val SDL_SYSTEM_CURSOR_PROGRESS = define(4)
    val SDL_SYSTEM_CURSOR_NWSE_RESIZE = define(5)
    val SDL_SYSTEM_CURSOR_NESW_RESIZE = define(6)
    val SDL_SYSTEM_CURSOR_EW_RESIZE = define(7)
    val SDL_SYSTEM_CURSOR_NS_RESIZE = define(8)
    val SDL_SYSTEM_CURSOR_MOVE = define(9)
    val SDL_SYSTEM_CURSOR_NOT_ALLOWED = define(10)
    val SDL_SYSTEM_CURSOR_POINTER = define(11)
    val SDL_SYSTEM_CURSOR_NW_RESIZE = define(12)
    val SDL_SYSTEM_CURSOR_N_RESIZE = define(13)
    val SDL_SYSTEM_CURSOR_NE_RESIZE = define(14)
    val SDL_SYSTEM_CURSOR_E_RESIZE = define(15)
    val SDL_SYSTEM_CURSOR_SE_RESIZE = define(16)
    val SDL_SYSTEM_CURSOR_S_RESIZE = define(17)
    val SDL_SYSTEM_CURSOR_SW_RESIZE = define(18)
    val SDL_SYSTEM_CURSOR_W_RESIZE = define(19)
    val SDL_SYSTEM_CURSOR_COUNT = define(20)
    inline def getName(inline value: SDL_SystemCursor): Option[String] =
      inline value match
        case SDL_SYSTEM_CURSOR_DEFAULT   => Some("SDL_SYSTEM_CURSOR_DEFAULT")
        case SDL_SYSTEM_CURSOR_TEXT      => Some("SDL_SYSTEM_CURSOR_TEXT")
        case SDL_SYSTEM_CURSOR_WAIT      => Some("SDL_SYSTEM_CURSOR_WAIT")
        case SDL_SYSTEM_CURSOR_CROSSHAIR => Some("SDL_SYSTEM_CURSOR_CROSSHAIR")
        case SDL_SYSTEM_CURSOR_PROGRESS  => Some("SDL_SYSTEM_CURSOR_PROGRESS")
        case SDL_SYSTEM_CURSOR_NWSE_RESIZE =>
          Some("SDL_SYSTEM_CURSOR_NWSE_RESIZE")
        case SDL_SYSTEM_CURSOR_NESW_RESIZE =>
          Some("SDL_SYSTEM_CURSOR_NESW_RESIZE")
        case SDL_SYSTEM_CURSOR_EW_RESIZE => Some("SDL_SYSTEM_CURSOR_EW_RESIZE")
        case SDL_SYSTEM_CURSOR_NS_RESIZE => Some("SDL_SYSTEM_CURSOR_NS_RESIZE")
        case SDL_SYSTEM_CURSOR_MOVE      => Some("SDL_SYSTEM_CURSOR_MOVE")
        case SDL_SYSTEM_CURSOR_NOT_ALLOWED =>
          Some("SDL_SYSTEM_CURSOR_NOT_ALLOWED")
        case SDL_SYSTEM_CURSOR_POINTER   => Some("SDL_SYSTEM_CURSOR_POINTER")
        case SDL_SYSTEM_CURSOR_NW_RESIZE => Some("SDL_SYSTEM_CURSOR_NW_RESIZE")
        case SDL_SYSTEM_CURSOR_N_RESIZE  => Some("SDL_SYSTEM_CURSOR_N_RESIZE")
        case SDL_SYSTEM_CURSOR_NE_RESIZE => Some("SDL_SYSTEM_CURSOR_NE_RESIZE")
        case SDL_SYSTEM_CURSOR_E_RESIZE  => Some("SDL_SYSTEM_CURSOR_E_RESIZE")
        case SDL_SYSTEM_CURSOR_SE_RESIZE => Some("SDL_SYSTEM_CURSOR_SE_RESIZE")
        case SDL_SYSTEM_CURSOR_S_RESIZE  => Some("SDL_SYSTEM_CURSOR_S_RESIZE")
        case SDL_SYSTEM_CURSOR_SW_RESIZE => Some("SDL_SYSTEM_CURSOR_SW_RESIZE")
        case SDL_SYSTEM_CURSOR_W_RESIZE  => Some("SDL_SYSTEM_CURSOR_W_RESIZE")
        case SDL_SYSTEM_CURSOR_COUNT     => Some("SDL_SYSTEM_CURSOR_COUNT")
        case _                           => _root_.scala.None
    extension (a: SDL_SystemCursor)
      inline def &(b: SDL_SystemCursor): SDL_SystemCursor = a & b
      inline def |(b: SDL_SystemCursor): SDL_SystemCursor = a | b
      inline def is(b: SDL_SystemCursor): Boolean = (a & b) == b
  end SDL_SystemCursor

  /** System theme.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  opaque type SDL_SystemTheme = CUnsignedInt
  object SDL_SystemTheme extends _BindgenEnumCUnsignedInt[SDL_SystemTheme]:
    given _tag: Tag[SDL_SystemTheme] = Tag.UInt
    inline def define(inline a: Long): SDL_SystemTheme = a.toUInt
    val SDL_SYSTEM_THEME_UNKNOWN = define(0)
    val SDL_SYSTEM_THEME_LIGHT = define(1)
    val SDL_SYSTEM_THEME_DARK = define(2)
    inline def getName(inline value: SDL_SystemTheme): Option[String] =
      inline value match
        case SDL_SYSTEM_THEME_UNKNOWN => Some("SDL_SYSTEM_THEME_UNKNOWN")
        case SDL_SYSTEM_THEME_LIGHT   => Some("SDL_SYSTEM_THEME_LIGHT")
        case SDL_SYSTEM_THEME_DARK    => Some("SDL_SYSTEM_THEME_DARK")
        case _                        => _root_.scala.None
    extension (a: SDL_SystemTheme)
      inline def &(b: SDL_SystemTheme): SDL_SystemTheme = a & b
      inline def |(b: SDL_SystemTheme): SDL_SystemTheme = a | b
      inline def is(b: SDL_SystemTheme): Boolean = (a & b) == b
  end SDL_SystemTheme

  /** Text input type.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_keyboard.h
    */
  opaque type SDL_TextInputType = CUnsignedInt
  object SDL_TextInputType extends _BindgenEnumCUnsignedInt[SDL_TextInputType]:
    given _tag: Tag[SDL_TextInputType] = Tag.UInt
    inline def define(inline a: Long): SDL_TextInputType = a.toUInt
    val SDL_TEXTINPUT_TYPE_TEXT = define(0)
    val SDL_TEXTINPUT_TYPE_TEXT_NAME = define(1)
    val SDL_TEXTINPUT_TYPE_TEXT_EMAIL = define(2)
    val SDL_TEXTINPUT_TYPE_TEXT_USERNAME = define(3)
    val SDL_TEXTINPUT_TYPE_TEXT_PASSWORD_HIDDEN = define(4)
    val SDL_TEXTINPUT_TYPE_TEXT_PASSWORD_VISIBLE = define(5)
    val SDL_TEXTINPUT_TYPE_NUMBER = define(6)
    val SDL_TEXTINPUT_TYPE_NUMBER_PASSWORD_HIDDEN = define(7)
    val SDL_TEXTINPUT_TYPE_NUMBER_PASSWORD_VISIBLE = define(8)
    inline def getName(inline value: SDL_TextInputType): Option[String] =
      inline value match
        case SDL_TEXTINPUT_TYPE_TEXT => Some("SDL_TEXTINPUT_TYPE_TEXT")
        case SDL_TEXTINPUT_TYPE_TEXT_NAME =>
          Some("SDL_TEXTINPUT_TYPE_TEXT_NAME")
        case SDL_TEXTINPUT_TYPE_TEXT_EMAIL =>
          Some("SDL_TEXTINPUT_TYPE_TEXT_EMAIL")
        case SDL_TEXTINPUT_TYPE_TEXT_USERNAME =>
          Some("SDL_TEXTINPUT_TYPE_TEXT_USERNAME")
        case SDL_TEXTINPUT_TYPE_TEXT_PASSWORD_HIDDEN =>
          Some("SDL_TEXTINPUT_TYPE_TEXT_PASSWORD_HIDDEN")
        case SDL_TEXTINPUT_TYPE_TEXT_PASSWORD_VISIBLE =>
          Some("SDL_TEXTINPUT_TYPE_TEXT_PASSWORD_VISIBLE")
        case SDL_TEXTINPUT_TYPE_NUMBER => Some("SDL_TEXTINPUT_TYPE_NUMBER")
        case SDL_TEXTINPUT_TYPE_NUMBER_PASSWORD_HIDDEN =>
          Some("SDL_TEXTINPUT_TYPE_NUMBER_PASSWORD_HIDDEN")
        case SDL_TEXTINPUT_TYPE_NUMBER_PASSWORD_VISIBLE =>
          Some("SDL_TEXTINPUT_TYPE_NUMBER_PASSWORD_VISIBLE")
        case _ => _root_.scala.None
    extension (a: SDL_TextInputType)
      inline def &(b: SDL_TextInputType): SDL_TextInputType = a & b
      inline def |(b: SDL_TextInputType): SDL_TextInputType = a | b
      inline def is(b: SDL_TextInputType): Boolean = (a & b) == b
  end SDL_TextInputType

  /** The access pattern allowed for a texture.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  opaque type SDL_TextureAccess = CUnsignedInt
  object SDL_TextureAccess extends _BindgenEnumCUnsignedInt[SDL_TextureAccess]:
    given _tag: Tag[SDL_TextureAccess] = Tag.UInt
    inline def define(inline a: Long): SDL_TextureAccess = a.toUInt
    val SDL_TEXTUREACCESS_STATIC = define(0)
    val SDL_TEXTUREACCESS_STREAMING = define(1)
    val SDL_TEXTUREACCESS_TARGET = define(2)
    inline def getName(inline value: SDL_TextureAccess): Option[String] =
      inline value match
        case SDL_TEXTUREACCESS_STATIC    => Some("SDL_TEXTUREACCESS_STATIC")
        case SDL_TEXTUREACCESS_STREAMING => Some("SDL_TEXTUREACCESS_STREAMING")
        case SDL_TEXTUREACCESS_TARGET    => Some("SDL_TEXTUREACCESS_TARGET")
        case _                           => _root_.scala.None
    extension (a: SDL_TextureAccess)
      inline def &(b: SDL_TextureAccess): SDL_TextureAccess = a & b
      inline def |(b: SDL_TextureAccess): SDL_TextureAccess = a | b
      inline def is(b: SDL_TextureAccess): Boolean = (a & b) == b
  end SDL_TextureAccess

  /** The SDL thread priority.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_thread.h
    */
  opaque type SDL_ThreadPriority = CUnsignedInt
  object SDL_ThreadPriority
      extends _BindgenEnumCUnsignedInt[SDL_ThreadPriority]:
    given _tag: Tag[SDL_ThreadPriority] = Tag.UInt
    inline def define(inline a: Long): SDL_ThreadPriority = a.toUInt
    val SDL_THREAD_PRIORITY_LOW = define(0)
    val SDL_THREAD_PRIORITY_NORMAL = define(1)
    val SDL_THREAD_PRIORITY_HIGH = define(2)
    val SDL_THREAD_PRIORITY_TIME_CRITICAL = define(3)
    inline def getName(inline value: SDL_ThreadPriority): Option[String] =
      inline value match
        case SDL_THREAD_PRIORITY_LOW    => Some("SDL_THREAD_PRIORITY_LOW")
        case SDL_THREAD_PRIORITY_NORMAL => Some("SDL_THREAD_PRIORITY_NORMAL")
        case SDL_THREAD_PRIORITY_HIGH   => Some("SDL_THREAD_PRIORITY_HIGH")
        case SDL_THREAD_PRIORITY_TIME_CRITICAL =>
          Some("SDL_THREAD_PRIORITY_TIME_CRITICAL")
        case _ => _root_.scala.None
    extension (a: SDL_ThreadPriority)
      inline def &(b: SDL_ThreadPriority): SDL_ThreadPriority = a & b
      inline def |(b: SDL_ThreadPriority): SDL_ThreadPriority = a | b
      inline def is(b: SDL_ThreadPriority): Boolean = (a & b) == b
  end SDL_ThreadPriority

  /** The preferred time format of the current system locale.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_time.h
    */
  opaque type SDL_TimeFormat = CUnsignedInt
  object SDL_TimeFormat extends _BindgenEnumCUnsignedInt[SDL_TimeFormat]:
    given _tag: Tag[SDL_TimeFormat] = Tag.UInt
    inline def define(inline a: Long): SDL_TimeFormat = a.toUInt
    val SDL_TIME_FORMAT_24HR = define(0)
    val SDL_TIME_FORMAT_12HR = define(1)
    inline def getName(inline value: SDL_TimeFormat): Option[String] =
      inline value match
        case SDL_TIME_FORMAT_24HR => Some("SDL_TIME_FORMAT_24HR")
        case SDL_TIME_FORMAT_12HR => Some("SDL_TIME_FORMAT_12HR")
        case _                    => _root_.scala.None
    extension (a: SDL_TimeFormat)
      inline def &(b: SDL_TimeFormat): SDL_TimeFormat = a & b
      inline def |(b: SDL_TimeFormat): SDL_TimeFormat = a | b
      inline def is(b: SDL_TimeFormat): Boolean = (a & b) == b
  end SDL_TimeFormat

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_touch.h
    */
  opaque type SDL_TouchDeviceType = CInt
  object SDL_TouchDeviceType extends _BindgenEnumCInt[SDL_TouchDeviceType]:
    given _tag: Tag[SDL_TouchDeviceType] = Tag.Int
    inline def define(inline a: CInt): SDL_TouchDeviceType = a
    val SDL_TOUCH_DEVICE_INVALID = define(-1)
    val SDL_TOUCH_DEVICE_DIRECT = define(0)
    val SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE = define(1)
    val SDL_TOUCH_DEVICE_INDIRECT_RELATIVE = define(2)
    inline def getName(inline value: SDL_TouchDeviceType): Option[String] =
      inline value match
        case SDL_TOUCH_DEVICE_INVALID => Some("SDL_TOUCH_DEVICE_INVALID")
        case SDL_TOUCH_DEVICE_DIRECT  => Some("SDL_TOUCH_DEVICE_DIRECT")
        case SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE =>
          Some("SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE")
        case SDL_TOUCH_DEVICE_INDIRECT_RELATIVE =>
          Some("SDL_TOUCH_DEVICE_INDIRECT_RELATIVE")
        case _ => _root_.scala.None
    extension (a: SDL_TouchDeviceType)
      inline def &(b: SDL_TouchDeviceType): SDL_TouchDeviceType = a & b
      inline def |(b: SDL_TouchDeviceType): SDL_TouchDeviceType = a | b
      inline def is(b: SDL_TouchDeviceType): Boolean = (a & b) == b
  end SDL_TouchDeviceType

  /** Colorspace transfer characteristics.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_pixels.h
    */
  opaque type SDL_TransferCharacteristics = CUnsignedInt
  object SDL_TransferCharacteristics
      extends _BindgenEnumCUnsignedInt[SDL_TransferCharacteristics]:
    given _tag: Tag[SDL_TransferCharacteristics] = Tag.UInt
    inline def define(inline a: Long): SDL_TransferCharacteristics = a.toUInt
    val SDL_TRANSFER_CHARACTERISTICS_UNKNOWN = define(0)
    val SDL_TRANSFER_CHARACTERISTICS_BT709 = define(1)
    val SDL_TRANSFER_CHARACTERISTICS_UNSPECIFIED = define(2)
    val SDL_TRANSFER_CHARACTERISTICS_GAMMA22 = define(4)
    val SDL_TRANSFER_CHARACTERISTICS_GAMMA28 = define(5)
    val SDL_TRANSFER_CHARACTERISTICS_BT601 = define(6)
    val SDL_TRANSFER_CHARACTERISTICS_SMPTE240 = define(7)
    val SDL_TRANSFER_CHARACTERISTICS_LINEAR = define(8)
    val SDL_TRANSFER_CHARACTERISTICS_LOG100 = define(9)
    val SDL_TRANSFER_CHARACTERISTICS_LOG100_SQRT10 = define(10)
    val SDL_TRANSFER_CHARACTERISTICS_IEC61966 = define(11)
    val SDL_TRANSFER_CHARACTERISTICS_BT1361 = define(12)
    val SDL_TRANSFER_CHARACTERISTICS_SRGB = define(13)
    val SDL_TRANSFER_CHARACTERISTICS_BT2020_10BIT = define(14)
    val SDL_TRANSFER_CHARACTERISTICS_BT2020_12BIT = define(15)
    val SDL_TRANSFER_CHARACTERISTICS_PQ = define(16)
    val SDL_TRANSFER_CHARACTERISTICS_SMPTE428 = define(17)
    val SDL_TRANSFER_CHARACTERISTICS_HLG = define(18)
    val SDL_TRANSFER_CHARACTERISTICS_CUSTOM = define(31)
    inline def getName(
        inline value: SDL_TransferCharacteristics
    ): Option[String] =
      inline value match
        case SDL_TRANSFER_CHARACTERISTICS_UNKNOWN =>
          Some("SDL_TRANSFER_CHARACTERISTICS_UNKNOWN")
        case SDL_TRANSFER_CHARACTERISTICS_BT709 =>
          Some("SDL_TRANSFER_CHARACTERISTICS_BT709")
        case SDL_TRANSFER_CHARACTERISTICS_UNSPECIFIED =>
          Some("SDL_TRANSFER_CHARACTERISTICS_UNSPECIFIED")
        case SDL_TRANSFER_CHARACTERISTICS_GAMMA22 =>
          Some("SDL_TRANSFER_CHARACTERISTICS_GAMMA22")
        case SDL_TRANSFER_CHARACTERISTICS_GAMMA28 =>
          Some("SDL_TRANSFER_CHARACTERISTICS_GAMMA28")
        case SDL_TRANSFER_CHARACTERISTICS_BT601 =>
          Some("SDL_TRANSFER_CHARACTERISTICS_BT601")
        case SDL_TRANSFER_CHARACTERISTICS_SMPTE240 =>
          Some("SDL_TRANSFER_CHARACTERISTICS_SMPTE240")
        case SDL_TRANSFER_CHARACTERISTICS_LINEAR =>
          Some("SDL_TRANSFER_CHARACTERISTICS_LINEAR")
        case SDL_TRANSFER_CHARACTERISTICS_LOG100 =>
          Some("SDL_TRANSFER_CHARACTERISTICS_LOG100")
        case SDL_TRANSFER_CHARACTERISTICS_LOG100_SQRT10 =>
          Some("SDL_TRANSFER_CHARACTERISTICS_LOG100_SQRT10")
        case SDL_TRANSFER_CHARACTERISTICS_IEC61966 =>
          Some("SDL_TRANSFER_CHARACTERISTICS_IEC61966")
        case SDL_TRANSFER_CHARACTERISTICS_BT1361 =>
          Some("SDL_TRANSFER_CHARACTERISTICS_BT1361")
        case SDL_TRANSFER_CHARACTERISTICS_SRGB =>
          Some("SDL_TRANSFER_CHARACTERISTICS_SRGB")
        case SDL_TRANSFER_CHARACTERISTICS_BT2020_10BIT =>
          Some("SDL_TRANSFER_CHARACTERISTICS_BT2020_10BIT")
        case SDL_TRANSFER_CHARACTERISTICS_BT2020_12BIT =>
          Some("SDL_TRANSFER_CHARACTERISTICS_BT2020_12BIT")
        case SDL_TRANSFER_CHARACTERISTICS_PQ =>
          Some("SDL_TRANSFER_CHARACTERISTICS_PQ")
        case SDL_TRANSFER_CHARACTERISTICS_SMPTE428 =>
          Some("SDL_TRANSFER_CHARACTERISTICS_SMPTE428")
        case SDL_TRANSFER_CHARACTERISTICS_HLG =>
          Some("SDL_TRANSFER_CHARACTERISTICS_HLG")
        case SDL_TRANSFER_CHARACTERISTICS_CUSTOM =>
          Some("SDL_TRANSFER_CHARACTERISTICS_CUSTOM")
        case _ => _root_.scala.None
    extension (a: SDL_TransferCharacteristics)
      inline def &(
          b: SDL_TransferCharacteristics
      ): SDL_TransferCharacteristics = a & b
      inline def |(
          b: SDL_TransferCharacteristics
      ): SDL_TransferCharacteristics = a | b
      inline def is(b: SDL_TransferCharacteristics): Boolean = (a & b) == b
    end extension
  end SDL_TransferCharacteristics

  /** HID underlying bus types.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_hidapi.h
    */
  opaque type SDL_hid_bus_type = CUnsignedInt
  object SDL_hid_bus_type extends _BindgenEnumCUnsignedInt[SDL_hid_bus_type]:
    given _tag: Tag[SDL_hid_bus_type] = Tag.UInt
    inline def define(inline a: Long): SDL_hid_bus_type = a.toUInt
    val SDL_HID_API_BUS_UNKNOWN = define(0)
    val SDL_HID_API_BUS_USB = define(1)
    val SDL_HID_API_BUS_BLUETOOTH = define(2)
    val SDL_HID_API_BUS_I2C = define(3)
    val SDL_HID_API_BUS_SPI = define(4)
    inline def getName(inline value: SDL_hid_bus_type): Option[String] =
      inline value match
        case SDL_HID_API_BUS_UNKNOWN   => Some("SDL_HID_API_BUS_UNKNOWN")
        case SDL_HID_API_BUS_USB       => Some("SDL_HID_API_BUS_USB")
        case SDL_HID_API_BUS_BLUETOOTH => Some("SDL_HID_API_BUS_BLUETOOTH")
        case SDL_HID_API_BUS_I2C       => Some("SDL_HID_API_BUS_I2C")
        case SDL_HID_API_BUS_SPI       => Some("SDL_HID_API_BUS_SPI")
        case _                         => _root_.scala.None
    extension (a: SDL_hid_bus_type)
      inline def &(b: SDL_hid_bus_type): SDL_hid_bus_type = a & b
      inline def |(b: SDL_hid_bus_type): SDL_hid_bus_type = a | b
      inline def is(b: SDL_hid_bus_type): Boolean = (a & b) == b
  end SDL_hid_bus_type
end enumerations

object aliases:
  import _root_.sdl3.enumerations.*
  import _root_.sdl3.predef.*
  import _root_.sdl3.aliases.*
  import _root_.sdl3.structs.*
  import _root_.sdl3.unions.*

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_init.h
    */
  opaque type SDL_AppEvent_func =
    CFuncPtr2[Ptr[Byte], Ptr[SDL_Event], SDL_AppResult]
  object SDL_AppEvent_func:
    given _tag: Tag[SDL_AppEvent_func] =
      Tag.materializeCFuncPtr2[Ptr[Byte], Ptr[SDL_Event], SDL_AppResult]
    inline def fromPtr(ptr: Ptr[Byte] | CVoidPtr): SDL_AppEvent_func =
      CFuncPtr.fromPtr(ptr.asInstanceOf[Ptr[Byte]])
    inline def apply(
        inline o: CFuncPtr2[Ptr[Byte], Ptr[SDL_Event], SDL_AppResult]
    ): SDL_AppEvent_func = o
    extension (v: SDL_AppEvent_func)
      inline def value: CFuncPtr2[Ptr[Byte], Ptr[SDL_Event], SDL_AppResult] = v
      inline def toPtr: CVoidPtr = CFuncPtr.toPtr(v)
  end SDL_AppEvent_func

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_init.h
    */
  opaque type SDL_AppInit_func =
    CFuncPtr3[Ptr[Ptr[Byte]], CInt, Ptr[CString], SDL_AppResult]
  object SDL_AppInit_func:
    given _tag: Tag[SDL_AppInit_func] = Tag
      .materializeCFuncPtr3[Ptr[Ptr[Byte]], CInt, Ptr[CString], SDL_AppResult]
    inline def fromPtr(ptr: Ptr[Byte] | CVoidPtr): SDL_AppInit_func =
      CFuncPtr.fromPtr(ptr.asInstanceOf[Ptr[Byte]])
    inline def apply(
        inline o: CFuncPtr3[Ptr[Ptr[Byte]], CInt, Ptr[CString], SDL_AppResult]
    ): SDL_AppInit_func = o
    extension (v: SDL_AppInit_func)
      inline def value
          : CFuncPtr3[Ptr[Ptr[Byte]], CInt, Ptr[CString], SDL_AppResult] = v
      inline def toPtr: CVoidPtr = CFuncPtr.toPtr(v)
  end SDL_AppInit_func

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_init.h
    */
  opaque type SDL_AppIterate_func = CFuncPtr1[Ptr[Byte], SDL_AppResult]
  object SDL_AppIterate_func:
    given _tag: Tag[SDL_AppIterate_func] =
      Tag.materializeCFuncPtr1[Ptr[Byte], SDL_AppResult]
    inline def fromPtr(ptr: Ptr[Byte] | CVoidPtr): SDL_AppIterate_func =
      CFuncPtr.fromPtr(ptr.asInstanceOf[Ptr[Byte]])
    inline def apply(
        inline o: CFuncPtr1[Ptr[Byte], SDL_AppResult]
    ): SDL_AppIterate_func = o
    extension (v: SDL_AppIterate_func)
      inline def value: CFuncPtr1[Ptr[Byte], SDL_AppResult] = v
      inline def toPtr: CVoidPtr = CFuncPtr.toPtr(v)
  end SDL_AppIterate_func

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_init.h
    */
  opaque type SDL_AppQuit_func = CFuncPtr2[Ptr[Byte], SDL_AppResult, Unit]
  object SDL_AppQuit_func:
    given _tag: Tag[SDL_AppQuit_func] =
      Tag.materializeCFuncPtr2[Ptr[Byte], SDL_AppResult, Unit]
    inline def fromPtr(ptr: Ptr[Byte] | CVoidPtr): SDL_AppQuit_func =
      CFuncPtr.fromPtr(ptr.asInstanceOf[Ptr[Byte]])
    inline def apply(
        inline o: CFuncPtr2[Ptr[Byte], SDL_AppResult, Unit]
    ): SDL_AppQuit_func = o
    extension (v: SDL_AppQuit_func)
      inline def value: CFuncPtr2[Ptr[Byte], SDL_AppResult, Unit] = v
      inline def toPtr: CVoidPtr = CFuncPtr.toPtr(v)
  end SDL_AppQuit_func

  /** A callback that fires when an SDL assertion fails.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_assert.h
    */
  opaque type SDL_AssertionHandler =
    CFuncPtr2[Ptr[SDL_AssertData], Ptr[Byte], SDL_AssertState]
  object SDL_AssertionHandler:
    given _tag: Tag[SDL_AssertionHandler] =
      Tag.materializeCFuncPtr2[Ptr[SDL_AssertData], Ptr[Byte], SDL_AssertState]
    inline def fromPtr(ptr: Ptr[Byte] | CVoidPtr): SDL_AssertionHandler =
      CFuncPtr.fromPtr(ptr.asInstanceOf[Ptr[Byte]])
    inline def apply(
        inline o: CFuncPtr2[Ptr[SDL_AssertData], Ptr[Byte], SDL_AssertState]
    ): SDL_AssertionHandler = o
    extension (v: SDL_AssertionHandler)
      inline def value
          : CFuncPtr2[Ptr[SDL_AssertData], Ptr[Byte], SDL_AssertState] = v
      inline def toPtr: CVoidPtr = CFuncPtr.toPtr(v)
  end SDL_AssertionHandler

  /** SDL Audio Device instance IDs.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  type SDL_AudioDeviceID = Uint32
  object SDL_AudioDeviceID:
    given _tag: Tag[SDL_AudioDeviceID] = Uint32._tag
    inline def apply(inline o: Uint32): SDL_AudioDeviceID = o
    extension (v: SDL_AudioDeviceID) inline def value: Uint32 = v

  /** A callback that fires when data is about to be fed to an audio device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  opaque type SDL_AudioPostmixCallback =
    CFuncPtr4[Ptr[Byte], Ptr[SDL_AudioSpec], Ptr[Float], CInt, Unit]
  object SDL_AudioPostmixCallback:
    given _tag: Tag[SDL_AudioPostmixCallback] = Tag.materializeCFuncPtr4[Ptr[
      Byte
    ], Ptr[SDL_AudioSpec], Ptr[Float], CInt, Unit]
    inline def fromPtr(ptr: Ptr[Byte] | CVoidPtr): SDL_AudioPostmixCallback =
      CFuncPtr.fromPtr(ptr.asInstanceOf[Ptr[Byte]])
    inline def apply(
        inline o: CFuncPtr4[Ptr[Byte], Ptr[SDL_AudioSpec], Ptr[
          Float
        ], CInt, Unit]
    ): SDL_AudioPostmixCallback = o
    extension (v: SDL_AudioPostmixCallback)
      inline def value
          : CFuncPtr4[Ptr[Byte], Ptr[SDL_AudioSpec], Ptr[Float], CInt, Unit] = v
      inline def toPtr: CVoidPtr = CFuncPtr.toPtr(v)
  end SDL_AudioPostmixCallback

  /** A callback that fires when data passes through an SDL_AudioStream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  opaque type SDL_AudioStreamCallback =
    CFuncPtr4[Ptr[Byte], Ptr[SDL_AudioStream], CInt, CInt, Unit]
  object SDL_AudioStreamCallback:
    given _tag: Tag[SDL_AudioStreamCallback] = Tag
      .materializeCFuncPtr4[Ptr[Byte], Ptr[SDL_AudioStream], CInt, CInt, Unit]
    inline def fromPtr(ptr: Ptr[Byte] | CVoidPtr): SDL_AudioStreamCallback =
      CFuncPtr.fromPtr(ptr.asInstanceOf[Ptr[Byte]])
    inline def apply(
        inline o: CFuncPtr4[Ptr[Byte], Ptr[SDL_AudioStream], CInt, CInt, Unit]
    ): SDL_AudioStreamCallback = o
    extension (v: SDL_AudioStreamCallback)
      inline def value
          : CFuncPtr4[Ptr[Byte], Ptr[SDL_AudioStream], CInt, CInt, Unit] = v
      inline def toPtr: CVoidPtr = CFuncPtr.toPtr(v)
  end SDL_AudioStreamCallback

  /** A set of blend modes used in drawing operations.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_blendmode.h
    */
  type SDL_BlendMode = Uint32
  object SDL_BlendMode:
    given _tag: Tag[SDL_BlendMode] = Uint32._tag
    inline def apply(inline o: Uint32): SDL_BlendMode = o
    extension (v: SDL_BlendMode) inline def value: Uint32 = v

  /** This is a unique ID for a camera device for the time it is connected to
    * the system, and is never reused for the lifetime of the application.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_camera.h
    */
  type SDL_CameraID = Uint32
  object SDL_CameraID:
    given _tag: Tag[SDL_CameraID] = Uint32._tag
    inline def apply(inline o: Uint32): SDL_CameraID = o
    extension (v: SDL_CameraID) inline def value: Uint32 = v

  /** A callback used to free resources when a property is deleted.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_properties.h
    */
  opaque type SDL_CleanupPropertyCallback =
    CFuncPtr2[Ptr[Byte], Ptr[Byte], Unit]
  object SDL_CleanupPropertyCallback:
    given _tag: Tag[SDL_CleanupPropertyCallback] =
      Tag.materializeCFuncPtr2[Ptr[Byte], Ptr[Byte], Unit]
    inline def fromPtr(ptr: Ptr[Byte] | CVoidPtr): SDL_CleanupPropertyCallback =
      CFuncPtr.fromPtr(ptr.asInstanceOf[Ptr[Byte]])
    inline def apply(
        inline o: CFuncPtr2[Ptr[Byte], Ptr[Byte], Unit]
    ): SDL_CleanupPropertyCallback = o
    extension (v: SDL_CleanupPropertyCallback)
      inline def value: CFuncPtr2[Ptr[Byte], Ptr[Byte], Unit] = v
      inline def toPtr: CVoidPtr = CFuncPtr.toPtr(v)
  end SDL_CleanupPropertyCallback

  /** Callback function that will be called when the clipboard is cleared, or
    * new data is set.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_clipboard.h
    */
  opaque type SDL_ClipboardCleanupCallback = CFuncPtr1[Ptr[Byte], Unit]
  object SDL_ClipboardCleanupCallback:
    given _tag: Tag[SDL_ClipboardCleanupCallback] =
      Tag.materializeCFuncPtr1[Ptr[Byte], Unit]
    inline def fromPtr(
        ptr: Ptr[Byte] | CVoidPtr
    ): SDL_ClipboardCleanupCallback =
      CFuncPtr.fromPtr(ptr.asInstanceOf[Ptr[Byte]])
    inline def apply(
        inline o: CFuncPtr1[Ptr[Byte], Unit]
    ): SDL_ClipboardCleanupCallback = o
    extension (v: SDL_ClipboardCleanupCallback)
      inline def value: CFuncPtr1[Ptr[Byte], Unit] = v
      inline def toPtr: CVoidPtr = CFuncPtr.toPtr(v)
  end SDL_ClipboardCleanupCallback

  /** Callback function that will be called when data for the specified
    * mime-type is requested by the OS.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_clipboard.h
    */
  opaque type SDL_ClipboardDataCallback =
    CFuncPtr3[Ptr[Byte], CString, Ptr[size_t], Ptr[Byte]]
  object SDL_ClipboardDataCallback:
    given _tag: Tag[SDL_ClipboardDataCallback] =
      Tag.materializeCFuncPtr3[Ptr[Byte], CString, Ptr[size_t], Ptr[Byte]]
    inline def fromPtr(ptr: Ptr[Byte] | CVoidPtr): SDL_ClipboardDataCallback =
      CFuncPtr.fromPtr(ptr.asInstanceOf[Ptr[Byte]])
    inline def apply(
        inline o: CFuncPtr3[Ptr[Byte], CString, Ptr[size_t], Ptr[Byte]]
    ): SDL_ClipboardDataCallback = o
    extension (v: SDL_ClipboardDataCallback)
      inline def value: CFuncPtr3[Ptr[Byte], CString, Ptr[size_t], Ptr[Byte]] =
        v
      inline def toPtr: CVoidPtr = CFuncPtr.toPtr(v)
  end SDL_ClipboardDataCallback

  /** A callback used with SDL sorting and binary search functions.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  opaque type SDL_CompareCallback = CFuncPtr2[Ptr[Byte], Ptr[Byte], CInt]
  object SDL_CompareCallback:
    given _tag: Tag[SDL_CompareCallback] =
      Tag.materializeCFuncPtr2[Ptr[Byte], Ptr[Byte], CInt]
    inline def fromPtr(ptr: Ptr[Byte] | CVoidPtr): SDL_CompareCallback =
      CFuncPtr.fromPtr(ptr.asInstanceOf[Ptr[Byte]])
    inline def apply(
        inline o: CFuncPtr2[Ptr[Byte], Ptr[Byte], CInt]
    ): SDL_CompareCallback = o
    extension (v: SDL_CompareCallback)
      inline def value: CFuncPtr2[Ptr[Byte], Ptr[Byte], CInt] = v
      inline def toPtr: CVoidPtr = CFuncPtr.toPtr(v)
  end SDL_CompareCallback

  /** A callback used with SDL sorting and binary search functions.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  opaque type SDL_CompareCallback_r =
    CFuncPtr3[Ptr[Byte], Ptr[Byte], Ptr[Byte], CInt]
  object SDL_CompareCallback_r:
    given _tag: Tag[SDL_CompareCallback_r] =
      Tag.materializeCFuncPtr3[Ptr[Byte], Ptr[Byte], Ptr[Byte], CInt]
    inline def fromPtr(ptr: Ptr[Byte] | CVoidPtr): SDL_CompareCallback_r =
      CFuncPtr.fromPtr(ptr.asInstanceOf[Ptr[Byte]])
    inline def apply(
        inline o: CFuncPtr3[Ptr[Byte], Ptr[Byte], Ptr[Byte], CInt]
    ): SDL_CompareCallback_r = o
    extension (v: SDL_CompareCallback_r)
      inline def value: CFuncPtr3[Ptr[Byte], Ptr[Byte], Ptr[Byte], CInt] = v
      inline def toPtr: CVoidPtr = CFuncPtr.toPtr(v)
  end SDL_CompareCallback_r

  /** Callback used by file dialog functions.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_dialog.h
    */
  opaque type SDL_DialogFileCallback =
    CFuncPtr3[Ptr[Byte], Ptr[CString], CInt, Unit]
  object SDL_DialogFileCallback:
    given _tag: Tag[SDL_DialogFileCallback] =
      Tag.materializeCFuncPtr3[Ptr[Byte], Ptr[CString], CInt, Unit]
    inline def fromPtr(ptr: Ptr[Byte] | CVoidPtr): SDL_DialogFileCallback =
      CFuncPtr.fromPtr(ptr.asInstanceOf[Ptr[Byte]])
    inline def apply(
        inline o: CFuncPtr3[Ptr[Byte], Ptr[CString], CInt, Unit]
    ): SDL_DialogFileCallback = o
    extension (v: SDL_DialogFileCallback)
      inline def value: CFuncPtr3[Ptr[Byte], Ptr[CString], CInt, Unit] = v
      inline def toPtr: CVoidPtr = CFuncPtr.toPtr(v)
  end SDL_DialogFileCallback

  /** This is a unique ID for a display for the time it is connected to the
    * system, and is never reused for the lifetime of the application.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  type SDL_DisplayID = Uint32
  object SDL_DisplayID:
    given _tag: Tag[SDL_DisplayID] = Uint32._tag
    inline def apply(inline o: Uint32): SDL_DisplayID = o
    extension (v: SDL_DisplayID) inline def value: Uint32 = v

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  type SDL_EGLAttrib = intptr_t
  object SDL_EGLAttrib:
    given _tag: Tag[SDL_EGLAttrib] = intptr_t._tag
    inline def apply(inline o: intptr_t): SDL_EGLAttrib = o
    extension (v: SDL_EGLAttrib) inline def value: intptr_t = v

  /** EGL platform attribute initialization callback.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  opaque type SDL_EGLAttribArrayCallback =
    CFuncPtr1[Ptr[Byte], Ptr[SDL_EGLAttrib]]
  object SDL_EGLAttribArrayCallback:
    given _tag: Tag[SDL_EGLAttribArrayCallback] =
      Tag.materializeCFuncPtr1[Ptr[Byte], Ptr[SDL_EGLAttrib]]
    inline def fromPtr(ptr: Ptr[Byte] | CVoidPtr): SDL_EGLAttribArrayCallback =
      CFuncPtr.fromPtr(ptr.asInstanceOf[Ptr[Byte]])
    inline def apply(
        inline o: CFuncPtr1[Ptr[Byte], Ptr[SDL_EGLAttrib]]
    ): SDL_EGLAttribArrayCallback = o
    extension (v: SDL_EGLAttribArrayCallback)
      inline def value: CFuncPtr1[Ptr[Byte], Ptr[SDL_EGLAttrib]] = v
      inline def toPtr: CVoidPtr = CFuncPtr.toPtr(v)
  end SDL_EGLAttribArrayCallback

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  opaque type SDL_EGLConfig = Ptr[Byte]
  object SDL_EGLConfig:
    given _tag: Tag[SDL_EGLConfig] = Tag.Ptr(Tag.Byte)
    inline def apply(inline o: Ptr[Byte]): SDL_EGLConfig = o
    extension (v: SDL_EGLConfig) inline def value: Ptr[Byte] = v

  /** Opaque EGL types.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  opaque type SDL_EGLDisplay = Ptr[Byte]
  object SDL_EGLDisplay:
    given _tag: Tag[SDL_EGLDisplay] = Tag.Ptr(Tag.Byte)
    inline def apply(inline o: Ptr[Byte]): SDL_EGLDisplay = o
    extension (v: SDL_EGLDisplay) inline def value: Ptr[Byte] = v

  /** EGL surface/context attribute initialization callback types.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  opaque type SDL_EGLIntArrayCallback =
    CFuncPtr3[Ptr[Byte], SDL_EGLDisplay, SDL_EGLConfig, Ptr[SDL_EGLint]]
  object SDL_EGLIntArrayCallback:
    given _tag: Tag[SDL_EGLIntArrayCallback] = Tag.materializeCFuncPtr3[Ptr[
      Byte
    ], SDL_EGLDisplay, SDL_EGLConfig, Ptr[SDL_EGLint]]
    inline def fromPtr(ptr: Ptr[Byte] | CVoidPtr): SDL_EGLIntArrayCallback =
      CFuncPtr.fromPtr(ptr.asInstanceOf[Ptr[Byte]])
    inline def apply(
        inline o: CFuncPtr3[Ptr[Byte], SDL_EGLDisplay, SDL_EGLConfig, Ptr[
          SDL_EGLint
        ]]
    ): SDL_EGLIntArrayCallback = o
    extension (v: SDL_EGLIntArrayCallback)
      inline def value: CFuncPtr3[Ptr[Byte], SDL_EGLDisplay, SDL_EGLConfig, Ptr[
        SDL_EGLint
      ]] = v
      inline def toPtr: CVoidPtr = CFuncPtr.toPtr(v)
    end extension
  end SDL_EGLIntArrayCallback

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  opaque type SDL_EGLSurface = Ptr[Byte]
  object SDL_EGLSurface:
    given _tag: Tag[SDL_EGLSurface] = Tag.Ptr(Tag.Byte)
    inline def apply(inline o: Ptr[Byte]): SDL_EGLSurface = o
    extension (v: SDL_EGLSurface) inline def value: Ptr[Byte] = v

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  opaque type SDL_EGLint = CInt
  object SDL_EGLint:
    given _tag: Tag[SDL_EGLint] = Tag.Int
    inline def apply(inline o: CInt): SDL_EGLint = o
    extension (v: SDL_EGLint) inline def value: CInt = v

  /** Callback for directory enumeration.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_filesystem.h
    */
  opaque type SDL_EnumerateDirectoryCallback =
    CFuncPtr3[Ptr[Byte], CString, CString, SDL_EnumerationResult]
  object SDL_EnumerateDirectoryCallback:
    given _tag: Tag[SDL_EnumerateDirectoryCallback] = Tag
      .materializeCFuncPtr3[Ptr[Byte], CString, CString, SDL_EnumerationResult]
    inline def fromPtr(
        ptr: Ptr[Byte] | CVoidPtr
    ): SDL_EnumerateDirectoryCallback =
      CFuncPtr.fromPtr(ptr.asInstanceOf[Ptr[Byte]])
    inline def apply(
        inline o: CFuncPtr3[Ptr[Byte], CString, CString, SDL_EnumerationResult]
    ): SDL_EnumerateDirectoryCallback = o
    extension (v: SDL_EnumerateDirectoryCallback)
      inline def value
          : CFuncPtr3[Ptr[Byte], CString, CString, SDL_EnumerationResult] = v
      inline def toPtr: CVoidPtr = CFuncPtr.toPtr(v)
  end SDL_EnumerateDirectoryCallback

  /** A callback used to enumerate all the properties in a group of properties.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_properties.h
    */
  opaque type SDL_EnumeratePropertiesCallback =
    CFuncPtr3[Ptr[Byte], SDL_PropertiesID, CString, Unit]
  object SDL_EnumeratePropertiesCallback:
    given _tag: Tag[SDL_EnumeratePropertiesCallback] =
      Tag.materializeCFuncPtr3[Ptr[Byte], SDL_PropertiesID, CString, Unit]
    inline def fromPtr(
        ptr: Ptr[Byte] | CVoidPtr
    ): SDL_EnumeratePropertiesCallback =
      CFuncPtr.fromPtr(ptr.asInstanceOf[Ptr[Byte]])
    inline def apply(
        inline o: CFuncPtr3[Ptr[Byte], SDL_PropertiesID, CString, Unit]
    ): SDL_EnumeratePropertiesCallback = o
    extension (v: SDL_EnumeratePropertiesCallback)
      inline def value: CFuncPtr3[Ptr[Byte], SDL_PropertiesID, CString, Unit] =
        v
      inline def toPtr: CVoidPtr = CFuncPtr.toPtr(v)
  end SDL_EnumeratePropertiesCallback

  /** A function pointer used for callbacks that watch the event queue.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  opaque type SDL_EventFilter = CFuncPtr2[Ptr[Byte], Ptr[SDL_Event], Boolean]
  object SDL_EventFilter:
    given _tag: Tag[SDL_EventFilter] =
      Tag.materializeCFuncPtr2[Ptr[Byte], Ptr[SDL_Event], Boolean]
    inline def fromPtr(ptr: Ptr[Byte] | CVoidPtr): SDL_EventFilter =
      CFuncPtr.fromPtr(ptr.asInstanceOf[Ptr[Byte]])
    inline def apply(
        inline o: CFuncPtr2[Ptr[Byte], Ptr[SDL_Event], Boolean]
    ): SDL_EventFilter = o
    extension (v: SDL_EventFilter)
      inline def value: CFuncPtr2[Ptr[Byte], Ptr[SDL_Event], Boolean] = v
      inline def toPtr: CVoidPtr = CFuncPtr.toPtr(v)
  end SDL_EventFilter

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_touch.h
    */
  type SDL_FingerID = Uint64
  object SDL_FingerID:
    given _tag: Tag[SDL_FingerID] = Uint64._tag
    inline def apply(inline o: Uint64): SDL_FingerID = o
    extension (v: SDL_FingerID) inline def value: Uint64 = v

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  opaque type SDL_FunctionPointer = CFuncPtr0[Unit]
  object SDL_FunctionPointer:
    given _tag: Tag[SDL_FunctionPointer] = Tag.materializeCFuncPtr0[Unit]
    inline def fromPtr(ptr: Ptr[Byte] | CVoidPtr): SDL_FunctionPointer =
      CFuncPtr.fromPtr(ptr.asInstanceOf[Ptr[Byte]])
    inline def apply(inline o: CFuncPtr0[Unit]): SDL_FunctionPointer = o
    extension (v: SDL_FunctionPointer)
      inline def value: CFuncPtr0[Unit] = v
      inline def toPtr: CVoidPtr = CFuncPtr.toPtr(v)
  end SDL_FunctionPointer

  /** An opaque handle to an OpenGL context.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  opaque type SDL_GLContext = Ptr[SDL_GLContextState]
  object SDL_GLContext:
    given _tag: Tag[SDL_GLContext] =
      Tag.Ptr[SDL_GLContextState](SDL_GLContextState._tag)
    inline def apply(inline o: Ptr[SDL_GLContextState]): SDL_GLContext = o
    extension (v: SDL_GLContext) inline def value: Ptr[SDL_GLContextState] = v
  end SDL_GLContext

  /** Possible flags to be set for the SDL_GL_CONTEXT_FLAGS attribute.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  type SDL_GLContextFlag = Uint32
  object SDL_GLContextFlag:
    given _tag: Tag[SDL_GLContextFlag] = Uint32._tag
    inline def apply(inline o: Uint32): SDL_GLContextFlag = o
    extension (v: SDL_GLContextFlag) inline def value: Uint32 = v

  /** Possible values to be set for the SDL_GL_CONTEXT_RELEASE_BEHAVIOR
    * attribute.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  type SDL_GLContextReleaseFlag = Uint32
  object SDL_GLContextReleaseFlag:
    given _tag: Tag[SDL_GLContextReleaseFlag] = Uint32._tag
    inline def apply(inline o: Uint32): SDL_GLContextReleaseFlag = o
    extension (v: SDL_GLContextReleaseFlag) inline def value: Uint32 = v

  /** Possible values to be set SDL_GL_CONTEXT_RESET_NOTIFICATION attribute.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  type SDL_GLContextResetNotification = Uint32
  object SDL_GLContextResetNotification:
    given _tag: Tag[SDL_GLContextResetNotification] = Uint32._tag
    inline def apply(inline o: Uint32): SDL_GLContextResetNotification = o
    extension (v: SDL_GLContextResetNotification) inline def value: Uint32 = v

  /** Possible values to be set for the SDL_GL_CONTEXT_PROFILE_MASK attribute.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  type SDL_GLProfile = Uint32
  object SDL_GLProfile:
    given _tag: Tag[SDL_GLProfile] = Uint32._tag
    inline def apply(inline o: Uint32): SDL_GLProfile = o
    extension (v: SDL_GLProfile) inline def value: Uint32 = v

  /** Specifies how a buffer is intended to be used by the client.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  type SDL_GPUBufferUsageFlags = Uint32
  object SDL_GPUBufferUsageFlags:
    given _tag: Tag[SDL_GPUBufferUsageFlags] = Uint32._tag
    inline def apply(inline o: Uint32): SDL_GPUBufferUsageFlags = o
    extension (v: SDL_GPUBufferUsageFlags) inline def value: Uint32 = v

  /** Specifies which color components are written in a graphics pipeline.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  type SDL_GPUColorComponentFlags = Uint8
  object SDL_GPUColorComponentFlags:
    given _tag: Tag[SDL_GPUColorComponentFlags] = Uint8._tag
    inline def apply(inline o: Uint8): SDL_GPUColorComponentFlags = o
    extension (v: SDL_GPUColorComponentFlags) inline def value: Uint8 = v

  /** Specifies the format of shader code.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  type SDL_GPUShaderFormat = Uint32
  object SDL_GPUShaderFormat:
    given _tag: Tag[SDL_GPUShaderFormat] = Uint32._tag
    inline def apply(inline o: Uint32): SDL_GPUShaderFormat = o
    extension (v: SDL_GPUShaderFormat) inline def value: Uint32 = v

  /** Specifies how a texture is intended to be used by the client.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  type SDL_GPUTextureUsageFlags = Uint32
  object SDL_GPUTextureUsageFlags:
    given _tag: Tag[SDL_GPUTextureUsageFlags] = Uint32._tag
    inline def apply(inline o: Uint32): SDL_GPUTextureUsageFlags = o
    extension (v: SDL_GPUTextureUsageFlags) inline def value: Uint32 = v

  /** Flags for path matching
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_filesystem.h
    */
  type SDL_GlobFlags = Uint32
  object SDL_GlobFlags:
    given _tag: Tag[SDL_GlobFlags] = Uint32._tag
    inline def apply(inline o: Uint32): SDL_GlobFlags = o
    extension (v: SDL_GlobFlags) inline def value: Uint32 = v

  /** This is a unique ID for a haptic device for the time it is connected to
    * the system, and is never reused for the lifetime of the application.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  type SDL_HapticID = Uint32
  object SDL_HapticID:
    given _tag: Tag[SDL_HapticID] = Uint32._tag
    inline def apply(inline o: Uint32): SDL_HapticID = o
    extension (v: SDL_HapticID) inline def value: Uint32 = v

  /** A callback used to send notifications of hint value changes.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_hints.h
    */
  opaque type SDL_HintCallback =
    CFuncPtr4[Ptr[Byte], CString, CString, CString, Unit]
  object SDL_HintCallback:
    given _tag: Tag[SDL_HintCallback] =
      Tag.materializeCFuncPtr4[Ptr[Byte], CString, CString, CString, Unit]
    inline def fromPtr(ptr: Ptr[Byte] | CVoidPtr): SDL_HintCallback =
      CFuncPtr.fromPtr(ptr.asInstanceOf[Ptr[Byte]])
    inline def apply(
        inline o: CFuncPtr4[Ptr[Byte], CString, CString, CString, Unit]
    ): SDL_HintCallback = o
    extension (v: SDL_HintCallback)
      inline def value: CFuncPtr4[Ptr[Byte], CString, CString, CString, Unit] =
        v
      inline def toPtr: CVoidPtr = CFuncPtr.toPtr(v)
  end SDL_HintCallback

  /** Callback used for hit-testing.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  opaque type SDL_HitTest =
    CFuncPtr3[Ptr[SDL_Window], Ptr[SDL_Point], Ptr[Byte], SDL_HitTestResult]
  object SDL_HitTest:
    given _tag: Tag[SDL_HitTest] = Tag.materializeCFuncPtr3[Ptr[
      SDL_Window
    ], Ptr[SDL_Point], Ptr[Byte], SDL_HitTestResult]
    inline def fromPtr(ptr: Ptr[Byte] | CVoidPtr): SDL_HitTest =
      CFuncPtr.fromPtr(ptr.asInstanceOf[Ptr[Byte]])
    inline def apply(
        inline o: CFuncPtr3[Ptr[SDL_Window], Ptr[SDL_Point], Ptr[
          Byte
        ], SDL_HitTestResult]
    ): SDL_HitTest = o
    extension (v: SDL_HitTest)
      inline def value: CFuncPtr3[Ptr[SDL_Window], Ptr[SDL_Point], Ptr[
        Byte
      ], SDL_HitTestResult] = v
      inline def toPtr: CVoidPtr = CFuncPtr.toPtr(v)
    end extension
  end SDL_HitTest

  /** Initialization flags for SDL_Init and/or SDL_InitSubSystem
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_init.h
    */
  type SDL_InitFlags = Uint32
  object SDL_InitFlags:
    given _tag: Tag[SDL_InitFlags] = Uint32._tag
    inline def apply(inline o: Uint32): SDL_InitFlags = o
    extension (v: SDL_InitFlags) inline def value: Uint32 = v

  /** This is a unique ID for a joystick for the time it is connected to the
    * system, and is never reused for the lifetime of the application.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  type SDL_JoystickID = Uint32
  object SDL_JoystickID:
    given _tag: Tag[SDL_JoystickID] = Uint32._tag
    inline def apply(inline o: Uint32): SDL_JoystickID = o
    extension (v: SDL_JoystickID) inline def value: Uint32 = v

  /** This is a unique ID for a keyboard for the time it is connected to the
    * system, and is never reused for the lifetime of the application.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_keyboard.h
    */
  type SDL_KeyboardID = Uint32
  object SDL_KeyboardID:
    given _tag: Tag[SDL_KeyboardID] = Uint32._tag
    inline def apply(inline o: Uint32): SDL_KeyboardID = o
    extension (v: SDL_KeyboardID) inline def value: Uint32 = v

  /** The SDL virtual key representation.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_keycode.h
    */
  type SDL_Keycode = Uint32
  object SDL_Keycode:
    given _tag: Tag[SDL_Keycode] = Uint32._tag
    inline def apply(inline o: Uint32): SDL_Keycode = o
    extension (v: SDL_Keycode) inline def value: Uint32 = v

  /** Valid key modifiers (possibly OR'd together).
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_keycode.h
    */
  type SDL_Keymod = Uint16
  object SDL_Keymod:
    given _tag: Tag[SDL_Keymod] = Uint16._tag
    inline def apply(inline o: Uint16): SDL_Keymod = o
    extension (v: SDL_Keymod) inline def value: Uint16 = v

  /** The prototype for the log output callback function.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_log.h
    */
  opaque type SDL_LogOutputFunction =
    CFuncPtr4[Ptr[Byte], CInt, SDL_LogPriority, CString, Unit]
  object SDL_LogOutputFunction:
    given _tag: Tag[SDL_LogOutputFunction] =
      Tag.materializeCFuncPtr4[Ptr[Byte], CInt, SDL_LogPriority, CString, Unit]
    inline def fromPtr(ptr: Ptr[Byte] | CVoidPtr): SDL_LogOutputFunction =
      CFuncPtr.fromPtr(ptr.asInstanceOf[Ptr[Byte]])
    inline def apply(
        inline o: CFuncPtr4[Ptr[Byte], CInt, SDL_LogPriority, CString, Unit]
    ): SDL_LogOutputFunction = o
    extension (v: SDL_LogOutputFunction)
      inline def value
          : CFuncPtr4[Ptr[Byte], CInt, SDL_LogPriority, CString, Unit] = v
      inline def toPtr: CVoidPtr = CFuncPtr.toPtr(v)
  end SDL_LogOutputFunction

  /** SDL_MessageBoxButtonData flags.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_messagebox.h
    */
  type SDL_MessageBoxButtonFlags = Uint32
  object SDL_MessageBoxButtonFlags:
    given _tag: Tag[SDL_MessageBoxButtonFlags] = Uint32._tag
    inline def apply(inline o: Uint32): SDL_MessageBoxButtonFlags = o
    extension (v: SDL_MessageBoxButtonFlags) inline def value: Uint32 = v

  /** SDL_MessageBox flags.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_messagebox.h
    */
  type SDL_MessageBoxFlags = Uint32
  object SDL_MessageBoxFlags:
    given _tag: Tag[SDL_MessageBoxFlags] = Uint32._tag
    inline def apply(inline o: Uint32): SDL_MessageBoxFlags = o
    extension (v: SDL_MessageBoxFlags) inline def value: Uint32 = v

  /** A handle to a CAMetalLayer-backed NSView (macOS) or UIView (iOS/tvOS).
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_metal.h
    */
  opaque type SDL_MetalView = Ptr[Byte]
  object SDL_MetalView:
    given _tag: Tag[SDL_MetalView] = Tag.Ptr(Tag.Byte)
    inline def apply(inline o: Ptr[Byte]): SDL_MetalView = o
    extension (v: SDL_MetalView) inline def value: Ptr[Byte] = v

  /** A bitmask of pressed mouse buttons, as reported by SDL_GetMouseState, etc.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mouse.h
    */
  type SDL_MouseButtonFlags = Uint32
  object SDL_MouseButtonFlags:
    given _tag: Tag[SDL_MouseButtonFlags] = Uint32._tag
    inline def apply(inline o: Uint32): SDL_MouseButtonFlags = o
    extension (v: SDL_MouseButtonFlags) inline def value: Uint32 = v

  /** This is a unique ID for a mouse for the time it is connected to the
    * system, and is never reused for the lifetime of the application.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mouse.h
    */
  type SDL_MouseID = Uint32
  object SDL_MouseID:
    given _tag: Tag[SDL_MouseID] = Uint32._tag
    inline def apply(inline o: Uint32): SDL_MouseID = o
    extension (v: SDL_MouseID) inline def value: Uint32 = v

  /** Function prototype for the nanosecond timer callback function.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_timer.h
    */
  opaque type SDL_NSTimerCallback =
    CFuncPtr3[Ptr[Byte], SDL_TimerID, Uint64, Uint64]
  object SDL_NSTimerCallback:
    given _tag: Tag[SDL_NSTimerCallback] =
      Tag.materializeCFuncPtr3[Ptr[Byte], SDL_TimerID, Uint64, Uint64]
    inline def fromPtr(ptr: Ptr[Byte] | CVoidPtr): SDL_NSTimerCallback =
      CFuncPtr.fromPtr(ptr.asInstanceOf[Ptr[Byte]])
    inline def apply(
        inline o: CFuncPtr3[Ptr[Byte], SDL_TimerID, Uint64, Uint64]
    ): SDL_NSTimerCallback = o
    extension (v: SDL_NSTimerCallback)
      inline def value: CFuncPtr3[Ptr[Byte], SDL_TimerID, Uint64, Uint64] = v
      inline def toPtr: CVoidPtr = CFuncPtr.toPtr(v)
  end SDL_NSTimerCallback

  /** SDL pen instance IDs.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_pen.h
    */
  type SDL_PenID = Uint32
  object SDL_PenID:
    given _tag: Tag[SDL_PenID] = Uint32._tag
    inline def apply(inline o: Uint32): SDL_PenID = o
    extension (v: SDL_PenID) inline def value: Uint32 = v

  /** Pen input flags, as reported by various pen events' `pen_state` field.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_pen.h
    */
  type SDL_PenInputFlags = Uint32
  object SDL_PenInputFlags:
    given _tag: Tag[SDL_PenInputFlags] = Uint32._tag
    inline def apply(inline o: Uint32): SDL_PenInputFlags = o
    extension (v: SDL_PenInputFlags) inline def value: Uint32 = v

  /** SDL properties ID
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_properties.h
    */
  type SDL_PropertiesID = Uint32
  object SDL_PropertiesID:
    given _tag: Tag[SDL_PropertiesID] = Uint32._tag
    inline def apply(inline o: Uint32): SDL_PropertiesID = o
    extension (v: SDL_PropertiesID) inline def value: Uint32 = v

  /** This is a unique ID for a sensor for the time it is connected to the
    * system, and is never reused for the lifetime of the application.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_sensor.h
    */
  type SDL_SensorID = Uint32
  object SDL_SensorID:
    given _tag: Tag[SDL_SensorID] = Uint32._tag
    inline def apply(inline o: Uint32): SDL_SensorID = o
    extension (v: SDL_SensorID) inline def value: Uint32 = v

  /** An atomic spinlock.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_atomic.h
    */
  opaque type SDL_SpinLock = CInt
  object SDL_SpinLock:
    given _tag: Tag[SDL_SpinLock] = Tag.Int
    inline def apply(inline o: CInt): SDL_SpinLock = o
    extension (v: SDL_SpinLock) inline def value: CInt = v

  /** The flags on an SDL_Surface.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  type SDL_SurfaceFlags = Uint32
  object SDL_SurfaceFlags:
    given _tag: Tag[SDL_SurfaceFlags] = Uint32._tag
    inline def apply(inline o: Uint32): SDL_SurfaceFlags = o
    extension (v: SDL_SurfaceFlags) inline def value: Uint32 = v

  /** The callback used to cleanup data passed to SDL_SetTLS.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_thread.h
    */
  opaque type SDL_TLSDestructorCallback = CFuncPtr1[Ptr[Byte], Unit]
  object SDL_TLSDestructorCallback:
    given _tag: Tag[SDL_TLSDestructorCallback] =
      Tag.materializeCFuncPtr1[Ptr[Byte], Unit]
    inline def fromPtr(ptr: Ptr[Byte] | CVoidPtr): SDL_TLSDestructorCallback =
      CFuncPtr.fromPtr(ptr.asInstanceOf[Ptr[Byte]])
    inline def apply(
        inline o: CFuncPtr1[Ptr[Byte], Unit]
    ): SDL_TLSDestructorCallback = o
    extension (v: SDL_TLSDestructorCallback)
      inline def value: CFuncPtr1[Ptr[Byte], Unit] = v
      inline def toPtr: CVoidPtr = CFuncPtr.toPtr(v)
  end SDL_TLSDestructorCallback

  /** Thread local storage ID.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_thread.h
    */
  type SDL_TLSID = SDL_AtomicInt
  object SDL_TLSID:
    given _tag: Tag[SDL_TLSID] = SDL_AtomicInt._tag
    inline def apply(inline o: SDL_AtomicInt): SDL_TLSID = o
    extension (v: SDL_TLSID) inline def value: SDL_AtomicInt = v

  /** The function passed to SDL_CreateThread() as the new thread's entry point.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_thread.h
    */
  opaque type SDL_ThreadFunction = CFuncPtr1[Ptr[Byte], CInt]
  object SDL_ThreadFunction:
    given _tag: Tag[SDL_ThreadFunction] =
      Tag.materializeCFuncPtr1[Ptr[Byte], CInt]
    inline def fromPtr(ptr: Ptr[Byte] | CVoidPtr): SDL_ThreadFunction =
      CFuncPtr.fromPtr(ptr.asInstanceOf[Ptr[Byte]])
    inline def apply(inline o: CFuncPtr1[Ptr[Byte], CInt]): SDL_ThreadFunction =
      o
    extension (v: SDL_ThreadFunction)
      inline def value: CFuncPtr1[Ptr[Byte], CInt] = v
      inline def toPtr: CVoidPtr = CFuncPtr.toPtr(v)
  end SDL_ThreadFunction

  /** A unique numeric ID that identifies a thread.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_thread.h
    */
  type SDL_ThreadID = Uint64
  object SDL_ThreadID:
    given _tag: Tag[SDL_ThreadID] = Uint64._tag
    inline def apply(inline o: Uint64): SDL_ThreadID = o
    extension (v: SDL_ThreadID) inline def value: Uint64 = v

  /** SDL times are signed, 64-bit integers representing nanoseconds since the
    * Unix epoch (Jan 1, 1970).
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  type SDL_Time = Sint64
  object SDL_Time:
    given _tag: Tag[SDL_Time] = Sint64._tag
    inline def apply(inline o: Sint64): SDL_Time = o
    extension (v: SDL_Time) inline def value: Sint64 = v

  /** Function prototype for the millisecond timer callback function.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_timer.h
    */
  opaque type SDL_TimerCallback =
    CFuncPtr3[Ptr[Byte], SDL_TimerID, Uint32, Uint32]
  object SDL_TimerCallback:
    given _tag: Tag[SDL_TimerCallback] =
      Tag.materializeCFuncPtr3[Ptr[Byte], SDL_TimerID, Uint32, Uint32]
    inline def fromPtr(ptr: Ptr[Byte] | CVoidPtr): SDL_TimerCallback =
      CFuncPtr.fromPtr(ptr.asInstanceOf[Ptr[Byte]])
    inline def apply(
        inline o: CFuncPtr3[Ptr[Byte], SDL_TimerID, Uint32, Uint32]
    ): SDL_TimerCallback = o
    extension (v: SDL_TimerCallback)
      inline def value: CFuncPtr3[Ptr[Byte], SDL_TimerID, Uint32, Uint32] = v
      inline def toPtr: CVoidPtr = CFuncPtr.toPtr(v)
  end SDL_TimerCallback

  /** Definition of the timer ID type.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_timer.h
    */
  type SDL_TimerID = Uint32
  object SDL_TimerID:
    given _tag: Tag[SDL_TimerID] = Uint32._tag
    inline def apply(inline o: Uint32): SDL_TimerID = o
    extension (v: SDL_TimerID) inline def value: Uint32 = v

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_touch.h
    */
  type SDL_TouchID = Uint64
  object SDL_TouchID:
    given _tag: Tag[SDL_TouchID] = Uint64._tag
    inline def apply(inline o: Uint64): SDL_TouchID = o
    extension (v: SDL_TouchID) inline def value: Uint64 = v

  /** The flags on a window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  type SDL_WindowFlags = Uint64
  object SDL_WindowFlags:
    given _tag: Tag[SDL_WindowFlags] = Uint64._tag
    inline def apply(inline o: Uint64): SDL_WindowFlags = o
    extension (v: SDL_WindowFlags) inline def value: Uint64 = v

  /** This is a unique ID for a window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  type SDL_WindowID = Uint32
  object SDL_WindowID:
    given _tag: Tag[SDL_WindowID] = Uint32._tag
    inline def apply(inline o: Uint32): SDL_WindowID = o
    extension (v: SDL_WindowID) inline def value: Uint32 = v

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_system.h
    */
  opaque type SDL_X11EventHook = CFuncPtr2[Ptr[Byte], Ptr[XEvent], Boolean]
  object SDL_X11EventHook:
    given _tag: Tag[SDL_X11EventHook] =
      Tag.materializeCFuncPtr2[Ptr[Byte], Ptr[XEvent], Boolean]
    inline def fromPtr(ptr: Ptr[Byte] | CVoidPtr): SDL_X11EventHook =
      CFuncPtr.fromPtr(ptr.asInstanceOf[Ptr[Byte]])
    inline def apply(
        inline o: CFuncPtr2[Ptr[Byte], Ptr[XEvent], Boolean]
    ): SDL_X11EventHook = o
    extension (v: SDL_X11EventHook)
      inline def value: CFuncPtr2[Ptr[Byte], Ptr[XEvent], Boolean] = v
      inline def toPtr: CVoidPtr = CFuncPtr.toPtr(v)
  end SDL_X11EventHook

  /** A callback used to implement SDL_calloc().
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  opaque type SDL_calloc_func = CFuncPtr2[size_t, size_t, Ptr[Byte]]
  object SDL_calloc_func:
    given _tag: Tag[SDL_calloc_func] =
      Tag.materializeCFuncPtr2[size_t, size_t, Ptr[Byte]]
    inline def fromPtr(ptr: Ptr[Byte] | CVoidPtr): SDL_calloc_func =
      CFuncPtr.fromPtr(ptr.asInstanceOf[Ptr[Byte]])
    inline def apply(
        inline o: CFuncPtr2[size_t, size_t, Ptr[Byte]]
    ): SDL_calloc_func = o
    extension (v: SDL_calloc_func)
      inline def value: CFuncPtr2[size_t, size_t, Ptr[Byte]] = v
      inline def toPtr: CVoidPtr = CFuncPtr.toPtr(v)
  end SDL_calloc_func

  /** A callback used to implement SDL_free().
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  opaque type SDL_free_func = CFuncPtr1[Ptr[Byte], Unit]
  object SDL_free_func:
    given _tag: Tag[SDL_free_func] = Tag.materializeCFuncPtr1[Ptr[Byte], Unit]
    inline def fromPtr(ptr: Ptr[Byte] | CVoidPtr): SDL_free_func =
      CFuncPtr.fromPtr(ptr.asInstanceOf[Ptr[Byte]])
    inline def apply(inline o: CFuncPtr1[Ptr[Byte], Unit]): SDL_free_func = o
    extension (v: SDL_free_func)
      inline def value: CFuncPtr1[Ptr[Byte], Unit] = v
      inline def toPtr: CVoidPtr = CFuncPtr.toPtr(v)
  end SDL_free_func

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  opaque type SDL_iconv_t = Ptr[SDL_iconv_data_t]
  object SDL_iconv_t:
    given _tag: Tag[SDL_iconv_t] =
      Tag.Ptr[SDL_iconv_data_t](SDL_iconv_data_t._tag)
    inline def apply(inline o: Ptr[SDL_iconv_data_t]): SDL_iconv_t = o
    extension (v: SDL_iconv_t) inline def value: Ptr[SDL_iconv_data_t] = v
  end SDL_iconv_t

  /** A callback used to implement SDL_malloc().
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  opaque type SDL_malloc_func = CFuncPtr1[size_t, Ptr[Byte]]
  object SDL_malloc_func:
    given _tag: Tag[SDL_malloc_func] =
      Tag.materializeCFuncPtr1[size_t, Ptr[Byte]]
    inline def fromPtr(ptr: Ptr[Byte] | CVoidPtr): SDL_malloc_func =
      CFuncPtr.fromPtr(ptr.asInstanceOf[Ptr[Byte]])
    inline def apply(inline o: CFuncPtr1[size_t, Ptr[Byte]]): SDL_malloc_func =
      o
    extension (v: SDL_malloc_func)
      inline def value: CFuncPtr1[size_t, Ptr[Byte]] = v
      inline def toPtr: CVoidPtr = CFuncPtr.toPtr(v)
  end SDL_malloc_func

  /** A callback used to implement SDL_realloc().
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  opaque type SDL_realloc_func = CFuncPtr2[Ptr[Byte], size_t, Ptr[Byte]]
  object SDL_realloc_func:
    given _tag: Tag[SDL_realloc_func] =
      Tag.materializeCFuncPtr2[Ptr[Byte], size_t, Ptr[Byte]]
    inline def fromPtr(ptr: Ptr[Byte] | CVoidPtr): SDL_realloc_func =
      CFuncPtr.fromPtr(ptr.asInstanceOf[Ptr[Byte]])
    inline def apply(
        inline o: CFuncPtr2[Ptr[Byte], size_t, Ptr[Byte]]
    ): SDL_realloc_func = o
    extension (v: SDL_realloc_func)
      inline def value: CFuncPtr2[Ptr[Byte], size_t, Ptr[Byte]] = v
      inline def toPtr: CVoidPtr = CFuncPtr.toPtr(v)
  end SDL_realloc_func

  /** A signed 16-bit integer type.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  type Sint16 = int16_t
  object Sint16:
    given _tag: Tag[Sint16] = int16_t._tag
    inline def apply(inline o: int16_t): Sint16 = o
    extension (v: Sint16) inline def value: int16_t = v

  /** A signed 32-bit integer type.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  type Sint32 = int32_t
  object Sint32:
    given _tag: Tag[Sint32] = int32_t._tag
    inline def apply(inline o: int32_t): Sint32 = o
    extension (v: Sint32) inline def value: int32_t = v

  /** A signed 64-bit integer type.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  type Sint64 = int64_t
  object Sint64:
    given _tag: Tag[Sint64] = int64_t._tag
    inline def apply(inline o: int64_t): Sint64 = o
    extension (v: Sint64) inline def value: int64_t = v

  /** A signed 8-bit integer type.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  type Sint8 = int8_t
  object Sint8:
    given _tag: Tag[Sint8] = int8_t._tag
    inline def apply(inline o: int8_t): Sint8 = o
    extension (v: Sint8) inline def value: int8_t = v

  /** An unsigned 16-bit integer type.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  type Uint16 = uint16_t
  object Uint16:
    given _tag: Tag[Uint16] = uint16_t._tag
    inline def apply(inline o: uint16_t): Uint16 = o
    extension (v: Uint16) inline def value: uint16_t = v

  /** An unsigned 32-bit integer type.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  type Uint32 = uint32_t
  object Uint32:
    given _tag: Tag[Uint32] = uint32_t._tag
    inline def apply(inline o: uint32_t): Uint32 = o
    extension (v: Uint32) inline def value: uint32_t = v

  /** An unsigned 64-bit integer type.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  type Uint64 = uint64_t
  object Uint64:
    given _tag: Tag[Uint64] = uint64_t._tag
    inline def apply(inline o: uint64_t): Uint64 = o
    extension (v: Uint64) inline def value: uint64_t = v

  /** An unsigned 8-bit integer type.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  type Uint8 = uint8_t
  object Uint8:
    given _tag: Tag[Uint8] = uint8_t._tag
    inline def apply(inline o: uint8_t): Uint8 = o
    extension (v: Uint8) inline def value: uint8_t = v

  /** [bindgen] header:
    * /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/arm/_types.h
    */
  opaque type __darwin_intptr_t = CLongInt
  object __darwin_intptr_t:
    given _tag: Tag[__darwin_intptr_t] = Tag.Size
    inline def apply(inline o: CLongInt): __darwin_intptr_t = o
    extension (v: __darwin_intptr_t) inline def value: CLongInt = v

  type int16_t = scala.Short
  object int16_t:
    val _tag: Tag[int16_t] = summon[Tag[scala.Short]]
    inline def apply(inline o: scala.Short): int16_t = o
    extension (v: int16_t) inline def value: scala.Short = v

  type int32_t = scala.scalanative.unsafe.CInt
  object int32_t:
    val _tag: Tag[int32_t] = summon[Tag[scala.scalanative.unsafe.CInt]]
    inline def apply(inline o: scala.scalanative.unsafe.CInt): int32_t = o
    extension (v: int32_t) inline def value: scala.scalanative.unsafe.CInt = v

  type int64_t = scala.Long
  object int64_t:
    val _tag: Tag[int64_t] = summon[Tag[scala.Long]]
    inline def apply(inline o: scala.Long): int64_t = o
    extension (v: int64_t) inline def value: scala.Long = v

  type int8_t = scala.scalanative.unsafe.CChar
  object int8_t:
    val _tag: Tag[int8_t] = summon[Tag[scala.scalanative.unsafe.CChar]]
    inline def apply(inline o: scala.scalanative.unsafe.CChar): int8_t = o
    extension (v: int8_t) inline def value: scala.scalanative.unsafe.CChar = v

  /** [bindgen] header:
    * /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_intptr_t.h
    */
  type intptr_t = __darwin_intptr_t
  object intptr_t:
    given _tag: Tag[intptr_t] = __darwin_intptr_t._tag
    inline def apply(inline o: __darwin_intptr_t): intptr_t = o
    extension (v: intptr_t) inline def value: __darwin_intptr_t = v

  type size_t = libc.stddef.size_t
  object size_t:
    val _tag: Tag[size_t] = summon[Tag[libc.stddef.size_t]]
    inline def apply(inline o: libc.stddef.size_t): size_t = o
    extension (v: size_t) inline def value: libc.stddef.size_t = v

  type uint16_t = scala.scalanative.unsigned.UShort
  object uint16_t:
    val _tag: Tag[uint16_t] = summon[Tag[scala.scalanative.unsigned.UShort]]
    inline def apply(inline o: scala.scalanative.unsigned.UShort): uint16_t = o
    extension (v: uint16_t)
      inline def value: scala.scalanative.unsigned.UShort = v
  end uint16_t

  type uint32_t = scala.scalanative.unsigned.UInt
  object uint32_t:
    val _tag: Tag[uint32_t] = summon[Tag[scala.scalanative.unsigned.UInt]]
    inline def apply(inline o: scala.scalanative.unsigned.UInt): uint32_t = o
    extension (v: uint32_t)
      inline def value: scala.scalanative.unsigned.UInt = v
  end uint32_t

  type uint64_t = scala.scalanative.unsigned.ULong
  object uint64_t:
    val _tag: Tag[uint64_t] = summon[Tag[scala.scalanative.unsigned.ULong]]
    inline def apply(inline o: scala.scalanative.unsigned.ULong): uint64_t = o
    extension (v: uint64_t)
      inline def value: scala.scalanative.unsigned.ULong = v
  end uint64_t

  type uint8_t = scala.scalanative.unsigned.UByte
  object uint8_t:
    val _tag: Tag[uint8_t] = summon[Tag[scala.scalanative.unsigned.UByte]]
    inline def apply(inline o: scala.scalanative.unsigned.UByte): uint8_t = o
    extension (v: uint8_t)
      inline def value: scala.scalanative.unsigned.UByte = v
  end uint8_t

  type va_list = unsafe.CVarArgList
  object va_list:
    val _tag: Tag[va_list] = summon[Tag[unsafe.CVarArgList]]
    inline def apply(inline o: unsafe.CVarArgList): va_list = o
    extension (v: va_list) inline def value: unsafe.CVarArgList = v

  type wchar_t = libc.stddef.wchar_t
  object wchar_t:
    val _tag: Tag[wchar_t] = summon[Tag[libc.stddef.wchar_t]]
    inline def apply(inline o: libc.stddef.wchar_t): wchar_t = o
    extension (v: wchar_t) inline def value: libc.stddef.wchar_t = v
end aliases

object structs:
  import _root_.sdl3.enumerations.*
  import _root_.sdl3.predef.*
  import _root_.sdl3.aliases.*
  import _root_.sdl3.structs.*
  import _root_.sdl3.unions.*

  /** Information about an assertion failure.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_assert.h
    */
  opaque type SDL_AssertData =
    CStruct7[Boolean, CUnsignedInt, CString, CString, CInt, CString, Ptr[Byte]]
  object SDL_AssertData:
    given _tag: Tag[SDL_AssertData] = Tag.materializeCStruct7Tag[
      Boolean,
      CUnsignedInt,
      CString,
      CString,
      CInt,
      CString,
      Ptr[Byte]
    ]
    def apply()(using Zone): Ptr[SDL_AssertData] =
      scala.scalanative.unsafe.alloc[SDL_AssertData](1)
    def apply(
        always_ignore: Boolean,
        trigger_count: CUnsignedInt,
        condition: CString,
        filename: CString,
        linenum: CInt,
        function: CString,
        next: Ptr[SDL_AssertData]
    )(using Zone): Ptr[SDL_AssertData] =
      val ____ptr = apply()
      (!____ptr).always_ignore = always_ignore
      (!____ptr).trigger_count = trigger_count
      (!____ptr).condition = condition
      (!____ptr).filename = filename
      (!____ptr).linenum = linenum
      (!____ptr).function = function
      (!____ptr).next = next
      ____ptr
    end apply
    extension (struct: SDL_AssertData)
      def always_ignore: Boolean = struct._1
      def always_ignore_=(value: Boolean): Unit = !struct.at1 = value
      def trigger_count: CUnsignedInt = struct._2
      def trigger_count_=(value: CUnsignedInt): Unit = !struct.at2 = value
      def condition: CString = struct._3
      def condition_=(value: CString): Unit = !struct.at3 = value
      def filename: CString = struct._4
      def filename_=(value: CString): Unit = !struct.at4 = value
      def linenum: CInt = struct._5
      def linenum_=(value: CInt): Unit = !struct.at5 = value
      def function: CString = struct._6
      def function_=(value: CString): Unit = !struct.at6 = value
      def next: Ptr[SDL_AssertData] =
        struct._7.asInstanceOf[Ptr[SDL_AssertData]]
      def next_=(value: Ptr[SDL_AssertData]): Unit = !struct.at7 =
        value.asInstanceOf[Ptr[Byte]]
    end extension
  end SDL_AssertData

  /** A type representing an atomic integer value.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_atomic.h
    */
  opaque type SDL_AtomicInt = CStruct1[CInt]
  object SDL_AtomicInt:
    given _tag: Tag[SDL_AtomicInt] = Tag.materializeCStruct1Tag[CInt]
    def apply()(using Zone): Ptr[SDL_AtomicInt] =
      scala.scalanative.unsafe.alloc[SDL_AtomicInt](1)
    def apply(value: CInt)(using Zone): Ptr[SDL_AtomicInt] =
      val ____ptr = apply()
      (!____ptr).value = value
      ____ptr
    extension (struct: SDL_AtomicInt)
      def value: CInt = struct._1
      def value_=(value: CInt): Unit = !struct.at1 = value
  end SDL_AtomicInt

  /** A type representing an atomic unsigned 32-bit value.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_atomic.h
    */
  opaque type SDL_AtomicU32 = CStruct1[Uint32]
  object SDL_AtomicU32:
    given _tag: Tag[SDL_AtomicU32] = Tag.materializeCStruct1Tag[Uint32]
    def apply()(using Zone): Ptr[SDL_AtomicU32] =
      scala.scalanative.unsafe.alloc[SDL_AtomicU32](1)
    def apply(value: Uint32)(using Zone): Ptr[SDL_AtomicU32] =
      val ____ptr = apply()
      (!____ptr).value = value
      ____ptr
    extension (struct: SDL_AtomicU32)
      def value: Uint32 = struct._1
      def value_=(value: Uint32): Unit = !struct.at1 = value
  end SDL_AtomicU32

  /** Audio device event structure (event.adevice.*)
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  opaque type SDL_AudioDeviceEvent = CStruct8[
    SDL_EventType,
    Uint32,
    Uint64,
    SDL_AudioDeviceID,
    Boolean,
    Uint8,
    Uint8,
    Uint8
  ]
  object SDL_AudioDeviceEvent:
    given _tag: Tag[SDL_AudioDeviceEvent] = Tag.materializeCStruct8Tag[
      SDL_EventType,
      Uint32,
      Uint64,
      SDL_AudioDeviceID,
      Boolean,
      Uint8,
      Uint8,
      Uint8
    ]
    def apply()(using Zone): Ptr[SDL_AudioDeviceEvent] =
      scala.scalanative.unsafe.alloc[SDL_AudioDeviceEvent](1)
    def apply(
        `type`: SDL_EventType,
        reserved: Uint32,
        timestamp: Uint64,
        which: SDL_AudioDeviceID,
        recording: Boolean,
        padding1: Uint8,
        padding2: Uint8,
        padding3: Uint8
    )(using Zone): Ptr[SDL_AudioDeviceEvent] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).reserved = reserved
      (!____ptr).timestamp = timestamp
      (!____ptr).which = which
      (!____ptr).recording = recording
      (!____ptr).padding1 = padding1
      (!____ptr).padding2 = padding2
      (!____ptr).padding3 = padding3
      ____ptr
    end apply
    extension (struct: SDL_AudioDeviceEvent)
      def `type`: SDL_EventType = struct._1
      def type_=(value: SDL_EventType): Unit = !struct.at1 = value
      def reserved: Uint32 = struct._2
      def reserved_=(value: Uint32): Unit = !struct.at2 = value
      def timestamp: Uint64 = struct._3
      def timestamp_=(value: Uint64): Unit = !struct.at3 = value
      def which: SDL_AudioDeviceID = struct._4
      def which_=(value: SDL_AudioDeviceID): Unit = !struct.at4 = value
      def recording: Boolean = struct._5
      def recording_=(value: Boolean): Unit = !struct.at5 = value
      def padding1: Uint8 = struct._6
      def padding1_=(value: Uint8): Unit = !struct.at6 = value
      def padding2: Uint8 = struct._7
      def padding2_=(value: Uint8): Unit = !struct.at7 = value
      def padding3: Uint8 = struct._8
      def padding3_=(value: Uint8): Unit = !struct.at8 = value
    end extension
  end SDL_AudioDeviceEvent

  /** Format specifier for audio data.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  opaque type SDL_AudioSpec = CStruct3[SDL_AudioFormat, CInt, CInt]
  object SDL_AudioSpec:
    given _tag: Tag[SDL_AudioSpec] =
      Tag.materializeCStruct3Tag[SDL_AudioFormat, CInt, CInt]
    def apply()(using Zone): Ptr[SDL_AudioSpec] =
      scala.scalanative.unsafe.alloc[SDL_AudioSpec](1)
    def apply(format: SDL_AudioFormat, channels: CInt, freq: CInt)(using
        Zone
    ): Ptr[SDL_AudioSpec] =
      val ____ptr = apply()
      (!____ptr).format = format
      (!____ptr).channels = channels
      (!____ptr).freq = freq
      ____ptr
    end apply
    extension (struct: SDL_AudioSpec)
      def format: SDL_AudioFormat = struct._1
      def format_=(value: SDL_AudioFormat): Unit = !struct.at1 = value
      def channels: CInt = struct._2
      def channels_=(value: CInt): Unit = !struct.at2 = value
      def freq: CInt = struct._3
      def freq_=(value: CInt): Unit = !struct.at3 = value
    end extension
  end SDL_AudioSpec

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  opaque type SDL_AudioStream = CStruct0
  object SDL_AudioStream:
    given _tag: Tag[SDL_AudioStream] = Tag.materializeCStruct0Tag

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_camera.h
    */
  opaque type SDL_Camera = CStruct0
  object SDL_Camera:
    given _tag: Tag[SDL_Camera] = Tag.materializeCStruct0Tag

  /** Camera device event structure (event.cdevice.*)
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  opaque type SDL_CameraDeviceEvent =
    CStruct4[SDL_EventType, Uint32, Uint64, SDL_CameraID]
  object SDL_CameraDeviceEvent:
    given _tag: Tag[SDL_CameraDeviceEvent] =
      Tag.materializeCStruct4Tag[SDL_EventType, Uint32, Uint64, SDL_CameraID]
    def apply()(using Zone): Ptr[SDL_CameraDeviceEvent] =
      scala.scalanative.unsafe.alloc[SDL_CameraDeviceEvent](1)
    def apply(
        `type`: SDL_EventType,
        reserved: Uint32,
        timestamp: Uint64,
        which: SDL_CameraID
    )(using Zone): Ptr[SDL_CameraDeviceEvent] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).reserved = reserved
      (!____ptr).timestamp = timestamp
      (!____ptr).which = which
      ____ptr
    end apply
    extension (struct: SDL_CameraDeviceEvent)
      def `type`: SDL_EventType = struct._1
      def type_=(value: SDL_EventType): Unit = !struct.at1 = value
      def reserved: Uint32 = struct._2
      def reserved_=(value: Uint32): Unit = !struct.at2 = value
      def timestamp: Uint64 = struct._3
      def timestamp_=(value: Uint64): Unit = !struct.at3 = value
      def which: SDL_CameraID = struct._4
      def which_=(value: SDL_CameraID): Unit = !struct.at4 = value
    end extension
  end SDL_CameraDeviceEvent

  /** The details of an output format for a camera device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_camera.h
    */
  opaque type SDL_CameraSpec =
    CStruct6[SDL_PixelFormat, SDL_Colorspace, CInt, CInt, CInt, CInt]
  object SDL_CameraSpec:
    given _tag: Tag[SDL_CameraSpec] = Tag.materializeCStruct6Tag[
      SDL_PixelFormat,
      SDL_Colorspace,
      CInt,
      CInt,
      CInt,
      CInt
    ]
    def apply()(using Zone): Ptr[SDL_CameraSpec] =
      scala.scalanative.unsafe.alloc[SDL_CameraSpec](1)
    def apply(
        format: SDL_PixelFormat,
        colorspace: SDL_Colorspace,
        width: CInt,
        height: CInt,
        framerate_numerator: CInt,
        framerate_denominator: CInt
    )(using Zone): Ptr[SDL_CameraSpec] =
      val ____ptr = apply()
      (!____ptr).format = format
      (!____ptr).colorspace = colorspace
      (!____ptr).width = width
      (!____ptr).height = height
      (!____ptr).framerate_numerator = framerate_numerator
      (!____ptr).framerate_denominator = framerate_denominator
      ____ptr
    end apply
    extension (struct: SDL_CameraSpec)
      def format: SDL_PixelFormat = struct._1
      def format_=(value: SDL_PixelFormat): Unit = !struct.at1 = value
      def colorspace: SDL_Colorspace = struct._2
      def colorspace_=(value: SDL_Colorspace): Unit = !struct.at2 = value
      def width: CInt = struct._3
      def width_=(value: CInt): Unit = !struct.at3 = value
      def height: CInt = struct._4
      def height_=(value: CInt): Unit = !struct.at4 = value
      def framerate_numerator: CInt = struct._5
      def framerate_numerator_=(value: CInt): Unit = !struct.at5 = value
      def framerate_denominator: CInt = struct._6
      def framerate_denominator_=(value: CInt): Unit = !struct.at6 = value
    end extension
  end SDL_CameraSpec

  /** An event triggered when the clipboard contents have changed
    * (event.clipboard.*)
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  opaque type SDL_ClipboardEvent =
    CStruct6[SDL_EventType, Uint32, Uint64, Boolean, Sint32, Ptr[CString]]
  object SDL_ClipboardEvent:
    given _tag: Tag[SDL_ClipboardEvent] = Tag.materializeCStruct6Tag[
      SDL_EventType,
      Uint32,
      Uint64,
      Boolean,
      Sint32,
      Ptr[CString]
    ]
    def apply()(using Zone): Ptr[SDL_ClipboardEvent] =
      scala.scalanative.unsafe.alloc[SDL_ClipboardEvent](1)
    def apply(
        `type`: SDL_EventType,
        reserved: Uint32,
        timestamp: Uint64,
        owner: Boolean,
        n_mime_types: Sint32,
        mime_types: Ptr[CString]
    )(using Zone): Ptr[SDL_ClipboardEvent] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).reserved = reserved
      (!____ptr).timestamp = timestamp
      (!____ptr).owner = owner
      (!____ptr).n_mime_types = n_mime_types
      (!____ptr).mime_types = mime_types
      ____ptr
    end apply
    extension (struct: SDL_ClipboardEvent)
      def `type`: SDL_EventType = struct._1
      def type_=(value: SDL_EventType): Unit = !struct.at1 = value
      def reserved: Uint32 = struct._2
      def reserved_=(value: Uint32): Unit = !struct.at2 = value
      def timestamp: Uint64 = struct._3
      def timestamp_=(value: Uint64): Unit = !struct.at3 = value
      def owner: Boolean = struct._4
      def owner_=(value: Boolean): Unit = !struct.at4 = value
      def n_mime_types: Sint32 = struct._5
      def n_mime_types_=(value: Sint32): Unit = !struct.at5 = value
      def mime_types: Ptr[CString] = struct._6
      def mime_types_=(value: Ptr[CString]): Unit = !struct.at6 = value
    end extension
  end SDL_ClipboardEvent

  /** A structure that represents a color as RGBA components.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_pixels.h
    */
  opaque type SDL_Color = CStruct4[Uint8, Uint8, Uint8, Uint8]
  object SDL_Color:
    given _tag: Tag[SDL_Color] =
      Tag.materializeCStruct4Tag[Uint8, Uint8, Uint8, Uint8]
    def apply()(using Zone): Ptr[SDL_Color] =
      scala.scalanative.unsafe.alloc[SDL_Color](1)
    def apply(r: Uint8, g: Uint8, b: Uint8, a: Uint8)(using
        Zone
    ): Ptr[SDL_Color] =
      val ____ptr = apply()
      (!____ptr).r = r
      (!____ptr).g = g
      (!____ptr).b = b
      (!____ptr).a = a
      ____ptr
    end apply
    extension (struct: SDL_Color)
      def r: Uint8 = struct._1
      def r_=(value: Uint8): Unit = !struct.at1 = value
      def g: Uint8 = struct._2
      def g_=(value: Uint8): Unit = !struct.at2 = value
      def b: Uint8 = struct._3
      def b_=(value: Uint8): Unit = !struct.at3 = value
      def a: Uint8 = struct._4
      def a_=(value: Uint8): Unit = !struct.at4 = value
    end extension
  end SDL_Color

  /** Fields shared by every event
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  opaque type SDL_CommonEvent = CStruct3[Uint32, Uint32, Uint64]
  object SDL_CommonEvent:
    given _tag: Tag[SDL_CommonEvent] =
      Tag.materializeCStruct3Tag[Uint32, Uint32, Uint64]
    def apply()(using Zone): Ptr[SDL_CommonEvent] =
      scala.scalanative.unsafe.alloc[SDL_CommonEvent](1)
    def apply(`type`: Uint32, reserved: Uint32, timestamp: Uint64)(using
        Zone
    ): Ptr[SDL_CommonEvent] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).reserved = reserved
      (!____ptr).timestamp = timestamp
      ____ptr
    end apply
    extension (struct: SDL_CommonEvent)
      def `type`: Uint32 = struct._1
      def type_=(value: Uint32): Unit = !struct.at1 = value
      def reserved: Uint32 = struct._2
      def reserved_=(value: Uint32): Unit = !struct.at2 = value
      def timestamp: Uint64 = struct._3
      def timestamp_=(value: Uint64): Unit = !struct.at3 = value
    end extension
  end SDL_CommonEvent

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mutex.h
    */
  opaque type SDL_Condition = CStruct0
  object SDL_Condition:
    given _tag: Tag[SDL_Condition] = Tag.materializeCStruct0Tag

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mouse.h
    */
  opaque type SDL_Cursor = CStruct0
  object SDL_Cursor:
    given _tag: Tag[SDL_Cursor] = Tag.materializeCStruct0Tag

  /** A structure holding a calendar date and time broken down into its
    * components.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_time.h
    */
  opaque type SDL_DateTime =
    CStruct9[CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt]
  object SDL_DateTime:
    given _tag: Tag[SDL_DateTime] = Tag.materializeCStruct9Tag[
      CInt,
      CInt,
      CInt,
      CInt,
      CInt,
      CInt,
      CInt,
      CInt,
      CInt
    ]
    def apply()(using Zone): Ptr[SDL_DateTime] =
      scala.scalanative.unsafe.alloc[SDL_DateTime](1)
    def apply(
        year: CInt,
        month: CInt,
        day: CInt,
        hour: CInt,
        minute: CInt,
        second: CInt,
        nanosecond: CInt,
        day_of_week: CInt,
        utc_offset: CInt
    )(using Zone): Ptr[SDL_DateTime] =
      val ____ptr = apply()
      (!____ptr).year = year
      (!____ptr).month = month
      (!____ptr).day = day
      (!____ptr).hour = hour
      (!____ptr).minute = minute
      (!____ptr).second = second
      (!____ptr).nanosecond = nanosecond
      (!____ptr).day_of_week = day_of_week
      (!____ptr).utc_offset = utc_offset
      ____ptr
    end apply
    extension (struct: SDL_DateTime)
      def year: CInt = struct._1
      def year_=(value: CInt): Unit = !struct.at1 = value
      def month: CInt = struct._2
      def month_=(value: CInt): Unit = !struct.at2 = value
      def day: CInt = struct._3
      def day_=(value: CInt): Unit = !struct.at3 = value
      def hour: CInt = struct._4
      def hour_=(value: CInt): Unit = !struct.at4 = value
      def minute: CInt = struct._5
      def minute_=(value: CInt): Unit = !struct.at5 = value
      def second: CInt = struct._6
      def second_=(value: CInt): Unit = !struct.at6 = value
      def nanosecond: CInt = struct._7
      def nanosecond_=(value: CInt): Unit = !struct.at7 = value
      def day_of_week: CInt = struct._8
      def day_of_week_=(value: CInt): Unit = !struct.at8 = value
      def utc_offset: CInt = struct._9
      def utc_offset_=(value: CInt): Unit = !struct.at9 = value
    end extension
  end SDL_DateTime

  /** An entry for filters for file dialogs.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_dialog.h
    */
  opaque type SDL_DialogFileFilter = CStruct2[CString, CString]
  object SDL_DialogFileFilter:
    given _tag: Tag[SDL_DialogFileFilter] =
      Tag.materializeCStruct2Tag[CString, CString]
    def apply()(using Zone): Ptr[SDL_DialogFileFilter] =
      scala.scalanative.unsafe.alloc[SDL_DialogFileFilter](1)
    def apply(name: CString, pattern: CString)(using
        Zone
    ): Ptr[SDL_DialogFileFilter] =
      val ____ptr = apply()
      (!____ptr).name = name
      (!____ptr).pattern = pattern
      ____ptr
    end apply
    extension (struct: SDL_DialogFileFilter)
      def name: CString = struct._1
      def name_=(value: CString): Unit = !struct.at1 = value
      def pattern: CString = struct._2
      def pattern_=(value: CString): Unit = !struct.at2 = value
    end extension
  end SDL_DialogFileFilter

  /** Display state change event data (event.display.*)
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  opaque type SDL_DisplayEvent =
    CStruct6[SDL_EventType, Uint32, Uint64, SDL_DisplayID, Sint32, Sint32]
  object SDL_DisplayEvent:
    given _tag: Tag[SDL_DisplayEvent] = Tag.materializeCStruct6Tag[
      SDL_EventType,
      Uint32,
      Uint64,
      SDL_DisplayID,
      Sint32,
      Sint32
    ]
    def apply()(using Zone): Ptr[SDL_DisplayEvent] =
      scala.scalanative.unsafe.alloc[SDL_DisplayEvent](1)
    def apply(
        `type`: SDL_EventType,
        reserved: Uint32,
        timestamp: Uint64,
        displayID: SDL_DisplayID,
        data1: Sint32,
        data2: Sint32
    )(using Zone): Ptr[SDL_DisplayEvent] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).reserved = reserved
      (!____ptr).timestamp = timestamp
      (!____ptr).displayID = displayID
      (!____ptr).data1 = data1
      (!____ptr).data2 = data2
      ____ptr
    end apply
    extension (struct: SDL_DisplayEvent)
      def `type`: SDL_EventType = struct._1
      def type_=(value: SDL_EventType): Unit = !struct.at1 = value
      def reserved: Uint32 = struct._2
      def reserved_=(value: Uint32): Unit = !struct.at2 = value
      def timestamp: Uint64 = struct._3
      def timestamp_=(value: Uint64): Unit = !struct.at3 = value
      def displayID: SDL_DisplayID = struct._4
      def displayID_=(value: SDL_DisplayID): Unit = !struct.at4 = value
      def data1: Sint32 = struct._5
      def data1_=(value: Sint32): Unit = !struct.at5 = value
      def data2: Sint32 = struct._6
      def data2_=(value: Sint32): Unit = !struct.at6 = value
    end extension
  end SDL_DisplayEvent

  /** The structure that defines a display mode.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  opaque type SDL_DisplayMode = CStruct9[
    SDL_DisplayID,
    SDL_PixelFormat,
    CInt,
    CInt,
    Float,
    Float,
    CInt,
    CInt,
    Ptr[SDL_DisplayModeData]
  ]
  object SDL_DisplayMode:
    given _tag: Tag[SDL_DisplayMode] = Tag.materializeCStruct9Tag[
      SDL_DisplayID,
      SDL_PixelFormat,
      CInt,
      CInt,
      Float,
      Float,
      CInt,
      CInt,
      Ptr[SDL_DisplayModeData]
    ]
    def apply()(using Zone): Ptr[SDL_DisplayMode] =
      scala.scalanative.unsafe.alloc[SDL_DisplayMode](1)
    def apply(
        displayID: SDL_DisplayID,
        format: SDL_PixelFormat,
        w: CInt,
        h: CInt,
        pixel_density: Float,
        refresh_rate: Float,
        refresh_rate_numerator: CInt,
        refresh_rate_denominator: CInt,
        internal: Ptr[SDL_DisplayModeData]
    )(using Zone): Ptr[SDL_DisplayMode] =
      val ____ptr = apply()
      (!____ptr).displayID = displayID
      (!____ptr).format = format
      (!____ptr).w = w
      (!____ptr).h = h
      (!____ptr).pixel_density = pixel_density
      (!____ptr).refresh_rate = refresh_rate
      (!____ptr).refresh_rate_numerator = refresh_rate_numerator
      (!____ptr).refresh_rate_denominator = refresh_rate_denominator
      (!____ptr).internal = internal
      ____ptr
    end apply
    extension (struct: SDL_DisplayMode)
      def displayID: SDL_DisplayID = struct._1
      def displayID_=(value: SDL_DisplayID): Unit = !struct.at1 = value
      def format: SDL_PixelFormat = struct._2
      def format_=(value: SDL_PixelFormat): Unit = !struct.at2 = value
      def w: CInt = struct._3
      def w_=(value: CInt): Unit = !struct.at3 = value
      def h: CInt = struct._4
      def h_=(value: CInt): Unit = !struct.at4 = value
      def pixel_density: Float = struct._5
      def pixel_density_=(value: Float): Unit = !struct.at5 = value
      def refresh_rate: Float = struct._6
      def refresh_rate_=(value: Float): Unit = !struct.at6 = value
      def refresh_rate_numerator: CInt = struct._7
      def refresh_rate_numerator_=(value: CInt): Unit = !struct.at7 = value
      def refresh_rate_denominator: CInt = struct._8
      def refresh_rate_denominator_=(value: CInt): Unit = !struct.at8 = value
      def internal: Ptr[SDL_DisplayModeData] = struct._9
      def internal_=(value: Ptr[SDL_DisplayModeData]): Unit = !struct.at9 =
        value
    end extension
  end SDL_DisplayMode

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  opaque type SDL_DisplayModeData = CStruct0
  object SDL_DisplayModeData:
    given _tag: Tag[SDL_DisplayModeData] = Tag.materializeCStruct0Tag

  /** An event used to drop text or request a file open by the system
    * (event.drop.*)
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  opaque type SDL_DropEvent = CStruct8[
    SDL_EventType,
    Uint32,
    Uint64,
    SDL_WindowID,
    Float,
    Float,
    CString,
    CString
  ]
  object SDL_DropEvent:
    given _tag: Tag[SDL_DropEvent] = Tag.materializeCStruct8Tag[
      SDL_EventType,
      Uint32,
      Uint64,
      SDL_WindowID,
      Float,
      Float,
      CString,
      CString
    ]
    def apply()(using Zone): Ptr[SDL_DropEvent] =
      scala.scalanative.unsafe.alloc[SDL_DropEvent](1)
    def apply(
        `type`: SDL_EventType,
        reserved: Uint32,
        timestamp: Uint64,
        windowID: SDL_WindowID,
        x: Float,
        y: Float,
        source: CString,
        data: CString
    )(using Zone): Ptr[SDL_DropEvent] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).reserved = reserved
      (!____ptr).timestamp = timestamp
      (!____ptr).windowID = windowID
      (!____ptr).x = x
      (!____ptr).y = y
      (!____ptr).source = source
      (!____ptr).data = data
      ____ptr
    end apply
    extension (struct: SDL_DropEvent)
      def `type`: SDL_EventType = struct._1
      def type_=(value: SDL_EventType): Unit = !struct.at1 = value
      def reserved: Uint32 = struct._2
      def reserved_=(value: Uint32): Unit = !struct.at2 = value
      def timestamp: Uint64 = struct._3
      def timestamp_=(value: Uint64): Unit = !struct.at3 = value
      def windowID: SDL_WindowID = struct._4
      def windowID_=(value: SDL_WindowID): Unit = !struct.at4 = value
      def x: Float = struct._5
      def x_=(value: Float): Unit = !struct.at5 = value
      def y: Float = struct._6
      def y_=(value: Float): Unit = !struct.at6 = value
      def source: CString = struct._7
      def source_=(value: CString): Unit = !struct.at7 = value
      def data: CString = struct._8
      def data_=(value: CString): Unit = !struct.at8 = value
    end extension
  end SDL_DropEvent

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  opaque type SDL_Environment = CStruct0
  object SDL_Environment:
    given _tag: Tag[SDL_Environment] = Tag.materializeCStruct0Tag

  /** The bits of this structure can be directly reinterpreted as a float-packed
    * color which uses the SDL_PIXELFORMAT_RGBA128_FLOAT format
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_pixels.h
    */
  opaque type SDL_FColor = CStruct4[Float, Float, Float, Float]
  object SDL_FColor:
    given _tag: Tag[SDL_FColor] =
      Tag.materializeCStruct4Tag[Float, Float, Float, Float]
    def apply()(using Zone): Ptr[SDL_FColor] =
      scala.scalanative.unsafe.alloc[SDL_FColor](1)
    def apply(r: Float, g: Float, b: Float, a: Float)(using
        Zone
    ): Ptr[SDL_FColor] =
      val ____ptr = apply()
      (!____ptr).r = r
      (!____ptr).g = g
      (!____ptr).b = b
      (!____ptr).a = a
      ____ptr
    end apply
    extension (struct: SDL_FColor)
      def r: Float = struct._1
      def r_=(value: Float): Unit = !struct.at1 = value
      def g: Float = struct._2
      def g_=(value: Float): Unit = !struct.at2 = value
      def b: Float = struct._3
      def b_=(value: Float): Unit = !struct.at3 = value
      def a: Float = struct._4
      def a_=(value: Float): Unit = !struct.at4 = value
    end extension
  end SDL_FColor

  /** The structure that defines a point (using floating point values).
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_rect.h
    */
  opaque type SDL_FPoint = CStruct2[Float, Float]
  object SDL_FPoint:
    given _tag: Tag[SDL_FPoint] = Tag.materializeCStruct2Tag[Float, Float]
    def apply()(using Zone): Ptr[SDL_FPoint] =
      scala.scalanative.unsafe.alloc[SDL_FPoint](1)
    def apply(x: Float, y: Float)(using Zone): Ptr[SDL_FPoint] =
      val ____ptr = apply()
      (!____ptr).x = x
      (!____ptr).y = y
      ____ptr
    end apply
    extension (struct: SDL_FPoint)
      def x: Float = struct._1
      def x_=(value: Float): Unit = !struct.at1 = value
      def y: Float = struct._2
      def y_=(value: Float): Unit = !struct.at2 = value
    end extension
  end SDL_FPoint

  /** A rectangle, with the origin at the upper left (using floating point
    * values).
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_rect.h
    */
  opaque type SDL_FRect = CStruct4[Float, Float, Float, Float]
  object SDL_FRect:
    given _tag: Tag[SDL_FRect] =
      Tag.materializeCStruct4Tag[Float, Float, Float, Float]
    def apply()(using Zone): Ptr[SDL_FRect] =
      scala.scalanative.unsafe.alloc[SDL_FRect](1)
    def apply(x: Float, y: Float, w: Float, h: Float)(using
        Zone
    ): Ptr[SDL_FRect] =
      val ____ptr = apply()
      (!____ptr).x = x
      (!____ptr).y = y
      (!____ptr).w = w
      (!____ptr).h = h
      ____ptr
    end apply
    extension (struct: SDL_FRect)
      def x: Float = struct._1
      def x_=(value: Float): Unit = !struct.at1 = value
      def y: Float = struct._2
      def y_=(value: Float): Unit = !struct.at2 = value
      def w: Float = struct._3
      def w_=(value: Float): Unit = !struct.at3 = value
      def h: Float = struct._4
      def h_=(value: Float): Unit = !struct.at4 = value
    end extension
  end SDL_FRect

  /** Data about a single finger in a multitouch event.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_touch.h
    */
  opaque type SDL_Finger = CStruct4[SDL_FingerID, Float, Float, Float]
  object SDL_Finger:
    given _tag: Tag[SDL_Finger] =
      Tag.materializeCStruct4Tag[SDL_FingerID, Float, Float, Float]
    def apply()(using Zone): Ptr[SDL_Finger] =
      scala.scalanative.unsafe.alloc[SDL_Finger](1)
    def apply(id: SDL_FingerID, x: Float, y: Float, pressure: Float)(using
        Zone
    ): Ptr[SDL_Finger] =
      val ____ptr = apply()
      (!____ptr).id = id
      (!____ptr).x = x
      (!____ptr).y = y
      (!____ptr).pressure = pressure
      ____ptr
    end apply
    extension (struct: SDL_Finger)
      def id: SDL_FingerID = struct._1
      def id_=(value: SDL_FingerID): Unit = !struct.at1 = value
      def x: Float = struct._2
      def x_=(value: Float): Unit = !struct.at2 = value
      def y: Float = struct._3
      def y_=(value: Float): Unit = !struct.at3 = value
      def pressure: Float = struct._4
      def pressure_=(value: Float): Unit = !struct.at4 = value
    end extension
  end SDL_Finger

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  opaque type SDL_GLContextState = CStruct0
  object SDL_GLContextState:
    given _tag: Tag[SDL_GLContextState] = Tag.materializeCStruct0Tag

  /** A structure containing parameters for a blit command.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUBlitInfo = CStruct10[
    SDL_GPUBlitRegion,
    SDL_GPUBlitRegion,
    SDL_GPULoadOp,
    SDL_FColor,
    SDL_FlipMode,
    SDL_GPUFilter,
    Boolean,
    Uint8,
    Uint8,
    Uint8
  ]
  object SDL_GPUBlitInfo:
    given _tag: Tag[SDL_GPUBlitInfo] = Tag.materializeCStruct10Tag[
      SDL_GPUBlitRegion,
      SDL_GPUBlitRegion,
      SDL_GPULoadOp,
      SDL_FColor,
      SDL_FlipMode,
      SDL_GPUFilter,
      Boolean,
      Uint8,
      Uint8,
      Uint8
    ]
    def apply()(using Zone): Ptr[SDL_GPUBlitInfo] =
      scala.scalanative.unsafe.alloc[SDL_GPUBlitInfo](1)
    def apply(
        source: SDL_GPUBlitRegion,
        destination: SDL_GPUBlitRegion,
        load_op: SDL_GPULoadOp,
        clear_color: SDL_FColor,
        flip_mode: SDL_FlipMode,
        filter: SDL_GPUFilter,
        cycle: Boolean,
        padding1: Uint8,
        padding2: Uint8,
        padding3: Uint8
    )(using Zone): Ptr[SDL_GPUBlitInfo] =
      val ____ptr = apply()
      (!____ptr).source = source
      (!____ptr).destination = destination
      (!____ptr).load_op = load_op
      (!____ptr).clear_color = clear_color
      (!____ptr).flip_mode = flip_mode
      (!____ptr).filter = filter
      (!____ptr).cycle = cycle
      (!____ptr).padding1 = padding1
      (!____ptr).padding2 = padding2
      (!____ptr).padding3 = padding3
      ____ptr
    end apply
    extension (struct: SDL_GPUBlitInfo)
      def source: SDL_GPUBlitRegion = struct._1
      def source_=(value: SDL_GPUBlitRegion): Unit = !struct.at1 = value
      def destination: SDL_GPUBlitRegion = struct._2
      def destination_=(value: SDL_GPUBlitRegion): Unit = !struct.at2 = value
      def load_op: SDL_GPULoadOp = struct._3
      def load_op_=(value: SDL_GPULoadOp): Unit = !struct.at3 = value
      def clear_color: SDL_FColor = struct._4
      def clear_color_=(value: SDL_FColor): Unit = !struct.at4 = value
      def flip_mode: SDL_FlipMode = struct._5
      def flip_mode_=(value: SDL_FlipMode): Unit = !struct.at5 = value
      def filter: SDL_GPUFilter = struct._6
      def filter_=(value: SDL_GPUFilter): Unit = !struct.at6 = value
      def cycle: Boolean = struct._7
      def cycle_=(value: Boolean): Unit = !struct.at7 = value
      def padding1: Uint8 = struct._8
      def padding1_=(value: Uint8): Unit = !struct.at8 = value
      def padding2: Uint8 = struct._9
      def padding2_=(value: Uint8): Unit = !struct.at9 = value
      def padding3: Uint8 = struct._10
      def padding3_=(value: Uint8): Unit = !struct.at10 = value
    end extension
  end SDL_GPUBlitInfo

  /** A structure specifying a region of a texture used in the blit operation.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUBlitRegion = CStruct7[Ptr[
    SDL_GPUTexture
  ], Uint32, Uint32, Uint32, Uint32, Uint32, Uint32]
  object SDL_GPUBlitRegion:
    given _tag: Tag[SDL_GPUBlitRegion] = Tag.materializeCStruct7Tag[Ptr[
      SDL_GPUTexture
    ], Uint32, Uint32, Uint32, Uint32, Uint32, Uint32]
    def apply()(using Zone): Ptr[SDL_GPUBlitRegion] =
      scala.scalanative.unsafe.alloc[SDL_GPUBlitRegion](1)
    def apply(
        texture: Ptr[SDL_GPUTexture],
        mip_level: Uint32,
        layer_or_depth_plane: Uint32,
        x: Uint32,
        y: Uint32,
        w: Uint32,
        h: Uint32
    )(using Zone): Ptr[SDL_GPUBlitRegion] =
      val ____ptr = apply()
      (!____ptr).texture = texture
      (!____ptr).mip_level = mip_level
      (!____ptr).layer_or_depth_plane = layer_or_depth_plane
      (!____ptr).x = x
      (!____ptr).y = y
      (!____ptr).w = w
      (!____ptr).h = h
      ____ptr
    end apply
    extension (struct: SDL_GPUBlitRegion)
      def texture: Ptr[SDL_GPUTexture] = struct._1
      def texture_=(value: Ptr[SDL_GPUTexture]): Unit = !struct.at1 = value
      def mip_level: Uint32 = struct._2
      def mip_level_=(value: Uint32): Unit = !struct.at2 = value
      def layer_or_depth_plane: Uint32 = struct._3
      def layer_or_depth_plane_=(value: Uint32): Unit = !struct.at3 = value
      def x: Uint32 = struct._4
      def x_=(value: Uint32): Unit = !struct.at4 = value
      def y: Uint32 = struct._5
      def y_=(value: Uint32): Unit = !struct.at5 = value
      def w: Uint32 = struct._6
      def w_=(value: Uint32): Unit = !struct.at6 = value
      def h: Uint32 = struct._7
      def h_=(value: Uint32): Unit = !struct.at7 = value
    end extension
  end SDL_GPUBlitRegion

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUBuffer = CStruct0
  object SDL_GPUBuffer:
    given _tag: Tag[SDL_GPUBuffer] = Tag.materializeCStruct0Tag

  /** A structure specifying parameters in a buffer binding call.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUBufferBinding = CStruct2[Ptr[SDL_GPUBuffer], Uint32]
  object SDL_GPUBufferBinding:
    given _tag: Tag[SDL_GPUBufferBinding] =
      Tag.materializeCStruct2Tag[Ptr[SDL_GPUBuffer], Uint32]
    def apply()(using Zone): Ptr[SDL_GPUBufferBinding] =
      scala.scalanative.unsafe.alloc[SDL_GPUBufferBinding](1)
    def apply(buffer: Ptr[SDL_GPUBuffer], offset: Uint32)(using
        Zone
    ): Ptr[SDL_GPUBufferBinding] =
      val ____ptr = apply()
      (!____ptr).buffer = buffer
      (!____ptr).offset = offset
      ____ptr
    end apply
    extension (struct: SDL_GPUBufferBinding)
      def buffer: Ptr[SDL_GPUBuffer] = struct._1
      def buffer_=(value: Ptr[SDL_GPUBuffer]): Unit = !struct.at1 = value
      def offset: Uint32 = struct._2
      def offset_=(value: Uint32): Unit = !struct.at2 = value
    end extension
  end SDL_GPUBufferBinding

  /** A structure specifying the parameters of a buffer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUBufferCreateInfo =
    CStruct3[SDL_GPUBufferUsageFlags, Uint32, SDL_PropertiesID]
  object SDL_GPUBufferCreateInfo:
    given _tag: Tag[SDL_GPUBufferCreateInfo] = Tag
      .materializeCStruct3Tag[SDL_GPUBufferUsageFlags, Uint32, SDL_PropertiesID]
    def apply()(using Zone): Ptr[SDL_GPUBufferCreateInfo] =
      scala.scalanative.unsafe.alloc[SDL_GPUBufferCreateInfo](1)
    def apply(
        usage: SDL_GPUBufferUsageFlags,
        size: Uint32,
        props: SDL_PropertiesID
    )(using Zone): Ptr[SDL_GPUBufferCreateInfo] =
      val ____ptr = apply()
      (!____ptr).usage = usage
      (!____ptr).size = size
      (!____ptr).props = props
      ____ptr
    end apply
    extension (struct: SDL_GPUBufferCreateInfo)
      def usage: SDL_GPUBufferUsageFlags = struct._1
      def usage_=(value: SDL_GPUBufferUsageFlags): Unit = !struct.at1 = value
      def size: Uint32 = struct._2
      def size_=(value: Uint32): Unit = !struct.at2 = value
      def props: SDL_PropertiesID = struct._3
      def props_=(value: SDL_PropertiesID): Unit = !struct.at3 = value
    end extension
  end SDL_GPUBufferCreateInfo

  /** A structure specifying a location in a buffer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUBufferLocation = CStruct2[Ptr[SDL_GPUBuffer], Uint32]
  object SDL_GPUBufferLocation:
    given _tag: Tag[SDL_GPUBufferLocation] =
      Tag.materializeCStruct2Tag[Ptr[SDL_GPUBuffer], Uint32]
    def apply()(using Zone): Ptr[SDL_GPUBufferLocation] =
      scala.scalanative.unsafe.alloc[SDL_GPUBufferLocation](1)
    def apply(buffer: Ptr[SDL_GPUBuffer], offset: Uint32)(using
        Zone
    ): Ptr[SDL_GPUBufferLocation] =
      val ____ptr = apply()
      (!____ptr).buffer = buffer
      (!____ptr).offset = offset
      ____ptr
    end apply
    extension (struct: SDL_GPUBufferLocation)
      def buffer: Ptr[SDL_GPUBuffer] = struct._1
      def buffer_=(value: Ptr[SDL_GPUBuffer]): Unit = !struct.at1 = value
      def offset: Uint32 = struct._2
      def offset_=(value: Uint32): Unit = !struct.at2 = value
    end extension
  end SDL_GPUBufferLocation

  /** A structure specifying a region of a buffer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUBufferRegion = CStruct3[Ptr[SDL_GPUBuffer], Uint32, Uint32]
  object SDL_GPUBufferRegion:
    given _tag: Tag[SDL_GPUBufferRegion] =
      Tag.materializeCStruct3Tag[Ptr[SDL_GPUBuffer], Uint32, Uint32]
    def apply()(using Zone): Ptr[SDL_GPUBufferRegion] =
      scala.scalanative.unsafe.alloc[SDL_GPUBufferRegion](1)
    def apply(buffer: Ptr[SDL_GPUBuffer], offset: Uint32, size: Uint32)(using
        Zone
    ): Ptr[SDL_GPUBufferRegion] =
      val ____ptr = apply()
      (!____ptr).buffer = buffer
      (!____ptr).offset = offset
      (!____ptr).size = size
      ____ptr
    end apply
    extension (struct: SDL_GPUBufferRegion)
      def buffer: Ptr[SDL_GPUBuffer] = struct._1
      def buffer_=(value: Ptr[SDL_GPUBuffer]): Unit = !struct.at1 = value
      def offset: Uint32 = struct._2
      def offset_=(value: Uint32): Unit = !struct.at2 = value
      def size: Uint32 = struct._3
      def size_=(value: Uint32): Unit = !struct.at3 = value
    end extension
  end SDL_GPUBufferRegion

  /** A structure specifying the blend state of a color target.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUColorTargetBlendState = CStruct11[
    SDL_GPUBlendFactor,
    SDL_GPUBlendFactor,
    SDL_GPUBlendOp,
    SDL_GPUBlendFactor,
    SDL_GPUBlendFactor,
    SDL_GPUBlendOp,
    SDL_GPUColorComponentFlags,
    Boolean,
    Boolean,
    Uint8,
    Uint8
  ]
  object SDL_GPUColorTargetBlendState:
    given _tag: Tag[SDL_GPUColorTargetBlendState] = Tag.materializeCStruct11Tag[
      SDL_GPUBlendFactor,
      SDL_GPUBlendFactor,
      SDL_GPUBlendOp,
      SDL_GPUBlendFactor,
      SDL_GPUBlendFactor,
      SDL_GPUBlendOp,
      SDL_GPUColorComponentFlags,
      Boolean,
      Boolean,
      Uint8,
      Uint8
    ]
    def apply()(using Zone): Ptr[SDL_GPUColorTargetBlendState] =
      scala.scalanative.unsafe.alloc[SDL_GPUColorTargetBlendState](1)
    def apply(
        src_color_blendfactor: SDL_GPUBlendFactor,
        dst_color_blendfactor: SDL_GPUBlendFactor,
        color_blend_op: SDL_GPUBlendOp,
        src_alpha_blendfactor: SDL_GPUBlendFactor,
        dst_alpha_blendfactor: SDL_GPUBlendFactor,
        alpha_blend_op: SDL_GPUBlendOp,
        color_write_mask: SDL_GPUColorComponentFlags,
        enable_blend: Boolean,
        enable_color_write_mask: Boolean,
        padding1: Uint8,
        padding2: Uint8
    )(using Zone): Ptr[SDL_GPUColorTargetBlendState] =
      val ____ptr = apply()
      (!____ptr).src_color_blendfactor = src_color_blendfactor
      (!____ptr).dst_color_blendfactor = dst_color_blendfactor
      (!____ptr).color_blend_op = color_blend_op
      (!____ptr).src_alpha_blendfactor = src_alpha_blendfactor
      (!____ptr).dst_alpha_blendfactor = dst_alpha_blendfactor
      (!____ptr).alpha_blend_op = alpha_blend_op
      (!____ptr).color_write_mask = color_write_mask
      (!____ptr).enable_blend = enable_blend
      (!____ptr).enable_color_write_mask = enable_color_write_mask
      (!____ptr).padding1 = padding1
      (!____ptr).padding2 = padding2
      ____ptr
    end apply
    extension (struct: SDL_GPUColorTargetBlendState)
      def src_color_blendfactor: SDL_GPUBlendFactor = struct._1
      def src_color_blendfactor_=(value: SDL_GPUBlendFactor): Unit =
        !struct.at1 = value
      def dst_color_blendfactor: SDL_GPUBlendFactor = struct._2
      def dst_color_blendfactor_=(value: SDL_GPUBlendFactor): Unit =
        !struct.at2 = value
      def color_blend_op: SDL_GPUBlendOp = struct._3
      def color_blend_op_=(value: SDL_GPUBlendOp): Unit = !struct.at3 = value
      def src_alpha_blendfactor: SDL_GPUBlendFactor = struct._4
      def src_alpha_blendfactor_=(value: SDL_GPUBlendFactor): Unit =
        !struct.at4 = value
      def dst_alpha_blendfactor: SDL_GPUBlendFactor = struct._5
      def dst_alpha_blendfactor_=(value: SDL_GPUBlendFactor): Unit =
        !struct.at5 = value
      def alpha_blend_op: SDL_GPUBlendOp = struct._6
      def alpha_blend_op_=(value: SDL_GPUBlendOp): Unit = !struct.at6 = value
      def color_write_mask: SDL_GPUColorComponentFlags = struct._7
      def color_write_mask_=(value: SDL_GPUColorComponentFlags): Unit =
        !struct.at7 = value
      def enable_blend: Boolean = struct._8
      def enable_blend_=(value: Boolean): Unit = !struct.at8 = value
      def enable_color_write_mask: Boolean = struct._9
      def enable_color_write_mask_=(value: Boolean): Unit = !struct.at9 = value
      def padding1: Uint8 = struct._10
      def padding1_=(value: Uint8): Unit = !struct.at10 = value
      def padding2: Uint8 = struct._11
      def padding2_=(value: Uint8): Unit = !struct.at11 = value
    end extension
  end SDL_GPUColorTargetBlendState

  /** A structure specifying the parameters of color targets used in a graphics
    * pipeline.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUColorTargetDescription =
    CStruct2[SDL_GPUTextureFormat, SDL_GPUColorTargetBlendState]
  object SDL_GPUColorTargetDescription:
    given _tag: Tag[SDL_GPUColorTargetDescription] = Tag.materializeCStruct2Tag[
      SDL_GPUTextureFormat,
      SDL_GPUColorTargetBlendState
    ]
    def apply()(using Zone): Ptr[SDL_GPUColorTargetDescription] =
      scala.scalanative.unsafe.alloc[SDL_GPUColorTargetDescription](1)
    def apply(
        format: SDL_GPUTextureFormat,
        blend_state: SDL_GPUColorTargetBlendState
    )(using Zone): Ptr[SDL_GPUColorTargetDescription] =
      val ____ptr = apply()
      (!____ptr).format = format
      (!____ptr).blend_state = blend_state
      ____ptr
    end apply
    extension (struct: SDL_GPUColorTargetDescription)
      def format: SDL_GPUTextureFormat = struct._1
      def format_=(value: SDL_GPUTextureFormat): Unit = !struct.at1 = value
      def blend_state: SDL_GPUColorTargetBlendState = struct._2
      def blend_state_=(value: SDL_GPUColorTargetBlendState): Unit =
        !struct.at2 = value
    end extension
  end SDL_GPUColorTargetDescription

  /** A structure specifying the parameters of a color target used by a render
    * pass.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUColorTargetInfo = CStruct13[
    Ptr[SDL_GPUTexture],
    Uint32,
    Uint32,
    SDL_FColor,
    SDL_GPULoadOp,
    SDL_GPUStoreOp,
    Ptr[SDL_GPUTexture],
    Uint32,
    Uint32,
    Boolean,
    Boolean,
    Uint8,
    Uint8
  ]
  object SDL_GPUColorTargetInfo:
    given _tag: Tag[SDL_GPUColorTargetInfo] = Tag.materializeCStruct13Tag[Ptr[
      SDL_GPUTexture
    ], Uint32, Uint32, SDL_FColor, SDL_GPULoadOp, SDL_GPUStoreOp, Ptr[
      SDL_GPUTexture
    ], Uint32, Uint32, Boolean, Boolean, Uint8, Uint8]
    def apply()(using Zone): Ptr[SDL_GPUColorTargetInfo] =
      scala.scalanative.unsafe.alloc[SDL_GPUColorTargetInfo](1)
    def apply(
        texture: Ptr[SDL_GPUTexture],
        mip_level: Uint32,
        layer_or_depth_plane: Uint32,
        clear_color: SDL_FColor,
        load_op: SDL_GPULoadOp,
        store_op: SDL_GPUStoreOp,
        resolve_texture: Ptr[SDL_GPUTexture],
        resolve_mip_level: Uint32,
        resolve_layer: Uint32,
        cycle: Boolean,
        cycle_resolve_texture: Boolean,
        padding1: Uint8,
        padding2: Uint8
    )(using Zone): Ptr[SDL_GPUColorTargetInfo] =
      val ____ptr = apply()
      (!____ptr).texture = texture
      (!____ptr).mip_level = mip_level
      (!____ptr).layer_or_depth_plane = layer_or_depth_plane
      (!____ptr).clear_color = clear_color
      (!____ptr).load_op = load_op
      (!____ptr).store_op = store_op
      (!____ptr).resolve_texture = resolve_texture
      (!____ptr).resolve_mip_level = resolve_mip_level
      (!____ptr).resolve_layer = resolve_layer
      (!____ptr).cycle = cycle
      (!____ptr).cycle_resolve_texture = cycle_resolve_texture
      (!____ptr).padding1 = padding1
      (!____ptr).padding2 = padding2
      ____ptr
    end apply
    extension (struct: SDL_GPUColorTargetInfo)
      def texture: Ptr[SDL_GPUTexture] = struct._1
      def texture_=(value: Ptr[SDL_GPUTexture]): Unit = !struct.at1 = value
      def mip_level: Uint32 = struct._2
      def mip_level_=(value: Uint32): Unit = !struct.at2 = value
      def layer_or_depth_plane: Uint32 = struct._3
      def layer_or_depth_plane_=(value: Uint32): Unit = !struct.at3 = value
      def clear_color: SDL_FColor = struct._4
      def clear_color_=(value: SDL_FColor): Unit = !struct.at4 = value
      def load_op: SDL_GPULoadOp = struct._5
      def load_op_=(value: SDL_GPULoadOp): Unit = !struct.at5 = value
      def store_op: SDL_GPUStoreOp = struct._6
      def store_op_=(value: SDL_GPUStoreOp): Unit = !struct.at6 = value
      def resolve_texture: Ptr[SDL_GPUTexture] = struct._7
      def resolve_texture_=(value: Ptr[SDL_GPUTexture]): Unit = !struct.at7 =
        value
      def resolve_mip_level: Uint32 = struct._8
      def resolve_mip_level_=(value: Uint32): Unit = !struct.at8 = value
      def resolve_layer: Uint32 = struct._9
      def resolve_layer_=(value: Uint32): Unit = !struct.at9 = value
      def cycle: Boolean = struct._10
      def cycle_=(value: Boolean): Unit = !struct.at10 = value
      def cycle_resolve_texture: Boolean = struct._11
      def cycle_resolve_texture_=(value: Boolean): Unit = !struct.at11 = value
      def padding1: Uint8 = struct._12
      def padding1_=(value: Uint8): Unit = !struct.at12 = value
      def padding2: Uint8 = struct._13
      def padding2_=(value: Uint8): Unit = !struct.at13 = value
    end extension
  end SDL_GPUColorTargetInfo

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUCommandBuffer = CStruct0
  object SDL_GPUCommandBuffer:
    given _tag: Tag[SDL_GPUCommandBuffer] = Tag.materializeCStruct0Tag

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUComputePass = CStruct0
  object SDL_GPUComputePass:
    given _tag: Tag[SDL_GPUComputePass] = Tag.materializeCStruct0Tag

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUComputePipeline = CStruct0
  object SDL_GPUComputePipeline:
    given _tag: Tag[SDL_GPUComputePipeline] = Tag.materializeCStruct0Tag

  /** A structure specifying the parameters of a compute pipeline state.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUComputePipelineCreateInfo = CStruct14[
    size_t,
    Ptr[Uint8],
    CString,
    SDL_GPUShaderFormat,
    Uint32,
    Uint32,
    Uint32,
    Uint32,
    Uint32,
    Uint32,
    Uint32,
    Uint32,
    Uint32,
    SDL_PropertiesID
  ]
  object SDL_GPUComputePipelineCreateInfo:
    given _tag: Tag[SDL_GPUComputePipelineCreateInfo] =
      Tag.materializeCStruct14Tag[
        size_t,
        Ptr[Uint8],
        CString,
        SDL_GPUShaderFormat,
        Uint32,
        Uint32,
        Uint32,
        Uint32,
        Uint32,
        Uint32,
        Uint32,
        Uint32,
        Uint32,
        SDL_PropertiesID
      ]
    def apply()(using Zone): Ptr[SDL_GPUComputePipelineCreateInfo] =
      scala.scalanative.unsafe.alloc[SDL_GPUComputePipelineCreateInfo](1)
    def apply(
        code_size: size_t,
        code: Ptr[Uint8],
        entrypoint: CString,
        format: SDL_GPUShaderFormat,
        num_samplers: Uint32,
        num_readonly_storage_textures: Uint32,
        num_readonly_storage_buffers: Uint32,
        num_readwrite_storage_textures: Uint32,
        num_readwrite_storage_buffers: Uint32,
        num_uniform_buffers: Uint32,
        threadcount_x: Uint32,
        threadcount_y: Uint32,
        threadcount_z: Uint32,
        props: SDL_PropertiesID
    )(using Zone): Ptr[SDL_GPUComputePipelineCreateInfo] =
      val ____ptr = apply()
      (!____ptr).code_size = code_size
      (!____ptr).code = code
      (!____ptr).entrypoint = entrypoint
      (!____ptr).format = format
      (!____ptr).num_samplers = num_samplers
      (!____ptr).num_readonly_storage_textures = num_readonly_storage_textures
      (!____ptr).num_readonly_storage_buffers = num_readonly_storage_buffers
      (!____ptr).num_readwrite_storage_textures = num_readwrite_storage_textures
      (!____ptr).num_readwrite_storage_buffers = num_readwrite_storage_buffers
      (!____ptr).num_uniform_buffers = num_uniform_buffers
      (!____ptr).threadcount_x = threadcount_x
      (!____ptr).threadcount_y = threadcount_y
      (!____ptr).threadcount_z = threadcount_z
      (!____ptr).props = props
      ____ptr
    end apply
    extension (struct: SDL_GPUComputePipelineCreateInfo)
      def code_size: size_t = struct._1
      def code_size_=(value: size_t): Unit = !struct.at1 = value
      def code: Ptr[Uint8] = struct._2
      def code_=(value: Ptr[Uint8]): Unit = !struct.at2 = value
      def entrypoint: CString = struct._3
      def entrypoint_=(value: CString): Unit = !struct.at3 = value
      def format: SDL_GPUShaderFormat = struct._4
      def format_=(value: SDL_GPUShaderFormat): Unit = !struct.at4 = value
      def num_samplers: Uint32 = struct._5
      def num_samplers_=(value: Uint32): Unit = !struct.at5 = value
      def num_readonly_storage_textures: Uint32 = struct._6
      def num_readonly_storage_textures_=(value: Uint32): Unit = !struct.at6 =
        value
      def num_readonly_storage_buffers: Uint32 = struct._7
      def num_readonly_storage_buffers_=(value: Uint32): Unit = !struct.at7 =
        value
      def num_readwrite_storage_textures: Uint32 = struct._8
      def num_readwrite_storage_textures_=(value: Uint32): Unit = !struct.at8 =
        value
      def num_readwrite_storage_buffers: Uint32 = struct._9
      def num_readwrite_storage_buffers_=(value: Uint32): Unit = !struct.at9 =
        value
      def num_uniform_buffers: Uint32 = struct._10
      def num_uniform_buffers_=(value: Uint32): Unit = !struct.at10 = value
      def threadcount_x: Uint32 = struct._11
      def threadcount_x_=(value: Uint32): Unit = !struct.at11 = value
      def threadcount_y: Uint32 = struct._12
      def threadcount_y_=(value: Uint32): Unit = !struct.at12 = value
      def threadcount_z: Uint32 = struct._13
      def threadcount_z_=(value: Uint32): Unit = !struct.at13 = value
      def props: SDL_PropertiesID = struct._14
      def props_=(value: SDL_PropertiesID): Unit = !struct.at14 = value
    end extension
  end SDL_GPUComputePipelineCreateInfo

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUCopyPass = CStruct0
  object SDL_GPUCopyPass:
    given _tag: Tag[SDL_GPUCopyPass] = Tag.materializeCStruct0Tag

  /** A structure specifying the parameters of the graphics pipeline depth
    * stencil state.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUDepthStencilState = CStruct11[
    SDL_GPUCompareOp,
    SDL_GPUStencilOpState,
    SDL_GPUStencilOpState,
    Uint8,
    Uint8,
    Boolean,
    Boolean,
    Boolean,
    Uint8,
    Uint8,
    Uint8
  ]
  object SDL_GPUDepthStencilState:
    given _tag: Tag[SDL_GPUDepthStencilState] = Tag.materializeCStruct11Tag[
      SDL_GPUCompareOp,
      SDL_GPUStencilOpState,
      SDL_GPUStencilOpState,
      Uint8,
      Uint8,
      Boolean,
      Boolean,
      Boolean,
      Uint8,
      Uint8,
      Uint8
    ]
    def apply()(using Zone): Ptr[SDL_GPUDepthStencilState] =
      scala.scalanative.unsafe.alloc[SDL_GPUDepthStencilState](1)
    def apply(
        compare_op: SDL_GPUCompareOp,
        back_stencil_state: SDL_GPUStencilOpState,
        front_stencil_state: SDL_GPUStencilOpState,
        compare_mask: Uint8,
        write_mask: Uint8,
        enable_depth_test: Boolean,
        enable_depth_write: Boolean,
        enable_stencil_test: Boolean,
        padding1: Uint8,
        padding2: Uint8,
        padding3: Uint8
    )(using Zone): Ptr[SDL_GPUDepthStencilState] =
      val ____ptr = apply()
      (!____ptr).compare_op = compare_op
      (!____ptr).back_stencil_state = back_stencil_state
      (!____ptr).front_stencil_state = front_stencil_state
      (!____ptr).compare_mask = compare_mask
      (!____ptr).write_mask = write_mask
      (!____ptr).enable_depth_test = enable_depth_test
      (!____ptr).enable_depth_write = enable_depth_write
      (!____ptr).enable_stencil_test = enable_stencil_test
      (!____ptr).padding1 = padding1
      (!____ptr).padding2 = padding2
      (!____ptr).padding3 = padding3
      ____ptr
    end apply
    extension (struct: SDL_GPUDepthStencilState)
      def compare_op: SDL_GPUCompareOp = struct._1
      def compare_op_=(value: SDL_GPUCompareOp): Unit = !struct.at1 = value
      def back_stencil_state: SDL_GPUStencilOpState = struct._2
      def back_stencil_state_=(value: SDL_GPUStencilOpState): Unit =
        !struct.at2 = value
      def front_stencil_state: SDL_GPUStencilOpState = struct._3
      def front_stencil_state_=(value: SDL_GPUStencilOpState): Unit =
        !struct.at3 = value
      def compare_mask: Uint8 = struct._4
      def compare_mask_=(value: Uint8): Unit = !struct.at4 = value
      def write_mask: Uint8 = struct._5
      def write_mask_=(value: Uint8): Unit = !struct.at5 = value
      def enable_depth_test: Boolean = struct._6
      def enable_depth_test_=(value: Boolean): Unit = !struct.at6 = value
      def enable_depth_write: Boolean = struct._7
      def enable_depth_write_=(value: Boolean): Unit = !struct.at7 = value
      def enable_stencil_test: Boolean = struct._8
      def enable_stencil_test_=(value: Boolean): Unit = !struct.at8 = value
      def padding1: Uint8 = struct._9
      def padding1_=(value: Uint8): Unit = !struct.at9 = value
      def padding2: Uint8 = struct._10
      def padding2_=(value: Uint8): Unit = !struct.at10 = value
      def padding3: Uint8 = struct._11
      def padding3_=(value: Uint8): Unit = !struct.at11 = value
    end extension
  end SDL_GPUDepthStencilState

  /** A structure specifying the parameters of a depth-stencil target used by a
    * render pass.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUDepthStencilTargetInfo = CStruct10[
    Ptr[SDL_GPUTexture],
    Float,
    SDL_GPULoadOp,
    SDL_GPUStoreOp,
    SDL_GPULoadOp,
    SDL_GPUStoreOp,
    Boolean,
    Uint8,
    Uint8,
    Uint8
  ]
  object SDL_GPUDepthStencilTargetInfo:
    given _tag: Tag[SDL_GPUDepthStencilTargetInfo] =
      Tag.materializeCStruct10Tag[
        Ptr[SDL_GPUTexture],
        Float,
        SDL_GPULoadOp,
        SDL_GPUStoreOp,
        SDL_GPULoadOp,
        SDL_GPUStoreOp,
        Boolean,
        Uint8,
        Uint8,
        Uint8
      ]
    def apply()(using Zone): Ptr[SDL_GPUDepthStencilTargetInfo] =
      scala.scalanative.unsafe.alloc[SDL_GPUDepthStencilTargetInfo](1)
    def apply(
        texture: Ptr[SDL_GPUTexture],
        clear_depth: Float,
        load_op: SDL_GPULoadOp,
        store_op: SDL_GPUStoreOp,
        stencil_load_op: SDL_GPULoadOp,
        stencil_store_op: SDL_GPUStoreOp,
        cycle: Boolean,
        clear_stencil: Uint8,
        padding1: Uint8,
        padding2: Uint8
    )(using Zone): Ptr[SDL_GPUDepthStencilTargetInfo] =
      val ____ptr = apply()
      (!____ptr).texture = texture
      (!____ptr).clear_depth = clear_depth
      (!____ptr).load_op = load_op
      (!____ptr).store_op = store_op
      (!____ptr).stencil_load_op = stencil_load_op
      (!____ptr).stencil_store_op = stencil_store_op
      (!____ptr).cycle = cycle
      (!____ptr).clear_stencil = clear_stencil
      (!____ptr).padding1 = padding1
      (!____ptr).padding2 = padding2
      ____ptr
    end apply
    extension (struct: SDL_GPUDepthStencilTargetInfo)
      def texture: Ptr[SDL_GPUTexture] = struct._1
      def texture_=(value: Ptr[SDL_GPUTexture]): Unit = !struct.at1 = value
      def clear_depth: Float = struct._2
      def clear_depth_=(value: Float): Unit = !struct.at2 = value
      def load_op: SDL_GPULoadOp = struct._3
      def load_op_=(value: SDL_GPULoadOp): Unit = !struct.at3 = value
      def store_op: SDL_GPUStoreOp = struct._4
      def store_op_=(value: SDL_GPUStoreOp): Unit = !struct.at4 = value
      def stencil_load_op: SDL_GPULoadOp = struct._5
      def stencil_load_op_=(value: SDL_GPULoadOp): Unit = !struct.at5 = value
      def stencil_store_op: SDL_GPUStoreOp = struct._6
      def stencil_store_op_=(value: SDL_GPUStoreOp): Unit = !struct.at6 = value
      def cycle: Boolean = struct._7
      def cycle_=(value: Boolean): Unit = !struct.at7 = value
      def clear_stencil: Uint8 = struct._8
      def clear_stencil_=(value: Uint8): Unit = !struct.at8 = value
      def padding1: Uint8 = struct._9
      def padding1_=(value: Uint8): Unit = !struct.at9 = value
      def padding2: Uint8 = struct._10
      def padding2_=(value: Uint8): Unit = !struct.at10 = value
    end extension
  end SDL_GPUDepthStencilTargetInfo

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUDevice = CStruct0
  object SDL_GPUDevice:
    given _tag: Tag[SDL_GPUDevice] = Tag.materializeCStruct0Tag

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUFence = CStruct0
  object SDL_GPUFence:
    given _tag: Tag[SDL_GPUFence] = Tag.materializeCStruct0Tag

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUGraphicsPipeline = CStruct0
  object SDL_GPUGraphicsPipeline:
    given _tag: Tag[SDL_GPUGraphicsPipeline] = Tag.materializeCStruct0Tag

  /** A structure specifying the parameters of a graphics pipeline state.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUGraphicsPipelineCreateInfo = CStruct9[
    Ptr[SDL_GPUShader],
    Ptr[SDL_GPUShader],
    SDL_GPUVertexInputState,
    SDL_GPUPrimitiveType,
    SDL_GPURasterizerState,
    SDL_GPUMultisampleState,
    SDL_GPUDepthStencilState,
    SDL_GPUGraphicsPipelineTargetInfo,
    SDL_PropertiesID
  ]
  object SDL_GPUGraphicsPipelineCreateInfo:
    given _tag: Tag[SDL_GPUGraphicsPipelineCreateInfo] =
      Tag.materializeCStruct9Tag[
        Ptr[SDL_GPUShader],
        Ptr[SDL_GPUShader],
        SDL_GPUVertexInputState,
        SDL_GPUPrimitiveType,
        SDL_GPURasterizerState,
        SDL_GPUMultisampleState,
        SDL_GPUDepthStencilState,
        SDL_GPUGraphicsPipelineTargetInfo,
        SDL_PropertiesID
      ]
    def apply()(using Zone): Ptr[SDL_GPUGraphicsPipelineCreateInfo] =
      scala.scalanative.unsafe.alloc[SDL_GPUGraphicsPipelineCreateInfo](1)
    def apply(
        vertex_shader: Ptr[SDL_GPUShader],
        fragment_shader: Ptr[SDL_GPUShader],
        vertex_input_state: SDL_GPUVertexInputState,
        primitive_type: SDL_GPUPrimitiveType,
        rasterizer_state: SDL_GPURasterizerState,
        multisample_state: SDL_GPUMultisampleState,
        depth_stencil_state: SDL_GPUDepthStencilState,
        target_info: SDL_GPUGraphicsPipelineTargetInfo,
        props: SDL_PropertiesID
    )(using Zone): Ptr[SDL_GPUGraphicsPipelineCreateInfo] =
      val ____ptr = apply()
      (!____ptr).vertex_shader = vertex_shader
      (!____ptr).fragment_shader = fragment_shader
      (!____ptr).vertex_input_state = vertex_input_state
      (!____ptr).primitive_type = primitive_type
      (!____ptr).rasterizer_state = rasterizer_state
      (!____ptr).multisample_state = multisample_state
      (!____ptr).depth_stencil_state = depth_stencil_state
      (!____ptr).target_info = target_info
      (!____ptr).props = props
      ____ptr
    end apply
    extension (struct: SDL_GPUGraphicsPipelineCreateInfo)
      def vertex_shader: Ptr[SDL_GPUShader] = struct._1
      def vertex_shader_=(value: Ptr[SDL_GPUShader]): Unit = !struct.at1 = value
      def fragment_shader: Ptr[SDL_GPUShader] = struct._2
      def fragment_shader_=(value: Ptr[SDL_GPUShader]): Unit = !struct.at2 =
        value
      def vertex_input_state: SDL_GPUVertexInputState = struct._3
      def vertex_input_state_=(value: SDL_GPUVertexInputState): Unit =
        !struct.at3 = value
      def primitive_type: SDL_GPUPrimitiveType = struct._4
      def primitive_type_=(value: SDL_GPUPrimitiveType): Unit = !struct.at4 =
        value
      def rasterizer_state: SDL_GPURasterizerState = struct._5
      def rasterizer_state_=(value: SDL_GPURasterizerState): Unit =
        !struct.at5 = value
      def multisample_state: SDL_GPUMultisampleState = struct._6
      def multisample_state_=(value: SDL_GPUMultisampleState): Unit =
        !struct.at6 = value
      def depth_stencil_state: SDL_GPUDepthStencilState = struct._7
      def depth_stencil_state_=(value: SDL_GPUDepthStencilState): Unit =
        !struct.at7 = value
      def target_info: SDL_GPUGraphicsPipelineTargetInfo = struct._8
      def target_info_=(value: SDL_GPUGraphicsPipelineTargetInfo): Unit =
        !struct.at8 = value
      def props: SDL_PropertiesID = struct._9
      def props_=(value: SDL_PropertiesID): Unit = !struct.at9 = value
    end extension
  end SDL_GPUGraphicsPipelineCreateInfo

  /** A structure specifying the descriptions of render targets used in a
    * graphics pipeline.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUGraphicsPipelineTargetInfo = CStruct7[Ptr[
    SDL_GPUColorTargetDescription
  ], Uint32, SDL_GPUTextureFormat, Boolean, Uint8, Uint8, Uint8]
  object SDL_GPUGraphicsPipelineTargetInfo:
    given _tag: Tag[SDL_GPUGraphicsPipelineTargetInfo] =
      Tag.materializeCStruct7Tag[Ptr[
        SDL_GPUColorTargetDescription
      ], Uint32, SDL_GPUTextureFormat, Boolean, Uint8, Uint8, Uint8]
    def apply()(using Zone): Ptr[SDL_GPUGraphicsPipelineTargetInfo] =
      scala.scalanative.unsafe.alloc[SDL_GPUGraphicsPipelineTargetInfo](1)
    def apply(
        color_target_descriptions: Ptr[SDL_GPUColorTargetDescription],
        num_color_targets: Uint32,
        depth_stencil_format: SDL_GPUTextureFormat,
        has_depth_stencil_target: Boolean,
        padding1: Uint8,
        padding2: Uint8,
        padding3: Uint8
    )(using Zone): Ptr[SDL_GPUGraphicsPipelineTargetInfo] =
      val ____ptr = apply()
      (!____ptr).color_target_descriptions = color_target_descriptions
      (!____ptr).num_color_targets = num_color_targets
      (!____ptr).depth_stencil_format = depth_stencil_format
      (!____ptr).has_depth_stencil_target = has_depth_stencil_target
      (!____ptr).padding1 = padding1
      (!____ptr).padding2 = padding2
      (!____ptr).padding3 = padding3
      ____ptr
    end apply
    extension (struct: SDL_GPUGraphicsPipelineTargetInfo)
      def color_target_descriptions: Ptr[SDL_GPUColorTargetDescription] =
        struct._1
      def color_target_descriptions_=(
          value: Ptr[SDL_GPUColorTargetDescription]
      ): Unit = !struct.at1 = value
      def num_color_targets: Uint32 = struct._2
      def num_color_targets_=(value: Uint32): Unit = !struct.at2 = value
      def depth_stencil_format: SDL_GPUTextureFormat = struct._3
      def depth_stencil_format_=(value: SDL_GPUTextureFormat): Unit =
        !struct.at3 = value
      def has_depth_stencil_target: Boolean = struct._4
      def has_depth_stencil_target_=(value: Boolean): Unit = !struct.at4 = value
      def padding1: Uint8 = struct._5
      def padding1_=(value: Uint8): Unit = !struct.at5 = value
      def padding2: Uint8 = struct._6
      def padding2_=(value: Uint8): Unit = !struct.at6 = value
      def padding3: Uint8 = struct._7
      def padding3_=(value: Uint8): Unit = !struct.at7 = value
    end extension
  end SDL_GPUGraphicsPipelineTargetInfo

  /** A structure specifying the parameters of an indexed indirect draw command.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUIndexedIndirectDrawCommand =
    CStruct5[Uint32, Uint32, Uint32, Sint32, Uint32]
  object SDL_GPUIndexedIndirectDrawCommand:
    given _tag: Tag[SDL_GPUIndexedIndirectDrawCommand] =
      Tag.materializeCStruct5Tag[Uint32, Uint32, Uint32, Sint32, Uint32]
    def apply()(using Zone): Ptr[SDL_GPUIndexedIndirectDrawCommand] =
      scala.scalanative.unsafe.alloc[SDL_GPUIndexedIndirectDrawCommand](1)
    def apply(
        num_indices: Uint32,
        num_instances: Uint32,
        first_index: Uint32,
        vertex_offset: Sint32,
        first_instance: Uint32
    )(using Zone): Ptr[SDL_GPUIndexedIndirectDrawCommand] =
      val ____ptr = apply()
      (!____ptr).num_indices = num_indices
      (!____ptr).num_instances = num_instances
      (!____ptr).first_index = first_index
      (!____ptr).vertex_offset = vertex_offset
      (!____ptr).first_instance = first_instance
      ____ptr
    end apply
    extension (struct: SDL_GPUIndexedIndirectDrawCommand)
      def num_indices: Uint32 = struct._1
      def num_indices_=(value: Uint32): Unit = !struct.at1 = value
      def num_instances: Uint32 = struct._2
      def num_instances_=(value: Uint32): Unit = !struct.at2 = value
      def first_index: Uint32 = struct._3
      def first_index_=(value: Uint32): Unit = !struct.at3 = value
      def vertex_offset: Sint32 = struct._4
      def vertex_offset_=(value: Sint32): Unit = !struct.at4 = value
      def first_instance: Uint32 = struct._5
      def first_instance_=(value: Uint32): Unit = !struct.at5 = value
    end extension
  end SDL_GPUIndexedIndirectDrawCommand

  /** A structure specifying the parameters of an indexed dispatch command.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUIndirectDispatchCommand = CStruct3[Uint32, Uint32, Uint32]
  object SDL_GPUIndirectDispatchCommand:
    given _tag: Tag[SDL_GPUIndirectDispatchCommand] =
      Tag.materializeCStruct3Tag[Uint32, Uint32, Uint32]
    def apply()(using Zone): Ptr[SDL_GPUIndirectDispatchCommand] =
      scala.scalanative.unsafe.alloc[SDL_GPUIndirectDispatchCommand](1)
    def apply(groupcount_x: Uint32, groupcount_y: Uint32, groupcount_z: Uint32)(
        using Zone
    ): Ptr[SDL_GPUIndirectDispatchCommand] =
      val ____ptr = apply()
      (!____ptr).groupcount_x = groupcount_x
      (!____ptr).groupcount_y = groupcount_y
      (!____ptr).groupcount_z = groupcount_z
      ____ptr
    end apply
    extension (struct: SDL_GPUIndirectDispatchCommand)
      def groupcount_x: Uint32 = struct._1
      def groupcount_x_=(value: Uint32): Unit = !struct.at1 = value
      def groupcount_y: Uint32 = struct._2
      def groupcount_y_=(value: Uint32): Unit = !struct.at2 = value
      def groupcount_z: Uint32 = struct._3
      def groupcount_z_=(value: Uint32): Unit = !struct.at3 = value
    end extension
  end SDL_GPUIndirectDispatchCommand

  /** A structure specifying the parameters of an indirect draw command.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUIndirectDrawCommand =
    CStruct4[Uint32, Uint32, Uint32, Uint32]
  object SDL_GPUIndirectDrawCommand:
    given _tag: Tag[SDL_GPUIndirectDrawCommand] =
      Tag.materializeCStruct4Tag[Uint32, Uint32, Uint32, Uint32]
    def apply()(using Zone): Ptr[SDL_GPUIndirectDrawCommand] =
      scala.scalanative.unsafe.alloc[SDL_GPUIndirectDrawCommand](1)
    def apply(
        num_vertices: Uint32,
        num_instances: Uint32,
        first_vertex: Uint32,
        first_instance: Uint32
    )(using Zone): Ptr[SDL_GPUIndirectDrawCommand] =
      val ____ptr = apply()
      (!____ptr).num_vertices = num_vertices
      (!____ptr).num_instances = num_instances
      (!____ptr).first_vertex = first_vertex
      (!____ptr).first_instance = first_instance
      ____ptr
    end apply
    extension (struct: SDL_GPUIndirectDrawCommand)
      def num_vertices: Uint32 = struct._1
      def num_vertices_=(value: Uint32): Unit = !struct.at1 = value
      def num_instances: Uint32 = struct._2
      def num_instances_=(value: Uint32): Unit = !struct.at2 = value
      def first_vertex: Uint32 = struct._3
      def first_vertex_=(value: Uint32): Unit = !struct.at3 = value
      def first_instance: Uint32 = struct._4
      def first_instance_=(value: Uint32): Unit = !struct.at4 = value
    end extension
  end SDL_GPUIndirectDrawCommand

  /** A structure specifying the parameters of the graphics pipeline multisample
    * state.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUMultisampleState =
    CStruct6[SDL_GPUSampleCount, Uint32, Boolean, Uint8, Uint8, Uint8]
  object SDL_GPUMultisampleState:
    given _tag: Tag[SDL_GPUMultisampleState] = Tag.materializeCStruct6Tag[
      SDL_GPUSampleCount,
      Uint32,
      Boolean,
      Uint8,
      Uint8,
      Uint8
    ]
    def apply()(using Zone): Ptr[SDL_GPUMultisampleState] =
      scala.scalanative.unsafe.alloc[SDL_GPUMultisampleState](1)
    def apply(
        sample_count: SDL_GPUSampleCount,
        sample_mask: Uint32,
        enable_mask: Boolean,
        padding1: Uint8,
        padding2: Uint8,
        padding3: Uint8
    )(using Zone): Ptr[SDL_GPUMultisampleState] =
      val ____ptr = apply()
      (!____ptr).sample_count = sample_count
      (!____ptr).sample_mask = sample_mask
      (!____ptr).enable_mask = enable_mask
      (!____ptr).padding1 = padding1
      (!____ptr).padding2 = padding2
      (!____ptr).padding3 = padding3
      ____ptr
    end apply
    extension (struct: SDL_GPUMultisampleState)
      def sample_count: SDL_GPUSampleCount = struct._1
      def sample_count_=(value: SDL_GPUSampleCount): Unit = !struct.at1 = value
      def sample_mask: Uint32 = struct._2
      def sample_mask_=(value: Uint32): Unit = !struct.at2 = value
      def enable_mask: Boolean = struct._3
      def enable_mask_=(value: Boolean): Unit = !struct.at3 = value
      def padding1: Uint8 = struct._4
      def padding1_=(value: Uint8): Unit = !struct.at4 = value
      def padding2: Uint8 = struct._5
      def padding2_=(value: Uint8): Unit = !struct.at5 = value
      def padding3: Uint8 = struct._6
      def padding3_=(value: Uint8): Unit = !struct.at6 = value
    end extension
  end SDL_GPUMultisampleState

  /** A structure specifying the parameters of the graphics pipeline rasterizer
    * state.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPURasterizerState = CStruct10[
    SDL_GPUFillMode,
    SDL_GPUCullMode,
    SDL_GPUFrontFace,
    Float,
    Float,
    Float,
    Boolean,
    Boolean,
    Uint8,
    Uint8
  ]
  object SDL_GPURasterizerState:
    given _tag: Tag[SDL_GPURasterizerState] = Tag.materializeCStruct10Tag[
      SDL_GPUFillMode,
      SDL_GPUCullMode,
      SDL_GPUFrontFace,
      Float,
      Float,
      Float,
      Boolean,
      Boolean,
      Uint8,
      Uint8
    ]
    def apply()(using Zone): Ptr[SDL_GPURasterizerState] =
      scala.scalanative.unsafe.alloc[SDL_GPURasterizerState](1)
    def apply(
        fill_mode: SDL_GPUFillMode,
        cull_mode: SDL_GPUCullMode,
        front_face: SDL_GPUFrontFace,
        depth_bias_constant_factor: Float,
        depth_bias_clamp: Float,
        depth_bias_slope_factor: Float,
        enable_depth_bias: Boolean,
        enable_depth_clip: Boolean,
        padding1: Uint8,
        padding2: Uint8
    )(using Zone): Ptr[SDL_GPURasterizerState] =
      val ____ptr = apply()
      (!____ptr).fill_mode = fill_mode
      (!____ptr).cull_mode = cull_mode
      (!____ptr).front_face = front_face
      (!____ptr).depth_bias_constant_factor = depth_bias_constant_factor
      (!____ptr).depth_bias_clamp = depth_bias_clamp
      (!____ptr).depth_bias_slope_factor = depth_bias_slope_factor
      (!____ptr).enable_depth_bias = enable_depth_bias
      (!____ptr).enable_depth_clip = enable_depth_clip
      (!____ptr).padding1 = padding1
      (!____ptr).padding2 = padding2
      ____ptr
    end apply
    extension (struct: SDL_GPURasterizerState)
      def fill_mode: SDL_GPUFillMode = struct._1
      def fill_mode_=(value: SDL_GPUFillMode): Unit = !struct.at1 = value
      def cull_mode: SDL_GPUCullMode = struct._2
      def cull_mode_=(value: SDL_GPUCullMode): Unit = !struct.at2 = value
      def front_face: SDL_GPUFrontFace = struct._3
      def front_face_=(value: SDL_GPUFrontFace): Unit = !struct.at3 = value
      def depth_bias_constant_factor: Float = struct._4
      def depth_bias_constant_factor_=(value: Float): Unit = !struct.at4 = value
      def depth_bias_clamp: Float = struct._5
      def depth_bias_clamp_=(value: Float): Unit = !struct.at5 = value
      def depth_bias_slope_factor: Float = struct._6
      def depth_bias_slope_factor_=(value: Float): Unit = !struct.at6 = value
      def enable_depth_bias: Boolean = struct._7
      def enable_depth_bias_=(value: Boolean): Unit = !struct.at7 = value
      def enable_depth_clip: Boolean = struct._8
      def enable_depth_clip_=(value: Boolean): Unit = !struct.at8 = value
      def padding1: Uint8 = struct._9
      def padding1_=(value: Uint8): Unit = !struct.at9 = value
      def padding2: Uint8 = struct._10
      def padding2_=(value: Uint8): Unit = !struct.at10 = value
    end extension
  end SDL_GPURasterizerState

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPURenderPass = CStruct0
  object SDL_GPURenderPass:
    given _tag: Tag[SDL_GPURenderPass] = Tag.materializeCStruct0Tag

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUSampler = CStruct0
  object SDL_GPUSampler:
    given _tag: Tag[SDL_GPUSampler] = Tag.materializeCStruct0Tag

  /** A structure specifying the parameters of a sampler.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUSamplerCreateInfo = CStruct16[
    SDL_GPUFilter,
    SDL_GPUFilter,
    SDL_GPUSamplerMipmapMode,
    SDL_GPUSamplerAddressMode,
    SDL_GPUSamplerAddressMode,
    SDL_GPUSamplerAddressMode,
    Float,
    Float,
    SDL_GPUCompareOp,
    Float,
    Float,
    Boolean,
    Boolean,
    Uint8,
    Uint8,
    SDL_PropertiesID
  ]
  object SDL_GPUSamplerCreateInfo:
    given _tag: Tag[SDL_GPUSamplerCreateInfo] = Tag.materializeCStruct16Tag[
      SDL_GPUFilter,
      SDL_GPUFilter,
      SDL_GPUSamplerMipmapMode,
      SDL_GPUSamplerAddressMode,
      SDL_GPUSamplerAddressMode,
      SDL_GPUSamplerAddressMode,
      Float,
      Float,
      SDL_GPUCompareOp,
      Float,
      Float,
      Boolean,
      Boolean,
      Uint8,
      Uint8,
      SDL_PropertiesID
    ]
    def apply()(using Zone): Ptr[SDL_GPUSamplerCreateInfo] =
      scala.scalanative.unsafe.alloc[SDL_GPUSamplerCreateInfo](1)
    def apply(
        min_filter: SDL_GPUFilter,
        mag_filter: SDL_GPUFilter,
        mipmap_mode: SDL_GPUSamplerMipmapMode,
        address_mode_u: SDL_GPUSamplerAddressMode,
        address_mode_v: SDL_GPUSamplerAddressMode,
        address_mode_w: SDL_GPUSamplerAddressMode,
        mip_lod_bias: Float,
        max_anisotropy: Float,
        compare_op: SDL_GPUCompareOp,
        min_lod: Float,
        max_lod: Float,
        enable_anisotropy: Boolean,
        enable_compare: Boolean,
        padding1: Uint8,
        padding2: Uint8,
        props: SDL_PropertiesID
    )(using Zone): Ptr[SDL_GPUSamplerCreateInfo] =
      val ____ptr = apply()
      (!____ptr).min_filter = min_filter
      (!____ptr).mag_filter = mag_filter
      (!____ptr).mipmap_mode = mipmap_mode
      (!____ptr).address_mode_u = address_mode_u
      (!____ptr).address_mode_v = address_mode_v
      (!____ptr).address_mode_w = address_mode_w
      (!____ptr).mip_lod_bias = mip_lod_bias
      (!____ptr).max_anisotropy = max_anisotropy
      (!____ptr).compare_op = compare_op
      (!____ptr).min_lod = min_lod
      (!____ptr).max_lod = max_lod
      (!____ptr).enable_anisotropy = enable_anisotropy
      (!____ptr).enable_compare = enable_compare
      (!____ptr).padding1 = padding1
      (!____ptr).padding2 = padding2
      (!____ptr).props = props
      ____ptr
    end apply
    extension (struct: SDL_GPUSamplerCreateInfo)
      def min_filter: SDL_GPUFilter = struct._1
      def min_filter_=(value: SDL_GPUFilter): Unit = !struct.at1 = value
      def mag_filter: SDL_GPUFilter = struct._2
      def mag_filter_=(value: SDL_GPUFilter): Unit = !struct.at2 = value
      def mipmap_mode: SDL_GPUSamplerMipmapMode = struct._3
      def mipmap_mode_=(value: SDL_GPUSamplerMipmapMode): Unit = !struct.at3 =
        value
      def address_mode_u: SDL_GPUSamplerAddressMode = struct._4
      def address_mode_u_=(value: SDL_GPUSamplerAddressMode): Unit =
        !struct.at4 = value
      def address_mode_v: SDL_GPUSamplerAddressMode = struct._5
      def address_mode_v_=(value: SDL_GPUSamplerAddressMode): Unit =
        !struct.at5 = value
      def address_mode_w: SDL_GPUSamplerAddressMode = struct._6
      def address_mode_w_=(value: SDL_GPUSamplerAddressMode): Unit =
        !struct.at6 = value
      def mip_lod_bias: Float = struct._7
      def mip_lod_bias_=(value: Float): Unit = !struct.at7 = value
      def max_anisotropy: Float = struct._8
      def max_anisotropy_=(value: Float): Unit = !struct.at8 = value
      def compare_op: SDL_GPUCompareOp = struct._9
      def compare_op_=(value: SDL_GPUCompareOp): Unit = !struct.at9 = value
      def min_lod: Float = struct._10
      def min_lod_=(value: Float): Unit = !struct.at10 = value
      def max_lod: Float = struct._11
      def max_lod_=(value: Float): Unit = !struct.at11 = value
      def enable_anisotropy: Boolean = struct._12
      def enable_anisotropy_=(value: Boolean): Unit = !struct.at12 = value
      def enable_compare: Boolean = struct._13
      def enable_compare_=(value: Boolean): Unit = !struct.at13 = value
      def padding1: Uint8 = struct._14
      def padding1_=(value: Uint8): Unit = !struct.at14 = value
      def padding2: Uint8 = struct._15
      def padding2_=(value: Uint8): Unit = !struct.at15 = value
      def props: SDL_PropertiesID = struct._16
      def props_=(value: SDL_PropertiesID): Unit = !struct.at16 = value
    end extension
  end SDL_GPUSamplerCreateInfo

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUShader = CStruct0
  object SDL_GPUShader:
    given _tag: Tag[SDL_GPUShader] = Tag.materializeCStruct0Tag

  /** A structure specifying code and metadata for creating a shader object.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUShaderCreateInfo = CStruct10[
    size_t,
    Ptr[Uint8],
    CString,
    SDL_GPUShaderFormat,
    SDL_GPUShaderStage,
    Uint32,
    Uint32,
    Uint32,
    Uint32,
    SDL_PropertiesID
  ]
  object SDL_GPUShaderCreateInfo:
    given _tag: Tag[SDL_GPUShaderCreateInfo] = Tag.materializeCStruct10Tag[
      size_t,
      Ptr[Uint8],
      CString,
      SDL_GPUShaderFormat,
      SDL_GPUShaderStage,
      Uint32,
      Uint32,
      Uint32,
      Uint32,
      SDL_PropertiesID
    ]
    def apply()(using Zone): Ptr[SDL_GPUShaderCreateInfo] =
      scala.scalanative.unsafe.alloc[SDL_GPUShaderCreateInfo](1)
    def apply(
        code_size: size_t,
        code: Ptr[Uint8],
        entrypoint: CString,
        format: SDL_GPUShaderFormat,
        stage: SDL_GPUShaderStage,
        num_samplers: Uint32,
        num_storage_textures: Uint32,
        num_storage_buffers: Uint32,
        num_uniform_buffers: Uint32,
        props: SDL_PropertiesID
    )(using Zone): Ptr[SDL_GPUShaderCreateInfo] =
      val ____ptr = apply()
      (!____ptr).code_size = code_size
      (!____ptr).code = code
      (!____ptr).entrypoint = entrypoint
      (!____ptr).format = format
      (!____ptr).stage = stage
      (!____ptr).num_samplers = num_samplers
      (!____ptr).num_storage_textures = num_storage_textures
      (!____ptr).num_storage_buffers = num_storage_buffers
      (!____ptr).num_uniform_buffers = num_uniform_buffers
      (!____ptr).props = props
      ____ptr
    end apply
    extension (struct: SDL_GPUShaderCreateInfo)
      def code_size: size_t = struct._1
      def code_size_=(value: size_t): Unit = !struct.at1 = value
      def code: Ptr[Uint8] = struct._2
      def code_=(value: Ptr[Uint8]): Unit = !struct.at2 = value
      def entrypoint: CString = struct._3
      def entrypoint_=(value: CString): Unit = !struct.at3 = value
      def format: SDL_GPUShaderFormat = struct._4
      def format_=(value: SDL_GPUShaderFormat): Unit = !struct.at4 = value
      def stage: SDL_GPUShaderStage = struct._5
      def stage_=(value: SDL_GPUShaderStage): Unit = !struct.at5 = value
      def num_samplers: Uint32 = struct._6
      def num_samplers_=(value: Uint32): Unit = !struct.at6 = value
      def num_storage_textures: Uint32 = struct._7
      def num_storage_textures_=(value: Uint32): Unit = !struct.at7 = value
      def num_storage_buffers: Uint32 = struct._8
      def num_storage_buffers_=(value: Uint32): Unit = !struct.at8 = value
      def num_uniform_buffers: Uint32 = struct._9
      def num_uniform_buffers_=(value: Uint32): Unit = !struct.at9 = value
      def props: SDL_PropertiesID = struct._10
      def props_=(value: SDL_PropertiesID): Unit = !struct.at10 = value
    end extension
  end SDL_GPUShaderCreateInfo

  /** A structure specifying the stencil operation state of a graphics pipeline.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUStencilOpState = CStruct4[
    SDL_GPUStencilOp,
    SDL_GPUStencilOp,
    SDL_GPUStencilOp,
    SDL_GPUCompareOp
  ]
  object SDL_GPUStencilOpState:
    given _tag: Tag[SDL_GPUStencilOpState] = Tag.materializeCStruct4Tag[
      SDL_GPUStencilOp,
      SDL_GPUStencilOp,
      SDL_GPUStencilOp,
      SDL_GPUCompareOp
    ]
    def apply()(using Zone): Ptr[SDL_GPUStencilOpState] =
      scala.scalanative.unsafe.alloc[SDL_GPUStencilOpState](1)
    def apply(
        fail_op: SDL_GPUStencilOp,
        pass_op: SDL_GPUStencilOp,
        depth_fail_op: SDL_GPUStencilOp,
        compare_op: SDL_GPUCompareOp
    )(using Zone): Ptr[SDL_GPUStencilOpState] =
      val ____ptr = apply()
      (!____ptr).fail_op = fail_op
      (!____ptr).pass_op = pass_op
      (!____ptr).depth_fail_op = depth_fail_op
      (!____ptr).compare_op = compare_op
      ____ptr
    end apply
    extension (struct: SDL_GPUStencilOpState)
      def fail_op: SDL_GPUStencilOp = struct._1
      def fail_op_=(value: SDL_GPUStencilOp): Unit = !struct.at1 = value
      def pass_op: SDL_GPUStencilOp = struct._2
      def pass_op_=(value: SDL_GPUStencilOp): Unit = !struct.at2 = value
      def depth_fail_op: SDL_GPUStencilOp = struct._3
      def depth_fail_op_=(value: SDL_GPUStencilOp): Unit = !struct.at3 = value
      def compare_op: SDL_GPUCompareOp = struct._4
      def compare_op_=(value: SDL_GPUCompareOp): Unit = !struct.at4 = value
    end extension
  end SDL_GPUStencilOpState

  /** A structure specifying parameters related to binding buffers in a compute
    * pass.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUStorageBufferReadWriteBinding =
    CStruct5[Ptr[SDL_GPUBuffer], Boolean, Uint8, Uint8, Uint8]
  object SDL_GPUStorageBufferReadWriteBinding:
    given _tag: Tag[SDL_GPUStorageBufferReadWriteBinding] = Tag
      .materializeCStruct5Tag[Ptr[SDL_GPUBuffer], Boolean, Uint8, Uint8, Uint8]
    def apply()(using Zone): Ptr[SDL_GPUStorageBufferReadWriteBinding] =
      scala.scalanative.unsafe.alloc[SDL_GPUStorageBufferReadWriteBinding](1)
    def apply(
        buffer: Ptr[SDL_GPUBuffer],
        cycle: Boolean,
        padding1: Uint8,
        padding2: Uint8,
        padding3: Uint8
    )(using Zone): Ptr[SDL_GPUStorageBufferReadWriteBinding] =
      val ____ptr = apply()
      (!____ptr).buffer = buffer
      (!____ptr).cycle = cycle
      (!____ptr).padding1 = padding1
      (!____ptr).padding2 = padding2
      (!____ptr).padding3 = padding3
      ____ptr
    end apply
    extension (struct: SDL_GPUStorageBufferReadWriteBinding)
      def buffer: Ptr[SDL_GPUBuffer] = struct._1
      def buffer_=(value: Ptr[SDL_GPUBuffer]): Unit = !struct.at1 = value
      def cycle: Boolean = struct._2
      def cycle_=(value: Boolean): Unit = !struct.at2 = value
      def padding1: Uint8 = struct._3
      def padding1_=(value: Uint8): Unit = !struct.at3 = value
      def padding2: Uint8 = struct._4
      def padding2_=(value: Uint8): Unit = !struct.at4 = value
      def padding3: Uint8 = struct._5
      def padding3_=(value: Uint8): Unit = !struct.at5 = value
    end extension
  end SDL_GPUStorageBufferReadWriteBinding

  /** A structure specifying parameters related to binding textures in a compute
    * pass.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUStorageTextureReadWriteBinding =
    CStruct7[Ptr[SDL_GPUTexture], Uint32, Uint32, Boolean, Uint8, Uint8, Uint8]
  object SDL_GPUStorageTextureReadWriteBinding:
    given _tag: Tag[SDL_GPUStorageTextureReadWriteBinding] =
      Tag.materializeCStruct7Tag[Ptr[
        SDL_GPUTexture
      ], Uint32, Uint32, Boolean, Uint8, Uint8, Uint8]
    def apply()(using Zone): Ptr[SDL_GPUStorageTextureReadWriteBinding] =
      scala.scalanative.unsafe.alloc[SDL_GPUStorageTextureReadWriteBinding](1)
    def apply(
        texture: Ptr[SDL_GPUTexture],
        mip_level: Uint32,
        layer: Uint32,
        cycle: Boolean,
        padding1: Uint8,
        padding2: Uint8,
        padding3: Uint8
    )(using Zone): Ptr[SDL_GPUStorageTextureReadWriteBinding] =
      val ____ptr = apply()
      (!____ptr).texture = texture
      (!____ptr).mip_level = mip_level
      (!____ptr).layer = layer
      (!____ptr).cycle = cycle
      (!____ptr).padding1 = padding1
      (!____ptr).padding2 = padding2
      (!____ptr).padding3 = padding3
      ____ptr
    end apply
    extension (struct: SDL_GPUStorageTextureReadWriteBinding)
      def texture: Ptr[SDL_GPUTexture] = struct._1
      def texture_=(value: Ptr[SDL_GPUTexture]): Unit = !struct.at1 = value
      def mip_level: Uint32 = struct._2
      def mip_level_=(value: Uint32): Unit = !struct.at2 = value
      def layer: Uint32 = struct._3
      def layer_=(value: Uint32): Unit = !struct.at3 = value
      def cycle: Boolean = struct._4
      def cycle_=(value: Boolean): Unit = !struct.at4 = value
      def padding1: Uint8 = struct._5
      def padding1_=(value: Uint8): Unit = !struct.at5 = value
      def padding2: Uint8 = struct._6
      def padding2_=(value: Uint8): Unit = !struct.at6 = value
      def padding3: Uint8 = struct._7
      def padding3_=(value: Uint8): Unit = !struct.at7 = value
    end extension
  end SDL_GPUStorageTextureReadWriteBinding

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUTexture = CStruct0
  object SDL_GPUTexture:
    given _tag: Tag[SDL_GPUTexture] = Tag.materializeCStruct0Tag

  /** A structure specifying the parameters of a texture.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUTextureCreateInfo = CStruct9[
    SDL_GPUTextureType,
    SDL_GPUTextureFormat,
    SDL_GPUTextureUsageFlags,
    Uint32,
    Uint32,
    Uint32,
    Uint32,
    SDL_GPUSampleCount,
    SDL_PropertiesID
  ]
  object SDL_GPUTextureCreateInfo:
    given _tag: Tag[SDL_GPUTextureCreateInfo] = Tag.materializeCStruct9Tag[
      SDL_GPUTextureType,
      SDL_GPUTextureFormat,
      SDL_GPUTextureUsageFlags,
      Uint32,
      Uint32,
      Uint32,
      Uint32,
      SDL_GPUSampleCount,
      SDL_PropertiesID
    ]
    def apply()(using Zone): Ptr[SDL_GPUTextureCreateInfo] =
      scala.scalanative.unsafe.alloc[SDL_GPUTextureCreateInfo](1)
    def apply(
        `type`: SDL_GPUTextureType,
        format: SDL_GPUTextureFormat,
        usage: SDL_GPUTextureUsageFlags,
        width: Uint32,
        height: Uint32,
        layer_count_or_depth: Uint32,
        num_levels: Uint32,
        sample_count: SDL_GPUSampleCount,
        props: SDL_PropertiesID
    )(using Zone): Ptr[SDL_GPUTextureCreateInfo] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).format = format
      (!____ptr).usage = usage
      (!____ptr).width = width
      (!____ptr).height = height
      (!____ptr).layer_count_or_depth = layer_count_or_depth
      (!____ptr).num_levels = num_levels
      (!____ptr).sample_count = sample_count
      (!____ptr).props = props
      ____ptr
    end apply
    extension (struct: SDL_GPUTextureCreateInfo)
      def `type`: SDL_GPUTextureType = struct._1
      def type_=(value: SDL_GPUTextureType): Unit = !struct.at1 = value
      def format: SDL_GPUTextureFormat = struct._2
      def format_=(value: SDL_GPUTextureFormat): Unit = !struct.at2 = value
      def usage: SDL_GPUTextureUsageFlags = struct._3
      def usage_=(value: SDL_GPUTextureUsageFlags): Unit = !struct.at3 = value
      def width: Uint32 = struct._4
      def width_=(value: Uint32): Unit = !struct.at4 = value
      def height: Uint32 = struct._5
      def height_=(value: Uint32): Unit = !struct.at5 = value
      def layer_count_or_depth: Uint32 = struct._6
      def layer_count_or_depth_=(value: Uint32): Unit = !struct.at6 = value
      def num_levels: Uint32 = struct._7
      def num_levels_=(value: Uint32): Unit = !struct.at7 = value
      def sample_count: SDL_GPUSampleCount = struct._8
      def sample_count_=(value: SDL_GPUSampleCount): Unit = !struct.at8 = value
      def props: SDL_PropertiesID = struct._9
      def props_=(value: SDL_PropertiesID): Unit = !struct.at9 = value
    end extension
  end SDL_GPUTextureCreateInfo

  /** A structure specifying a location in a texture.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUTextureLocation =
    CStruct6[Ptr[SDL_GPUTexture], Uint32, Uint32, Uint32, Uint32, Uint32]
  object SDL_GPUTextureLocation:
    given _tag: Tag[SDL_GPUTextureLocation] = Tag.materializeCStruct6Tag[Ptr[
      SDL_GPUTexture
    ], Uint32, Uint32, Uint32, Uint32, Uint32]
    def apply()(using Zone): Ptr[SDL_GPUTextureLocation] =
      scala.scalanative.unsafe.alloc[SDL_GPUTextureLocation](1)
    def apply(
        texture: Ptr[SDL_GPUTexture],
        mip_level: Uint32,
        layer: Uint32,
        x: Uint32,
        y: Uint32,
        z: Uint32
    )(using Zone): Ptr[SDL_GPUTextureLocation] =
      val ____ptr = apply()
      (!____ptr).texture = texture
      (!____ptr).mip_level = mip_level
      (!____ptr).layer = layer
      (!____ptr).x = x
      (!____ptr).y = y
      (!____ptr).z = z
      ____ptr
    end apply
    extension (struct: SDL_GPUTextureLocation)
      def texture: Ptr[SDL_GPUTexture] = struct._1
      def texture_=(value: Ptr[SDL_GPUTexture]): Unit = !struct.at1 = value
      def mip_level: Uint32 = struct._2
      def mip_level_=(value: Uint32): Unit = !struct.at2 = value
      def layer: Uint32 = struct._3
      def layer_=(value: Uint32): Unit = !struct.at3 = value
      def x: Uint32 = struct._4
      def x_=(value: Uint32): Unit = !struct.at4 = value
      def y: Uint32 = struct._5
      def y_=(value: Uint32): Unit = !struct.at5 = value
      def z: Uint32 = struct._6
      def z_=(value: Uint32): Unit = !struct.at6 = value
    end extension
  end SDL_GPUTextureLocation

  /** A structure specifying a region of a texture.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUTextureRegion = CStruct9[Ptr[
    SDL_GPUTexture
  ], Uint32, Uint32, Uint32, Uint32, Uint32, Uint32, Uint32, Uint32]
  object SDL_GPUTextureRegion:
    given _tag: Tag[SDL_GPUTextureRegion] = Tag.materializeCStruct9Tag[Ptr[
      SDL_GPUTexture
    ], Uint32, Uint32, Uint32, Uint32, Uint32, Uint32, Uint32, Uint32]
    def apply()(using Zone): Ptr[SDL_GPUTextureRegion] =
      scala.scalanative.unsafe.alloc[SDL_GPUTextureRegion](1)
    def apply(
        texture: Ptr[SDL_GPUTexture],
        mip_level: Uint32,
        layer: Uint32,
        x: Uint32,
        y: Uint32,
        z: Uint32,
        w: Uint32,
        h: Uint32,
        d: Uint32
    )(using Zone): Ptr[SDL_GPUTextureRegion] =
      val ____ptr = apply()
      (!____ptr).texture = texture
      (!____ptr).mip_level = mip_level
      (!____ptr).layer = layer
      (!____ptr).x = x
      (!____ptr).y = y
      (!____ptr).z = z
      (!____ptr).w = w
      (!____ptr).h = h
      (!____ptr).d = d
      ____ptr
    end apply
    extension (struct: SDL_GPUTextureRegion)
      def texture: Ptr[SDL_GPUTexture] = struct._1
      def texture_=(value: Ptr[SDL_GPUTexture]): Unit = !struct.at1 = value
      def mip_level: Uint32 = struct._2
      def mip_level_=(value: Uint32): Unit = !struct.at2 = value
      def layer: Uint32 = struct._3
      def layer_=(value: Uint32): Unit = !struct.at3 = value
      def x: Uint32 = struct._4
      def x_=(value: Uint32): Unit = !struct.at4 = value
      def y: Uint32 = struct._5
      def y_=(value: Uint32): Unit = !struct.at5 = value
      def z: Uint32 = struct._6
      def z_=(value: Uint32): Unit = !struct.at6 = value
      def w: Uint32 = struct._7
      def w_=(value: Uint32): Unit = !struct.at7 = value
      def h: Uint32 = struct._8
      def h_=(value: Uint32): Unit = !struct.at8 = value
      def d: Uint32 = struct._9
      def d_=(value: Uint32): Unit = !struct.at9 = value
    end extension
  end SDL_GPUTextureRegion

  /** A structure specifying parameters in a sampler binding call.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUTextureSamplerBinding =
    CStruct2[Ptr[SDL_GPUTexture], Ptr[SDL_GPUSampler]]
  object SDL_GPUTextureSamplerBinding:
    given _tag: Tag[SDL_GPUTextureSamplerBinding] =
      Tag.materializeCStruct2Tag[Ptr[SDL_GPUTexture], Ptr[SDL_GPUSampler]]
    def apply()(using Zone): Ptr[SDL_GPUTextureSamplerBinding] =
      scala.scalanative.unsafe.alloc[SDL_GPUTextureSamplerBinding](1)
    def apply(texture: Ptr[SDL_GPUTexture], sampler: Ptr[SDL_GPUSampler])(using
        Zone
    ): Ptr[SDL_GPUTextureSamplerBinding] =
      val ____ptr = apply()
      (!____ptr).texture = texture
      (!____ptr).sampler = sampler
      ____ptr
    end apply
    extension (struct: SDL_GPUTextureSamplerBinding)
      def texture: Ptr[SDL_GPUTexture] = struct._1
      def texture_=(value: Ptr[SDL_GPUTexture]): Unit = !struct.at1 = value
      def sampler: Ptr[SDL_GPUSampler] = struct._2
      def sampler_=(value: Ptr[SDL_GPUSampler]): Unit = !struct.at2 = value
    end extension
  end SDL_GPUTextureSamplerBinding

  /** A structure specifying parameters related to transferring data to or from
    * a texture.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUTextureTransferInfo =
    CStruct4[Ptr[SDL_GPUTransferBuffer], Uint32, Uint32, Uint32]
  object SDL_GPUTextureTransferInfo:
    given _tag: Tag[SDL_GPUTextureTransferInfo] =
      Tag.materializeCStruct4Tag[Ptr[
        SDL_GPUTransferBuffer
      ], Uint32, Uint32, Uint32]
    def apply()(using Zone): Ptr[SDL_GPUTextureTransferInfo] =
      scala.scalanative.unsafe.alloc[SDL_GPUTextureTransferInfo](1)
    def apply(
        transfer_buffer: Ptr[SDL_GPUTransferBuffer],
        offset: Uint32,
        pixels_per_row: Uint32,
        rows_per_layer: Uint32
    )(using Zone): Ptr[SDL_GPUTextureTransferInfo] =
      val ____ptr = apply()
      (!____ptr).transfer_buffer = transfer_buffer
      (!____ptr).offset = offset
      (!____ptr).pixels_per_row = pixels_per_row
      (!____ptr).rows_per_layer = rows_per_layer
      ____ptr
    end apply
    extension (struct: SDL_GPUTextureTransferInfo)
      def transfer_buffer: Ptr[SDL_GPUTransferBuffer] = struct._1
      def transfer_buffer_=(value: Ptr[SDL_GPUTransferBuffer]): Unit =
        !struct.at1 = value
      def offset: Uint32 = struct._2
      def offset_=(value: Uint32): Unit = !struct.at2 = value
      def pixels_per_row: Uint32 = struct._3
      def pixels_per_row_=(value: Uint32): Unit = !struct.at3 = value
      def rows_per_layer: Uint32 = struct._4
      def rows_per_layer_=(value: Uint32): Unit = !struct.at4 = value
    end extension
  end SDL_GPUTextureTransferInfo

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUTransferBuffer = CStruct0
  object SDL_GPUTransferBuffer:
    given _tag: Tag[SDL_GPUTransferBuffer] = Tag.materializeCStruct0Tag

  /** A structure specifying the parameters of a transfer buffer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUTransferBufferCreateInfo =
    CStruct3[SDL_GPUTransferBufferUsage, Uint32, SDL_PropertiesID]
  object SDL_GPUTransferBufferCreateInfo:
    given _tag: Tag[SDL_GPUTransferBufferCreateInfo] =
      Tag.materializeCStruct3Tag[
        SDL_GPUTransferBufferUsage,
        Uint32,
        SDL_PropertiesID
      ]
    def apply()(using Zone): Ptr[SDL_GPUTransferBufferCreateInfo] =
      scala.scalanative.unsafe.alloc[SDL_GPUTransferBufferCreateInfo](1)
    def apply(
        usage: SDL_GPUTransferBufferUsage,
        size: Uint32,
        props: SDL_PropertiesID
    )(using Zone): Ptr[SDL_GPUTransferBufferCreateInfo] =
      val ____ptr = apply()
      (!____ptr).usage = usage
      (!____ptr).size = size
      (!____ptr).props = props
      ____ptr
    end apply
    extension (struct: SDL_GPUTransferBufferCreateInfo)
      def usage: SDL_GPUTransferBufferUsage = struct._1
      def usage_=(value: SDL_GPUTransferBufferUsage): Unit = !struct.at1 = value
      def size: Uint32 = struct._2
      def size_=(value: Uint32): Unit = !struct.at2 = value
      def props: SDL_PropertiesID = struct._3
      def props_=(value: SDL_PropertiesID): Unit = !struct.at3 = value
    end extension
  end SDL_GPUTransferBufferCreateInfo

  /** A structure specifying a location in a transfer buffer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUTransferBufferLocation =
    CStruct2[Ptr[SDL_GPUTransferBuffer], Uint32]
  object SDL_GPUTransferBufferLocation:
    given _tag: Tag[SDL_GPUTransferBufferLocation] =
      Tag.materializeCStruct2Tag[Ptr[SDL_GPUTransferBuffer], Uint32]
    def apply()(using Zone): Ptr[SDL_GPUTransferBufferLocation] =
      scala.scalanative.unsafe.alloc[SDL_GPUTransferBufferLocation](1)
    def apply(transfer_buffer: Ptr[SDL_GPUTransferBuffer], offset: Uint32)(using
        Zone
    ): Ptr[SDL_GPUTransferBufferLocation] =
      val ____ptr = apply()
      (!____ptr).transfer_buffer = transfer_buffer
      (!____ptr).offset = offset
      ____ptr
    end apply
    extension (struct: SDL_GPUTransferBufferLocation)
      def transfer_buffer: Ptr[SDL_GPUTransferBuffer] = struct._1
      def transfer_buffer_=(value: Ptr[SDL_GPUTransferBuffer]): Unit =
        !struct.at1 = value
      def offset: Uint32 = struct._2
      def offset_=(value: Uint32): Unit = !struct.at2 = value
    end extension
  end SDL_GPUTransferBufferLocation

  /** A structure specifying a vertex attribute.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUVertexAttribute =
    CStruct4[Uint32, Uint32, SDL_GPUVertexElementFormat, Uint32]
  object SDL_GPUVertexAttribute:
    given _tag: Tag[SDL_GPUVertexAttribute] = Tag.materializeCStruct4Tag[
      Uint32,
      Uint32,
      SDL_GPUVertexElementFormat,
      Uint32
    ]
    def apply()(using Zone): Ptr[SDL_GPUVertexAttribute] =
      scala.scalanative.unsafe.alloc[SDL_GPUVertexAttribute](1)
    def apply(
        location: Uint32,
        buffer_slot: Uint32,
        format: SDL_GPUVertexElementFormat,
        offset: Uint32
    )(using Zone): Ptr[SDL_GPUVertexAttribute] =
      val ____ptr = apply()
      (!____ptr).location = location
      (!____ptr).buffer_slot = buffer_slot
      (!____ptr).format = format
      (!____ptr).offset = offset
      ____ptr
    end apply
    extension (struct: SDL_GPUVertexAttribute)
      def location: Uint32 = struct._1
      def location_=(value: Uint32): Unit = !struct.at1 = value
      def buffer_slot: Uint32 = struct._2
      def buffer_slot_=(value: Uint32): Unit = !struct.at2 = value
      def format: SDL_GPUVertexElementFormat = struct._3
      def format_=(value: SDL_GPUVertexElementFormat): Unit = !struct.at3 =
        value
      def offset: Uint32 = struct._4
      def offset_=(value: Uint32): Unit = !struct.at4 = value
    end extension
  end SDL_GPUVertexAttribute

  /** A structure specifying the parameters of vertex buffers used in a graphics
    * pipeline.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUVertexBufferDescription =
    CStruct4[Uint32, Uint32, SDL_GPUVertexInputRate, Uint32]
  object SDL_GPUVertexBufferDescription:
    given _tag: Tag[SDL_GPUVertexBufferDescription] =
      Tag.materializeCStruct4Tag[Uint32, Uint32, SDL_GPUVertexInputRate, Uint32]
    def apply()(using Zone): Ptr[SDL_GPUVertexBufferDescription] =
      scala.scalanative.unsafe.alloc[SDL_GPUVertexBufferDescription](1)
    def apply(
        slot: Uint32,
        pitch: Uint32,
        input_rate: SDL_GPUVertexInputRate,
        instance_step_rate: Uint32
    )(using Zone): Ptr[SDL_GPUVertexBufferDescription] =
      val ____ptr = apply()
      (!____ptr).slot = slot
      (!____ptr).pitch = pitch
      (!____ptr).input_rate = input_rate
      (!____ptr).instance_step_rate = instance_step_rate
      ____ptr
    end apply
    extension (struct: SDL_GPUVertexBufferDescription)
      def slot: Uint32 = struct._1
      def slot_=(value: Uint32): Unit = !struct.at1 = value
      def pitch: Uint32 = struct._2
      def pitch_=(value: Uint32): Unit = !struct.at2 = value
      def input_rate: SDL_GPUVertexInputRate = struct._3
      def input_rate_=(value: SDL_GPUVertexInputRate): Unit = !struct.at3 =
        value
      def instance_step_rate: Uint32 = struct._4
      def instance_step_rate_=(value: Uint32): Unit = !struct.at4 = value
    end extension
  end SDL_GPUVertexBufferDescription

  /** A structure specifying the parameters of a graphics pipeline vertex input
    * state.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUVertexInputState = CStruct4[Ptr[
    SDL_GPUVertexBufferDescription
  ], Uint32, Ptr[SDL_GPUVertexAttribute], Uint32]
  object SDL_GPUVertexInputState:
    given _tag: Tag[SDL_GPUVertexInputState] = Tag.materializeCStruct4Tag[Ptr[
      SDL_GPUVertexBufferDescription
    ], Uint32, Ptr[SDL_GPUVertexAttribute], Uint32]
    def apply()(using Zone): Ptr[SDL_GPUVertexInputState] =
      scala.scalanative.unsafe.alloc[SDL_GPUVertexInputState](1)
    def apply(
        vertex_buffer_descriptions: Ptr[SDL_GPUVertexBufferDescription],
        num_vertex_buffers: Uint32,
        vertex_attributes: Ptr[SDL_GPUVertexAttribute],
        num_vertex_attributes: Uint32
    )(using Zone): Ptr[SDL_GPUVertexInputState] =
      val ____ptr = apply()
      (!____ptr).vertex_buffer_descriptions = vertex_buffer_descriptions
      (!____ptr).num_vertex_buffers = num_vertex_buffers
      (!____ptr).vertex_attributes = vertex_attributes
      (!____ptr).num_vertex_attributes = num_vertex_attributes
      ____ptr
    end apply
    extension (struct: SDL_GPUVertexInputState)
      def vertex_buffer_descriptions: Ptr[SDL_GPUVertexBufferDescription] =
        struct._1
      def vertex_buffer_descriptions_=(
          value: Ptr[SDL_GPUVertexBufferDescription]
      ): Unit = !struct.at1 = value
      def num_vertex_buffers: Uint32 = struct._2
      def num_vertex_buffers_=(value: Uint32): Unit = !struct.at2 = value
      def vertex_attributes: Ptr[SDL_GPUVertexAttribute] = struct._3
      def vertex_attributes_=(value: Ptr[SDL_GPUVertexAttribute]): Unit =
        !struct.at3 = value
      def num_vertex_attributes: Uint32 = struct._4
      def num_vertex_attributes_=(value: Uint32): Unit = !struct.at4 = value
    end extension
  end SDL_GPUVertexInputState

  /** A structure specifying a viewport.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  opaque type SDL_GPUViewport =
    CStruct6[Float, Float, Float, Float, Float, Float]
  object SDL_GPUViewport:
    given _tag: Tag[SDL_GPUViewport] =
      Tag.materializeCStruct6Tag[Float, Float, Float, Float, Float, Float]
    def apply()(using Zone): Ptr[SDL_GPUViewport] =
      scala.scalanative.unsafe.alloc[SDL_GPUViewport](1)
    def apply(
        x: Float,
        y: Float,
        w: Float,
        h: Float,
        min_depth: Float,
        max_depth: Float
    )(using Zone): Ptr[SDL_GPUViewport] =
      val ____ptr = apply()
      (!____ptr).x = x
      (!____ptr).y = y
      (!____ptr).w = w
      (!____ptr).h = h
      (!____ptr).min_depth = min_depth
      (!____ptr).max_depth = max_depth
      ____ptr
    end apply
    extension (struct: SDL_GPUViewport)
      def x: Float = struct._1
      def x_=(value: Float): Unit = !struct.at1 = value
      def y: Float = struct._2
      def y_=(value: Float): Unit = !struct.at2 = value
      def w: Float = struct._3
      def w_=(value: Float): Unit = !struct.at3 = value
      def h: Float = struct._4
      def h_=(value: Float): Unit = !struct.at4 = value
      def min_depth: Float = struct._5
      def min_depth_=(value: Float): Unit = !struct.at5 = value
      def max_depth: Float = struct._6
      def max_depth_=(value: Float): Unit = !struct.at6 = value
    end extension
  end SDL_GPUViewport

  /** An SDL_GUID is a 128-bit identifier for an input device that identifies
    * that device across runs of SDL programs on the same platform.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_guid.h
    */
  opaque type SDL_GUID = CStruct1[CArray[Uint8, Nat.Digit2[Nat._1, Nat._6]]]
  object SDL_GUID:
    given _tag: Tag[SDL_GUID] =
      Tag.materializeCStruct1Tag[CArray[Uint8, Nat.Digit2[Nat._1, Nat._6]]]
    def apply()(using Zone): Ptr[SDL_GUID] =
      scala.scalanative.unsafe.alloc[SDL_GUID](1)
    def apply(data: CArray[Uint8, Nat.Digit2[Nat._1, Nat._6]])(using
        Zone
    ): Ptr[SDL_GUID] =
      val ____ptr = apply()
      (!____ptr).data = data
      ____ptr
    end apply
    extension (struct: SDL_GUID)
      def data: CArray[Uint8, Nat.Digit2[Nat._1, Nat._6]] = struct._1
      def data_=(value: CArray[Uint8, Nat.Digit2[Nat._1, Nat._6]]): Unit =
        !struct.at1 = value
  end SDL_GUID

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  opaque type SDL_Gamepad = CStruct0
  object SDL_Gamepad:
    given _tag: Tag[SDL_Gamepad] = Tag.materializeCStruct0Tag

  /** Gamepad axis motion event structure (event.gaxis.*)
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  opaque type SDL_GamepadAxisEvent = CStruct10[
    SDL_EventType,
    Uint32,
    Uint64,
    SDL_JoystickID,
    Uint8,
    Uint8,
    Uint8,
    Uint8,
    Sint16,
    Uint16
  ]
  object SDL_GamepadAxisEvent:
    given _tag: Tag[SDL_GamepadAxisEvent] = Tag.materializeCStruct10Tag[
      SDL_EventType,
      Uint32,
      Uint64,
      SDL_JoystickID,
      Uint8,
      Uint8,
      Uint8,
      Uint8,
      Sint16,
      Uint16
    ]
    def apply()(using Zone): Ptr[SDL_GamepadAxisEvent] =
      scala.scalanative.unsafe.alloc[SDL_GamepadAxisEvent](1)
    def apply(
        `type`: SDL_EventType,
        reserved: Uint32,
        timestamp: Uint64,
        which: SDL_JoystickID,
        axis: Uint8,
        padding1: Uint8,
        padding2: Uint8,
        padding3: Uint8,
        value: Sint16,
        padding4: Uint16
    )(using Zone): Ptr[SDL_GamepadAxisEvent] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).reserved = reserved
      (!____ptr).timestamp = timestamp
      (!____ptr).which = which
      (!____ptr).axis = axis
      (!____ptr).padding1 = padding1
      (!____ptr).padding2 = padding2
      (!____ptr).padding3 = padding3
      (!____ptr).value = value
      (!____ptr).padding4 = padding4
      ____ptr
    end apply
    extension (struct: SDL_GamepadAxisEvent)
      def `type`: SDL_EventType = struct._1
      def type_=(value: SDL_EventType): Unit = !struct.at1 = value
      def reserved: Uint32 = struct._2
      def reserved_=(value: Uint32): Unit = !struct.at2 = value
      def timestamp: Uint64 = struct._3
      def timestamp_=(value: Uint64): Unit = !struct.at3 = value
      def which: SDL_JoystickID = struct._4
      def which_=(value: SDL_JoystickID): Unit = !struct.at4 = value
      def axis: Uint8 = struct._5
      def axis_=(value: Uint8): Unit = !struct.at5 = value
      def padding1: Uint8 = struct._6
      def padding1_=(value: Uint8): Unit = !struct.at6 = value
      def padding2: Uint8 = struct._7
      def padding2_=(value: Uint8): Unit = !struct.at7 = value
      def padding3: Uint8 = struct._8
      def padding3_=(value: Uint8): Unit = !struct.at8 = value
      def value: Sint16 = struct._9
      def value_=(value: Sint16): Unit = !struct.at9 = value
      def padding4: Uint16 = struct._10
      def padding4_=(value: Uint16): Unit = !struct.at10 = value
    end extension
  end SDL_GamepadAxisEvent

  /** A mapping between one joystick input to a gamepad control.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  opaque type SDL_GamepadBinding = CStruct4[
    SDL_GamepadBindingType,
    SDL_GamepadBinding.Union0,
    SDL_GamepadBindingType,
    SDL_GamepadBinding.Union1
  ]
  object SDL_GamepadBinding:
    /** [bindgen] header:
      * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
      */
    opaque type Union0 = CArray[Byte, Nat.Digit2[Nat._1, Nat._2]]
    object Union0:
      /** [bindgen] header:
        * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
        */
      opaque type Struct0 = CStruct3[CInt, CInt, CInt]
      object Struct0:
        given _tag: Tag[Struct0] = Tag.materializeCStruct3Tag[CInt, CInt, CInt]
        def apply()(using Zone): Ptr[Struct0] =
          scala.scalanative.unsafe.alloc[Struct0](1)
        def apply(axis: CInt, axis_min: CInt, axis_max: CInt)(using
            Zone
        ): Ptr[Struct0] =
          val ____ptr = apply()
          (!____ptr).axis = axis
          (!____ptr).axis_min = axis_min
          (!____ptr).axis_max = axis_max
          ____ptr
        end apply
        extension (struct: Struct0)
          def axis: CInt = struct._1
          def axis_=(value: CInt): Unit = !struct.at1 = value
          def axis_min: CInt = struct._2
          def axis_min_=(value: CInt): Unit = !struct.at2 = value
          def axis_max: CInt = struct._3
          def axis_max_=(value: CInt): Unit = !struct.at3 = value
        end extension
      end Struct0

      /** [bindgen] header:
        * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
        */
      opaque type Struct1 = CStruct2[CInt, CInt]
      object Struct1:
        given _tag: Tag[Struct1] = Tag.materializeCStruct2Tag[CInt, CInt]
        def apply()(using Zone): Ptr[Struct1] =
          scala.scalanative.unsafe.alloc[Struct1](1)
        def apply(hat: CInt, hat_mask: CInt)(using Zone): Ptr[Struct1] =
          val ____ptr = apply()
          (!____ptr).hat = hat
          (!____ptr).hat_mask = hat_mask
          ____ptr
        end apply
        extension (struct: Struct1)
          def hat: CInt = struct._1
          def hat_=(value: CInt): Unit = !struct.at1 = value
          def hat_mask: CInt = struct._2
          def hat_mask_=(value: CInt): Unit = !struct.at2 = value
        end extension
      end Struct1
      given _tag: Tag[Union0] = Tag.CArray[CChar, Nat.Digit2[Nat._1, Nat._2]](
        Tag.Byte,
        Tag.Digit2[Nat._1, Nat._2](Tag.Nat1, Tag.Nat2)
      )
      def apply()(using Zone): Ptr[Union0] =
        val ___ptr = alloc[Union0](1)
        ___ptr
      @scala.annotation.targetName("apply_button")
      def apply(button: CInt)(using Zone): Ptr[Union0] =
        val ___ptr = alloc[Union0](1)
        val un = !___ptr
        un.at(0).asInstanceOf[Ptr[CInt]].update(0, button)
        ___ptr
      end apply
      @scala.annotation.targetName("apply_axis")
      def apply(axis: SDL_GamepadBinding.Union0.Struct0)(using
          Zone
      ): Ptr[Union0] =
        val ___ptr = alloc[Union0](1)
        val un = !___ptr
        un.at(0)
          .asInstanceOf[Ptr[SDL_GamepadBinding.Union0.Struct0]]
          .update(0, axis)
        ___ptr
      end apply
      @scala.annotation.targetName("apply_hat")
      def apply(hat: SDL_GamepadBinding.Union0.Struct1)(using
          Zone
      ): Ptr[Union0] =
        val ___ptr = alloc[Union0](1)
        val un = !___ptr
        un.at(0)
          .asInstanceOf[Ptr[SDL_GamepadBinding.Union0.Struct1]]
          .update(0, hat)
        ___ptr
      end apply
      extension (struct: Union0)
        def button: CInt = !struct.at(0).asInstanceOf[Ptr[CInt]]
        def button_=(value: CInt): Unit =
          !struct.at(0).asInstanceOf[Ptr[CInt]] = value
        def axis: SDL_GamepadBinding.Union0.Struct0 =
          !struct.at(0).asInstanceOf[Ptr[SDL_GamepadBinding.Union0.Struct0]]
        def axis_=(value: SDL_GamepadBinding.Union0.Struct0): Unit =
          !struct.at(0).asInstanceOf[Ptr[SDL_GamepadBinding.Union0.Struct0]] =
            value
        def hat: SDL_GamepadBinding.Union0.Struct1 =
          !struct.at(0).asInstanceOf[Ptr[SDL_GamepadBinding.Union0.Struct1]]
        def hat_=(value: SDL_GamepadBinding.Union0.Struct1): Unit =
          !struct.at(0).asInstanceOf[Ptr[SDL_GamepadBinding.Union0.Struct1]] =
            value
      end extension
    end Union0

    /** [bindgen] header:
      * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
      */
    opaque type Union1 = CArray[Byte, Nat.Digit2[Nat._1, Nat._2]]
    object Union1:
      /** [bindgen] header:
        * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
        */
      opaque type Struct0 = CStruct3[SDL_GamepadAxis, CInt, CInt]
      object Struct0:
        given _tag: Tag[Struct0] =
          Tag.materializeCStruct3Tag[SDL_GamepadAxis, CInt, CInt]
        def apply()(using Zone): Ptr[Struct0] =
          scala.scalanative.unsafe.alloc[Struct0](1)
        def apply(axis: SDL_GamepadAxis, axis_min: CInt, axis_max: CInt)(using
            Zone
        ): Ptr[Struct0] =
          val ____ptr = apply()
          (!____ptr).axis = axis
          (!____ptr).axis_min = axis_min
          (!____ptr).axis_max = axis_max
          ____ptr
        end apply
        extension (struct: Struct0)
          def axis: SDL_GamepadAxis = struct._1
          def axis_=(value: SDL_GamepadAxis): Unit = !struct.at1 = value
          def axis_min: CInt = struct._2
          def axis_min_=(value: CInt): Unit = !struct.at2 = value
          def axis_max: CInt = struct._3
          def axis_max_=(value: CInt): Unit = !struct.at3 = value
        end extension
      end Struct0
      given _tag: Tag[Union1] = Tag.CArray[CChar, Nat.Digit2[Nat._1, Nat._2]](
        Tag.Byte,
        Tag.Digit2[Nat._1, Nat._2](Tag.Nat1, Tag.Nat2)
      )
      def apply()(using Zone): Ptr[Union1] =
        val ___ptr = alloc[Union1](1)
        ___ptr
      @scala.annotation.targetName("apply_button")
      def apply(button: SDL_GamepadButton)(using Zone): Ptr[Union1] =
        val ___ptr = alloc[Union1](1)
        val un = !___ptr
        un.at(0).asInstanceOf[Ptr[SDL_GamepadButton]].update(0, button)
        ___ptr
      end apply
      @scala.annotation.targetName("apply_axis")
      def apply(axis: SDL_GamepadBinding.Union1.Struct0)(using
          Zone
      ): Ptr[Union1] =
        val ___ptr = alloc[Union1](1)
        val un = !___ptr
        un.at(0)
          .asInstanceOf[Ptr[SDL_GamepadBinding.Union1.Struct0]]
          .update(0, axis)
        ___ptr
      end apply
      extension (struct: Union1)
        def button: SDL_GamepadButton =
          !struct.at(0).asInstanceOf[Ptr[SDL_GamepadButton]]
        def button_=(value: SDL_GamepadButton): Unit =
          !struct.at(0).asInstanceOf[Ptr[SDL_GamepadButton]] = value
        def axis: SDL_GamepadBinding.Union1.Struct0 =
          !struct.at(0).asInstanceOf[Ptr[SDL_GamepadBinding.Union1.Struct0]]
        def axis_=(value: SDL_GamepadBinding.Union1.Struct0): Unit =
          !struct.at(0).asInstanceOf[Ptr[SDL_GamepadBinding.Union1.Struct0]] =
            value
      end extension
    end Union1
    given _tag: Tag[SDL_GamepadBinding] = Tag.materializeCStruct4Tag[
      SDL_GamepadBindingType,
      SDL_GamepadBinding.Union0,
      SDL_GamepadBindingType,
      SDL_GamepadBinding.Union1
    ]
    def apply()(using Zone): Ptr[SDL_GamepadBinding] =
      scala.scalanative.unsafe.alloc[SDL_GamepadBinding](1)
    def apply(
        input_type: SDL_GamepadBindingType,
        input: SDL_GamepadBinding.Union0,
        output_type: SDL_GamepadBindingType,
        output: SDL_GamepadBinding.Union1
    )(using Zone): Ptr[SDL_GamepadBinding] =
      val ____ptr = apply()
      (!____ptr).input_type = input_type
      (!____ptr).input = input
      (!____ptr).output_type = output_type
      (!____ptr).output = output
      ____ptr
    end apply
    extension (struct: SDL_GamepadBinding)
      def input_type: SDL_GamepadBindingType = struct._1
      def input_type_=(value: SDL_GamepadBindingType): Unit = !struct.at1 =
        value
      def input: SDL_GamepadBinding.Union0 = struct._2
      def input_=(value: SDL_GamepadBinding.Union0): Unit = !struct.at2 = value
      def output_type: SDL_GamepadBindingType = struct._3
      def output_type_=(value: SDL_GamepadBindingType): Unit = !struct.at3 =
        value
      def output: SDL_GamepadBinding.Union1 = struct._4
      def output_=(value: SDL_GamepadBinding.Union1): Unit = !struct.at4 = value
    end extension
  end SDL_GamepadBinding

  /** Gamepad button event structure (event.gbutton.*)
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  opaque type SDL_GamepadButtonEvent = CStruct8[
    SDL_EventType,
    Uint32,
    Uint64,
    SDL_JoystickID,
    Uint8,
    Boolean,
    Uint8,
    Uint8
  ]
  object SDL_GamepadButtonEvent:
    given _tag: Tag[SDL_GamepadButtonEvent] = Tag.materializeCStruct8Tag[
      SDL_EventType,
      Uint32,
      Uint64,
      SDL_JoystickID,
      Uint8,
      Boolean,
      Uint8,
      Uint8
    ]
    def apply()(using Zone): Ptr[SDL_GamepadButtonEvent] =
      scala.scalanative.unsafe.alloc[SDL_GamepadButtonEvent](1)
    def apply(
        `type`: SDL_EventType,
        reserved: Uint32,
        timestamp: Uint64,
        which: SDL_JoystickID,
        button: Uint8,
        down: Boolean,
        padding1: Uint8,
        padding2: Uint8
    )(using Zone): Ptr[SDL_GamepadButtonEvent] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).reserved = reserved
      (!____ptr).timestamp = timestamp
      (!____ptr).which = which
      (!____ptr).button = button
      (!____ptr).down = down
      (!____ptr).padding1 = padding1
      (!____ptr).padding2 = padding2
      ____ptr
    end apply
    extension (struct: SDL_GamepadButtonEvent)
      def `type`: SDL_EventType = struct._1
      def type_=(value: SDL_EventType): Unit = !struct.at1 = value
      def reserved: Uint32 = struct._2
      def reserved_=(value: Uint32): Unit = !struct.at2 = value
      def timestamp: Uint64 = struct._3
      def timestamp_=(value: Uint64): Unit = !struct.at3 = value
      def which: SDL_JoystickID = struct._4
      def which_=(value: SDL_JoystickID): Unit = !struct.at4 = value
      def button: Uint8 = struct._5
      def button_=(value: Uint8): Unit = !struct.at5 = value
      def down: Boolean = struct._6
      def down_=(value: Boolean): Unit = !struct.at6 = value
      def padding1: Uint8 = struct._7
      def padding1_=(value: Uint8): Unit = !struct.at7 = value
      def padding2: Uint8 = struct._8
      def padding2_=(value: Uint8): Unit = !struct.at8 = value
    end extension
  end SDL_GamepadButtonEvent

  /** Gamepad device event structure (event.gdevice.*)
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  opaque type SDL_GamepadDeviceEvent =
    CStruct4[SDL_EventType, Uint32, Uint64, SDL_JoystickID]
  object SDL_GamepadDeviceEvent:
    given _tag: Tag[SDL_GamepadDeviceEvent] =
      Tag.materializeCStruct4Tag[SDL_EventType, Uint32, Uint64, SDL_JoystickID]
    def apply()(using Zone): Ptr[SDL_GamepadDeviceEvent] =
      scala.scalanative.unsafe.alloc[SDL_GamepadDeviceEvent](1)
    def apply(
        `type`: SDL_EventType,
        reserved: Uint32,
        timestamp: Uint64,
        which: SDL_JoystickID
    )(using Zone): Ptr[SDL_GamepadDeviceEvent] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).reserved = reserved
      (!____ptr).timestamp = timestamp
      (!____ptr).which = which
      ____ptr
    end apply
    extension (struct: SDL_GamepadDeviceEvent)
      def `type`: SDL_EventType = struct._1
      def type_=(value: SDL_EventType): Unit = !struct.at1 = value
      def reserved: Uint32 = struct._2
      def reserved_=(value: Uint32): Unit = !struct.at2 = value
      def timestamp: Uint64 = struct._3
      def timestamp_=(value: Uint64): Unit = !struct.at3 = value
      def which: SDL_JoystickID = struct._4
      def which_=(value: SDL_JoystickID): Unit = !struct.at4 = value
    end extension
  end SDL_GamepadDeviceEvent

  /** Gamepad sensor event structure (event.gsensor.*)
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  opaque type SDL_GamepadSensorEvent = CStruct7[
    SDL_EventType,
    Uint32,
    Uint64,
    SDL_JoystickID,
    Sint32,
    CArray[Float, Nat._3],
    Uint64
  ]
  object SDL_GamepadSensorEvent:
    given _tag: Tag[SDL_GamepadSensorEvent] = Tag.materializeCStruct7Tag[
      SDL_EventType,
      Uint32,
      Uint64,
      SDL_JoystickID,
      Sint32,
      CArray[Float, Nat._3],
      Uint64
    ]
    def apply()(using Zone): Ptr[SDL_GamepadSensorEvent] =
      scala.scalanative.unsafe.alloc[SDL_GamepadSensorEvent](1)
    def apply(
        `type`: SDL_EventType,
        reserved: Uint32,
        timestamp: Uint64,
        which: SDL_JoystickID,
        sensor: Sint32,
        data: CArray[Float, Nat._3],
        sensor_timestamp: Uint64
    )(using Zone): Ptr[SDL_GamepadSensorEvent] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).reserved = reserved
      (!____ptr).timestamp = timestamp
      (!____ptr).which = which
      (!____ptr).sensor = sensor
      (!____ptr).data = data
      (!____ptr).sensor_timestamp = sensor_timestamp
      ____ptr
    end apply
    extension (struct: SDL_GamepadSensorEvent)
      def `type`: SDL_EventType = struct._1
      def type_=(value: SDL_EventType): Unit = !struct.at1 = value
      def reserved: Uint32 = struct._2
      def reserved_=(value: Uint32): Unit = !struct.at2 = value
      def timestamp: Uint64 = struct._3
      def timestamp_=(value: Uint64): Unit = !struct.at3 = value
      def which: SDL_JoystickID = struct._4
      def which_=(value: SDL_JoystickID): Unit = !struct.at4 = value
      def sensor: Sint32 = struct._5
      def sensor_=(value: Sint32): Unit = !struct.at5 = value
      def data: CArray[Float, Nat._3] = struct._6
      def data_=(value: CArray[Float, Nat._3]): Unit = !struct.at6 = value
      def sensor_timestamp: Uint64 = struct._7
      def sensor_timestamp_=(value: Uint64): Unit = !struct.at7 = value
    end extension
  end SDL_GamepadSensorEvent

  /** Gamepad touchpad event structure (event.gtouchpad.*)
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  opaque type SDL_GamepadTouchpadEvent = CStruct9[
    SDL_EventType,
    Uint32,
    Uint64,
    SDL_JoystickID,
    Sint32,
    Sint32,
    Float,
    Float,
    Float
  ]
  object SDL_GamepadTouchpadEvent:
    given _tag: Tag[SDL_GamepadTouchpadEvent] = Tag.materializeCStruct9Tag[
      SDL_EventType,
      Uint32,
      Uint64,
      SDL_JoystickID,
      Sint32,
      Sint32,
      Float,
      Float,
      Float
    ]
    def apply()(using Zone): Ptr[SDL_GamepadTouchpadEvent] =
      scala.scalanative.unsafe.alloc[SDL_GamepadTouchpadEvent](1)
    def apply(
        `type`: SDL_EventType,
        reserved: Uint32,
        timestamp: Uint64,
        which: SDL_JoystickID,
        touchpad: Sint32,
        finger: Sint32,
        x: Float,
        y: Float,
        pressure: Float
    )(using Zone): Ptr[SDL_GamepadTouchpadEvent] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).reserved = reserved
      (!____ptr).timestamp = timestamp
      (!____ptr).which = which
      (!____ptr).touchpad = touchpad
      (!____ptr).finger = finger
      (!____ptr).x = x
      (!____ptr).y = y
      (!____ptr).pressure = pressure
      ____ptr
    end apply
    extension (struct: SDL_GamepadTouchpadEvent)
      def `type`: SDL_EventType = struct._1
      def type_=(value: SDL_EventType): Unit = !struct.at1 = value
      def reserved: Uint32 = struct._2
      def reserved_=(value: Uint32): Unit = !struct.at2 = value
      def timestamp: Uint64 = struct._3
      def timestamp_=(value: Uint64): Unit = !struct.at3 = value
      def which: SDL_JoystickID = struct._4
      def which_=(value: SDL_JoystickID): Unit = !struct.at4 = value
      def touchpad: Sint32 = struct._5
      def touchpad_=(value: Sint32): Unit = !struct.at5 = value
      def finger: Sint32 = struct._6
      def finger_=(value: Sint32): Unit = !struct.at6 = value
      def x: Float = struct._7
      def x_=(value: Float): Unit = !struct.at7 = value
      def y: Float = struct._8
      def y_=(value: Float): Unit = !struct.at8 = value
      def pressure: Float = struct._9
      def pressure_=(value: Float): Unit = !struct.at9 = value
    end extension
  end SDL_GamepadTouchpadEvent

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  opaque type SDL_Haptic = CStruct0
  object SDL_Haptic:
    given _tag: Tag[SDL_Haptic] = Tag.materializeCStruct0Tag

  /** A structure containing a template for a Condition effect.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  opaque type SDL_HapticCondition = CStruct12[
    Uint16,
    SDL_HapticDirection,
    Uint32,
    Uint16,
    Uint16,
    Uint16,
    CArray[Uint16, Nat._3],
    CArray[Uint16, Nat._3],
    CArray[Sint16, Nat._3],
    CArray[Sint16, Nat._3],
    CArray[Uint16, Nat._3],
    CArray[Sint16, Nat._3]
  ]
  object SDL_HapticCondition:
    given _tag: Tag[SDL_HapticCondition] = Tag.materializeCStruct12Tag[
      Uint16,
      SDL_HapticDirection,
      Uint32,
      Uint16,
      Uint16,
      Uint16,
      CArray[Uint16, Nat._3],
      CArray[Uint16, Nat._3],
      CArray[Sint16, Nat._3],
      CArray[Sint16, Nat._3],
      CArray[Uint16, Nat._3],
      CArray[Sint16, Nat._3]
    ]
    def apply()(using Zone): Ptr[SDL_HapticCondition] =
      scala.scalanative.unsafe.alloc[SDL_HapticCondition](1)
    def apply(
        `type`: Uint16,
        direction: SDL_HapticDirection,
        length: Uint32,
        delay: Uint16,
        button: Uint16,
        interval: Uint16,
        right_sat: CArray[Uint16, Nat._3],
        left_sat: CArray[Uint16, Nat._3],
        right_coeff: CArray[Sint16, Nat._3],
        left_coeff: CArray[Sint16, Nat._3],
        deadband: CArray[Uint16, Nat._3],
        center: CArray[Sint16, Nat._3]
    )(using Zone): Ptr[SDL_HapticCondition] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).direction = direction
      (!____ptr).length = length
      (!____ptr).delay = delay
      (!____ptr).button = button
      (!____ptr).interval = interval
      (!____ptr).right_sat = right_sat
      (!____ptr).left_sat = left_sat
      (!____ptr).right_coeff = right_coeff
      (!____ptr).left_coeff = left_coeff
      (!____ptr).deadband = deadband
      (!____ptr).center = center
      ____ptr
    end apply
    extension (struct: SDL_HapticCondition)
      def `type`: Uint16 = struct._1
      def type_=(value: Uint16): Unit = !struct.at1 = value
      def direction: SDL_HapticDirection = struct._2
      def direction_=(value: SDL_HapticDirection): Unit = !struct.at2 = value
      def length: Uint32 = struct._3
      def length_=(value: Uint32): Unit = !struct.at3 = value
      def delay: Uint16 = struct._4
      def delay_=(value: Uint16): Unit = !struct.at4 = value
      def button: Uint16 = struct._5
      def button_=(value: Uint16): Unit = !struct.at5 = value
      def interval: Uint16 = struct._6
      def interval_=(value: Uint16): Unit = !struct.at6 = value
      def right_sat: CArray[Uint16, Nat._3] = struct._7
      def right_sat_=(value: CArray[Uint16, Nat._3]): Unit = !struct.at7 = value
      def left_sat: CArray[Uint16, Nat._3] = struct._8
      def left_sat_=(value: CArray[Uint16, Nat._3]): Unit = !struct.at8 = value
      def right_coeff: CArray[Sint16, Nat._3] = struct._9
      def right_coeff_=(value: CArray[Sint16, Nat._3]): Unit = !struct.at9 =
        value
      def left_coeff: CArray[Sint16, Nat._3] = struct._10
      def left_coeff_=(value: CArray[Sint16, Nat._3]): Unit = !struct.at10 =
        value
      def deadband: CArray[Uint16, Nat._3] = struct._11
      def deadband_=(value: CArray[Uint16, Nat._3]): Unit = !struct.at11 = value
      def center: CArray[Sint16, Nat._3] = struct._12
      def center_=(value: CArray[Sint16, Nat._3]): Unit = !struct.at12 = value
    end extension
  end SDL_HapticCondition

  /** A structure containing a template for a Constant effect.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  opaque type SDL_HapticConstant = CStruct11[
    Uint16,
    SDL_HapticDirection,
    Uint32,
    Uint16,
    Uint16,
    Uint16,
    Sint16,
    Uint16,
    Uint16,
    Uint16,
    Uint16
  ]
  object SDL_HapticConstant:
    given _tag: Tag[SDL_HapticConstant] = Tag.materializeCStruct11Tag[
      Uint16,
      SDL_HapticDirection,
      Uint32,
      Uint16,
      Uint16,
      Uint16,
      Sint16,
      Uint16,
      Uint16,
      Uint16,
      Uint16
    ]
    def apply()(using Zone): Ptr[SDL_HapticConstant] =
      scala.scalanative.unsafe.alloc[SDL_HapticConstant](1)
    def apply(
        `type`: Uint16,
        direction: SDL_HapticDirection,
        length: Uint32,
        delay: Uint16,
        button: Uint16,
        interval: Uint16,
        level: Sint16,
        attack_length: Uint16,
        attack_level: Uint16,
        fade_length: Uint16,
        fade_level: Uint16
    )(using Zone): Ptr[SDL_HapticConstant] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).direction = direction
      (!____ptr).length = length
      (!____ptr).delay = delay
      (!____ptr).button = button
      (!____ptr).interval = interval
      (!____ptr).level = level
      (!____ptr).attack_length = attack_length
      (!____ptr).attack_level = attack_level
      (!____ptr).fade_length = fade_length
      (!____ptr).fade_level = fade_level
      ____ptr
    end apply
    extension (struct: SDL_HapticConstant)
      def `type`: Uint16 = struct._1
      def type_=(value: Uint16): Unit = !struct.at1 = value
      def direction: SDL_HapticDirection = struct._2
      def direction_=(value: SDL_HapticDirection): Unit = !struct.at2 = value
      def length: Uint32 = struct._3
      def length_=(value: Uint32): Unit = !struct.at3 = value
      def delay: Uint16 = struct._4
      def delay_=(value: Uint16): Unit = !struct.at4 = value
      def button: Uint16 = struct._5
      def button_=(value: Uint16): Unit = !struct.at5 = value
      def interval: Uint16 = struct._6
      def interval_=(value: Uint16): Unit = !struct.at6 = value
      def level: Sint16 = struct._7
      def level_=(value: Sint16): Unit = !struct.at7 = value
      def attack_length: Uint16 = struct._8
      def attack_length_=(value: Uint16): Unit = !struct.at8 = value
      def attack_level: Uint16 = struct._9
      def attack_level_=(value: Uint16): Unit = !struct.at9 = value
      def fade_length: Uint16 = struct._10
      def fade_length_=(value: Uint16): Unit = !struct.at10 = value
      def fade_level: Uint16 = struct._11
      def fade_level_=(value: Uint16): Unit = !struct.at11 = value
    end extension
  end SDL_HapticConstant

  /** A structure containing a template for the SDL_HAPTIC_CUSTOM effect.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  opaque type SDL_HapticCustom = CStruct14[
    Uint16,
    SDL_HapticDirection,
    Uint32,
    Uint16,
    Uint16,
    Uint16,
    Uint8,
    Uint16,
    Uint16,
    Ptr[Uint16],
    Uint16,
    Uint16,
    Uint16,
    Uint16
  ]
  object SDL_HapticCustom:
    given _tag: Tag[SDL_HapticCustom] = Tag.materializeCStruct14Tag[
      Uint16,
      SDL_HapticDirection,
      Uint32,
      Uint16,
      Uint16,
      Uint16,
      Uint8,
      Uint16,
      Uint16,
      Ptr[Uint16],
      Uint16,
      Uint16,
      Uint16,
      Uint16
    ]
    def apply()(using Zone): Ptr[SDL_HapticCustom] =
      scala.scalanative.unsafe.alloc[SDL_HapticCustom](1)
    def apply(
        `type`: Uint16,
        direction: SDL_HapticDirection,
        length: Uint32,
        delay: Uint16,
        button: Uint16,
        interval: Uint16,
        channels: Uint8,
        period: Uint16,
        samples: Uint16,
        data: Ptr[Uint16],
        attack_length: Uint16,
        attack_level: Uint16,
        fade_length: Uint16,
        fade_level: Uint16
    )(using Zone): Ptr[SDL_HapticCustom] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).direction = direction
      (!____ptr).length = length
      (!____ptr).delay = delay
      (!____ptr).button = button
      (!____ptr).interval = interval
      (!____ptr).channels = channels
      (!____ptr).period = period
      (!____ptr).samples = samples
      (!____ptr).data = data
      (!____ptr).attack_length = attack_length
      (!____ptr).attack_level = attack_level
      (!____ptr).fade_length = fade_length
      (!____ptr).fade_level = fade_level
      ____ptr
    end apply
    extension (struct: SDL_HapticCustom)
      def `type`: Uint16 = struct._1
      def type_=(value: Uint16): Unit = !struct.at1 = value
      def direction: SDL_HapticDirection = struct._2
      def direction_=(value: SDL_HapticDirection): Unit = !struct.at2 = value
      def length: Uint32 = struct._3
      def length_=(value: Uint32): Unit = !struct.at3 = value
      def delay: Uint16 = struct._4
      def delay_=(value: Uint16): Unit = !struct.at4 = value
      def button: Uint16 = struct._5
      def button_=(value: Uint16): Unit = !struct.at5 = value
      def interval: Uint16 = struct._6
      def interval_=(value: Uint16): Unit = !struct.at6 = value
      def channels: Uint8 = struct._7
      def channels_=(value: Uint8): Unit = !struct.at7 = value
      def period: Uint16 = struct._8
      def period_=(value: Uint16): Unit = !struct.at8 = value
      def samples: Uint16 = struct._9
      def samples_=(value: Uint16): Unit = !struct.at9 = value
      def data: Ptr[Uint16] = struct._10
      def data_=(value: Ptr[Uint16]): Unit = !struct.at10 = value
      def attack_length: Uint16 = struct._11
      def attack_length_=(value: Uint16): Unit = !struct.at11 = value
      def attack_level: Uint16 = struct._12
      def attack_level_=(value: Uint16): Unit = !struct.at12 = value
      def fade_length: Uint16 = struct._13
      def fade_length_=(value: Uint16): Unit = !struct.at13 = value
      def fade_level: Uint16 = struct._14
      def fade_level_=(value: Uint16): Unit = !struct.at14 = value
    end extension
  end SDL_HapticCustom

  /** Structure that represents a haptic direction.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  opaque type SDL_HapticDirection = CStruct2[Uint8, CArray[Sint32, Nat._3]]
  object SDL_HapticDirection:
    given _tag: Tag[SDL_HapticDirection] =
      Tag.materializeCStruct2Tag[Uint8, CArray[Sint32, Nat._3]]
    def apply()(using Zone): Ptr[SDL_HapticDirection] =
      scala.scalanative.unsafe.alloc[SDL_HapticDirection](1)
    def apply(`type`: Uint8, dir: CArray[Sint32, Nat._3])(using
        Zone
    ): Ptr[SDL_HapticDirection] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).dir = dir
      ____ptr
    end apply
    extension (struct: SDL_HapticDirection)
      def `type`: Uint8 = struct._1
      def type_=(value: Uint8): Unit = !struct.at1 = value
      def dir: CArray[Sint32, Nat._3] = struct._2
      def dir_=(value: CArray[Sint32, Nat._3]): Unit = !struct.at2 = value
    end extension
  end SDL_HapticDirection

  /** A structure containing a template for a Left/Right effect.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  opaque type SDL_HapticLeftRight = CStruct4[Uint16, Uint32, Uint16, Uint16]
  object SDL_HapticLeftRight:
    given _tag: Tag[SDL_HapticLeftRight] =
      Tag.materializeCStruct4Tag[Uint16, Uint32, Uint16, Uint16]
    def apply()(using Zone): Ptr[SDL_HapticLeftRight] =
      scala.scalanative.unsafe.alloc[SDL_HapticLeftRight](1)
    def apply(
        `type`: Uint16,
        length: Uint32,
        large_magnitude: Uint16,
        small_magnitude: Uint16
    )(using Zone): Ptr[SDL_HapticLeftRight] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).length = length
      (!____ptr).large_magnitude = large_magnitude
      (!____ptr).small_magnitude = small_magnitude
      ____ptr
    end apply
    extension (struct: SDL_HapticLeftRight)
      def `type`: Uint16 = struct._1
      def type_=(value: Uint16): Unit = !struct.at1 = value
      def length: Uint32 = struct._2
      def length_=(value: Uint32): Unit = !struct.at2 = value
      def large_magnitude: Uint16 = struct._3
      def large_magnitude_=(value: Uint16): Unit = !struct.at3 = value
      def small_magnitude: Uint16 = struct._4
      def small_magnitude_=(value: Uint16): Unit = !struct.at4 = value
    end extension
  end SDL_HapticLeftRight

  /** A structure containing a template for a Periodic effect.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  opaque type SDL_HapticPeriodic = CStruct14[
    Uint16,
    SDL_HapticDirection,
    Uint32,
    Uint16,
    Uint16,
    Uint16,
    Uint16,
    Sint16,
    Sint16,
    Uint16,
    Uint16,
    Uint16,
    Uint16,
    Uint16
  ]
  object SDL_HapticPeriodic:
    given _tag: Tag[SDL_HapticPeriodic] = Tag.materializeCStruct14Tag[
      Uint16,
      SDL_HapticDirection,
      Uint32,
      Uint16,
      Uint16,
      Uint16,
      Uint16,
      Sint16,
      Sint16,
      Uint16,
      Uint16,
      Uint16,
      Uint16,
      Uint16
    ]
    def apply()(using Zone): Ptr[SDL_HapticPeriodic] =
      scala.scalanative.unsafe.alloc[SDL_HapticPeriodic](1)
    def apply(
        `type`: Uint16,
        direction: SDL_HapticDirection,
        length: Uint32,
        delay: Uint16,
        button: Uint16,
        interval: Uint16,
        period: Uint16,
        magnitude: Sint16,
        offset: Sint16,
        phase: Uint16,
        attack_length: Uint16,
        attack_level: Uint16,
        fade_length: Uint16,
        fade_level: Uint16
    )(using Zone): Ptr[SDL_HapticPeriodic] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).direction = direction
      (!____ptr).length = length
      (!____ptr).delay = delay
      (!____ptr).button = button
      (!____ptr).interval = interval
      (!____ptr).period = period
      (!____ptr).magnitude = magnitude
      (!____ptr).offset = offset
      (!____ptr).phase = phase
      (!____ptr).attack_length = attack_length
      (!____ptr).attack_level = attack_level
      (!____ptr).fade_length = fade_length
      (!____ptr).fade_level = fade_level
      ____ptr
    end apply
    extension (struct: SDL_HapticPeriodic)
      def `type`: Uint16 = struct._1
      def type_=(value: Uint16): Unit = !struct.at1 = value
      def direction: SDL_HapticDirection = struct._2
      def direction_=(value: SDL_HapticDirection): Unit = !struct.at2 = value
      def length: Uint32 = struct._3
      def length_=(value: Uint32): Unit = !struct.at3 = value
      def delay: Uint16 = struct._4
      def delay_=(value: Uint16): Unit = !struct.at4 = value
      def button: Uint16 = struct._5
      def button_=(value: Uint16): Unit = !struct.at5 = value
      def interval: Uint16 = struct._6
      def interval_=(value: Uint16): Unit = !struct.at6 = value
      def period: Uint16 = struct._7
      def period_=(value: Uint16): Unit = !struct.at7 = value
      def magnitude: Sint16 = struct._8
      def magnitude_=(value: Sint16): Unit = !struct.at8 = value
      def offset: Sint16 = struct._9
      def offset_=(value: Sint16): Unit = !struct.at9 = value
      def phase: Uint16 = struct._10
      def phase_=(value: Uint16): Unit = !struct.at10 = value
      def attack_length: Uint16 = struct._11
      def attack_length_=(value: Uint16): Unit = !struct.at11 = value
      def attack_level: Uint16 = struct._12
      def attack_level_=(value: Uint16): Unit = !struct.at12 = value
      def fade_length: Uint16 = struct._13
      def fade_length_=(value: Uint16): Unit = !struct.at13 = value
      def fade_level: Uint16 = struct._14
      def fade_level_=(value: Uint16): Unit = !struct.at14 = value
    end extension
  end SDL_HapticPeriodic

  /** A structure containing a template for a Ramp effect.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  opaque type SDL_HapticRamp = CStruct12[
    Uint16,
    SDL_HapticDirection,
    Uint32,
    Uint16,
    Uint16,
    Uint16,
    Sint16,
    Sint16,
    Uint16,
    Uint16,
    Uint16,
    Uint16
  ]
  object SDL_HapticRamp:
    given _tag: Tag[SDL_HapticRamp] = Tag.materializeCStruct12Tag[
      Uint16,
      SDL_HapticDirection,
      Uint32,
      Uint16,
      Uint16,
      Uint16,
      Sint16,
      Sint16,
      Uint16,
      Uint16,
      Uint16,
      Uint16
    ]
    def apply()(using Zone): Ptr[SDL_HapticRamp] =
      scala.scalanative.unsafe.alloc[SDL_HapticRamp](1)
    def apply(
        `type`: Uint16,
        direction: SDL_HapticDirection,
        length: Uint32,
        delay: Uint16,
        button: Uint16,
        interval: Uint16,
        start: Sint16,
        end: Sint16,
        attack_length: Uint16,
        attack_level: Uint16,
        fade_length: Uint16,
        fade_level: Uint16
    )(using Zone): Ptr[SDL_HapticRamp] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).direction = direction
      (!____ptr).length = length
      (!____ptr).delay = delay
      (!____ptr).button = button
      (!____ptr).interval = interval
      (!____ptr).start = start
      (!____ptr).end = end
      (!____ptr).attack_length = attack_length
      (!____ptr).attack_level = attack_level
      (!____ptr).fade_length = fade_length
      (!____ptr).fade_level = fade_level
      ____ptr
    end apply
    extension (struct: SDL_HapticRamp)
      def `type`: Uint16 = struct._1
      def type_=(value: Uint16): Unit = !struct.at1 = value
      def direction: SDL_HapticDirection = struct._2
      def direction_=(value: SDL_HapticDirection): Unit = !struct.at2 = value
      def length: Uint32 = struct._3
      def length_=(value: Uint32): Unit = !struct.at3 = value
      def delay: Uint16 = struct._4
      def delay_=(value: Uint16): Unit = !struct.at4 = value
      def button: Uint16 = struct._5
      def button_=(value: Uint16): Unit = !struct.at5 = value
      def interval: Uint16 = struct._6
      def interval_=(value: Uint16): Unit = !struct.at6 = value
      def start: Sint16 = struct._7
      def start_=(value: Sint16): Unit = !struct.at7 = value
      def end: Sint16 = struct._8
      def end_=(value: Sint16): Unit = !struct.at8 = value
      def attack_length: Uint16 = struct._9
      def attack_length_=(value: Uint16): Unit = !struct.at9 = value
      def attack_level: Uint16 = struct._10
      def attack_level_=(value: Uint16): Unit = !struct.at10 = value
      def fade_length: Uint16 = struct._11
      def fade_length_=(value: Uint16): Unit = !struct.at11 = value
      def fade_level: Uint16 = struct._12
      def fade_level_=(value: Uint16): Unit = !struct.at12 = value
    end extension
  end SDL_HapticRamp

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  opaque type SDL_IOStream = CStruct0
  object SDL_IOStream:
    given _tag: Tag[SDL_IOStream] = Tag.materializeCStruct0Tag

  /** The function pointers that drive an SDL_IOStream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  opaque type SDL_IOStreamInterface = CStruct7[
    Uint32,
    CFuncPtr1[Ptr[Byte], Sint64],
    CFuncPtr3[Ptr[Byte], Sint64, SDL_IOWhence, Sint64],
    CFuncPtr4[Ptr[Byte], Ptr[Byte], size_t, Ptr[SDL_IOStatus], size_t],
    CFuncPtr4[Ptr[Byte], Ptr[Byte], size_t, Ptr[SDL_IOStatus], size_t],
    CFuncPtr2[Ptr[Byte], Ptr[SDL_IOStatus], Boolean],
    CFuncPtr1[Ptr[Byte], Boolean]
  ]
  object SDL_IOStreamInterface:
    given _tag: Tag[SDL_IOStreamInterface] = Tag.materializeCStruct7Tag[
      Uint32,
      CFuncPtr1[Ptr[Byte], Sint64],
      CFuncPtr3[Ptr[Byte], Sint64, SDL_IOWhence, Sint64],
      CFuncPtr4[Ptr[Byte], Ptr[Byte], size_t, Ptr[SDL_IOStatus], size_t],
      CFuncPtr4[Ptr[Byte], Ptr[Byte], size_t, Ptr[SDL_IOStatus], size_t],
      CFuncPtr2[Ptr[Byte], Ptr[SDL_IOStatus], Boolean],
      CFuncPtr1[Ptr[Byte], Boolean]
    ]
    def apply()(using Zone): Ptr[SDL_IOStreamInterface] =
      scala.scalanative.unsafe.alloc[SDL_IOStreamInterface](1)
    def apply(
        version: Uint32,
        size: CFuncPtr1[Ptr[Byte], Sint64],
        seek: CFuncPtr3[Ptr[Byte], Sint64, SDL_IOWhence, Sint64],
        read: CFuncPtr4[Ptr[Byte], Ptr[Byte], size_t, Ptr[
          SDL_IOStatus
        ], size_t],
        write: CFuncPtr4[Ptr[Byte], Ptr[Byte], size_t, Ptr[
          SDL_IOStatus
        ], size_t],
        flush: CFuncPtr2[Ptr[Byte], Ptr[SDL_IOStatus], Boolean],
        close: CFuncPtr1[Ptr[Byte], Boolean]
    )(using Zone): Ptr[SDL_IOStreamInterface] =
      val ____ptr = apply()
      (!____ptr).version = version
      (!____ptr).size = size
      (!____ptr).seek = seek
      (!____ptr).read = read
      (!____ptr).write = write
      (!____ptr).flush = flush
      (!____ptr).close = close
      ____ptr
    end apply
    extension (struct: SDL_IOStreamInterface)
      def version: Uint32 = struct._1
      def version_=(value: Uint32): Unit = !struct.at1 = value
      def size: CFuncPtr1[Ptr[Byte], Sint64] = struct._2
      def size_=(value: CFuncPtr1[Ptr[Byte], Sint64]): Unit = !struct.at2 =
        value
      def seek: CFuncPtr3[Ptr[Byte], Sint64, SDL_IOWhence, Sint64] = struct._3
      def seek_=(
          value: CFuncPtr3[Ptr[Byte], Sint64, SDL_IOWhence, Sint64]
      ): Unit = !struct.at3 = value
      def read
          : CFuncPtr4[Ptr[Byte], Ptr[Byte], size_t, Ptr[SDL_IOStatus], size_t] =
        struct._4
      def read_=(
          value: CFuncPtr4[Ptr[Byte], Ptr[Byte], size_t, Ptr[
            SDL_IOStatus
          ], size_t]
      ): Unit = !struct.at4 = value
      def write
          : CFuncPtr4[Ptr[Byte], Ptr[Byte], size_t, Ptr[SDL_IOStatus], size_t] =
        struct._5
      def write_=(
          value: CFuncPtr4[Ptr[Byte], Ptr[Byte], size_t, Ptr[
            SDL_IOStatus
          ], size_t]
      ): Unit = !struct.at5 = value
      def flush: CFuncPtr2[Ptr[Byte], Ptr[SDL_IOStatus], Boolean] = struct._6
      def flush_=(
          value: CFuncPtr2[Ptr[Byte], Ptr[SDL_IOStatus], Boolean]
      ): Unit = !struct.at6 = value
      def close: CFuncPtr1[Ptr[Byte], Boolean] = struct._7
      def close_=(value: CFuncPtr1[Ptr[Byte], Boolean]): Unit = !struct.at7 =
        value
    end extension
  end SDL_IOStreamInterface

  /** A structure used for thread-safe initialization and shutdown.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mutex.h
    */
  opaque type SDL_InitState = CStruct3[SDL_AtomicInt, SDL_ThreadID, Ptr[Byte]]
  object SDL_InitState:
    given _tag: Tag[SDL_InitState] =
      Tag.materializeCStruct3Tag[SDL_AtomicInt, SDL_ThreadID, Ptr[Byte]]
    def apply()(using Zone): Ptr[SDL_InitState] =
      scala.scalanative.unsafe.alloc[SDL_InitState](1)
    def apply(status: SDL_AtomicInt, thread: SDL_ThreadID, reserved: Ptr[Byte])(
        using Zone
    ): Ptr[SDL_InitState] =
      val ____ptr = apply()
      (!____ptr).status = status
      (!____ptr).thread = thread
      (!____ptr).reserved = reserved
      ____ptr
    end apply
    extension (struct: SDL_InitState)
      def status: SDL_AtomicInt = struct._1
      def status_=(value: SDL_AtomicInt): Unit = !struct.at1 = value
      def thread: SDL_ThreadID = struct._2
      def thread_=(value: SDL_ThreadID): Unit = !struct.at2 = value
      def reserved: Ptr[Byte] = struct._3
      def reserved_=(value: Ptr[Byte]): Unit = !struct.at3 = value
    end extension
  end SDL_InitState

  /** Joystick axis motion event structure (event.jaxis.*)
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  opaque type SDL_JoyAxisEvent = CStruct10[
    SDL_EventType,
    Uint32,
    Uint64,
    SDL_JoystickID,
    Uint8,
    Uint8,
    Uint8,
    Uint8,
    Sint16,
    Uint16
  ]
  object SDL_JoyAxisEvent:
    given _tag: Tag[SDL_JoyAxisEvent] = Tag.materializeCStruct10Tag[
      SDL_EventType,
      Uint32,
      Uint64,
      SDL_JoystickID,
      Uint8,
      Uint8,
      Uint8,
      Uint8,
      Sint16,
      Uint16
    ]
    def apply()(using Zone): Ptr[SDL_JoyAxisEvent] =
      scala.scalanative.unsafe.alloc[SDL_JoyAxisEvent](1)
    def apply(
        `type`: SDL_EventType,
        reserved: Uint32,
        timestamp: Uint64,
        which: SDL_JoystickID,
        axis: Uint8,
        padding1: Uint8,
        padding2: Uint8,
        padding3: Uint8,
        value: Sint16,
        padding4: Uint16
    )(using Zone): Ptr[SDL_JoyAxisEvent] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).reserved = reserved
      (!____ptr).timestamp = timestamp
      (!____ptr).which = which
      (!____ptr).axis = axis
      (!____ptr).padding1 = padding1
      (!____ptr).padding2 = padding2
      (!____ptr).padding3 = padding3
      (!____ptr).value = value
      (!____ptr).padding4 = padding4
      ____ptr
    end apply
    extension (struct: SDL_JoyAxisEvent)
      def `type`: SDL_EventType = struct._1
      def type_=(value: SDL_EventType): Unit = !struct.at1 = value
      def reserved: Uint32 = struct._2
      def reserved_=(value: Uint32): Unit = !struct.at2 = value
      def timestamp: Uint64 = struct._3
      def timestamp_=(value: Uint64): Unit = !struct.at3 = value
      def which: SDL_JoystickID = struct._4
      def which_=(value: SDL_JoystickID): Unit = !struct.at4 = value
      def axis: Uint8 = struct._5
      def axis_=(value: Uint8): Unit = !struct.at5 = value
      def padding1: Uint8 = struct._6
      def padding1_=(value: Uint8): Unit = !struct.at6 = value
      def padding2: Uint8 = struct._7
      def padding2_=(value: Uint8): Unit = !struct.at7 = value
      def padding3: Uint8 = struct._8
      def padding3_=(value: Uint8): Unit = !struct.at8 = value
      def value: Sint16 = struct._9
      def value_=(value: Sint16): Unit = !struct.at9 = value
      def padding4: Uint16 = struct._10
      def padding4_=(value: Uint16): Unit = !struct.at10 = value
    end extension
  end SDL_JoyAxisEvent

  /** Joystick trackball motion event structure (event.jball.*)
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  opaque type SDL_JoyBallEvent = CStruct10[
    SDL_EventType,
    Uint32,
    Uint64,
    SDL_JoystickID,
    Uint8,
    Uint8,
    Uint8,
    Uint8,
    Sint16,
    Sint16
  ]
  object SDL_JoyBallEvent:
    given _tag: Tag[SDL_JoyBallEvent] = Tag.materializeCStruct10Tag[
      SDL_EventType,
      Uint32,
      Uint64,
      SDL_JoystickID,
      Uint8,
      Uint8,
      Uint8,
      Uint8,
      Sint16,
      Sint16
    ]
    def apply()(using Zone): Ptr[SDL_JoyBallEvent] =
      scala.scalanative.unsafe.alloc[SDL_JoyBallEvent](1)
    def apply(
        `type`: SDL_EventType,
        reserved: Uint32,
        timestamp: Uint64,
        which: SDL_JoystickID,
        ball: Uint8,
        padding1: Uint8,
        padding2: Uint8,
        padding3: Uint8,
        xrel: Sint16,
        yrel: Sint16
    )(using Zone): Ptr[SDL_JoyBallEvent] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).reserved = reserved
      (!____ptr).timestamp = timestamp
      (!____ptr).which = which
      (!____ptr).ball = ball
      (!____ptr).padding1 = padding1
      (!____ptr).padding2 = padding2
      (!____ptr).padding3 = padding3
      (!____ptr).xrel = xrel
      (!____ptr).yrel = yrel
      ____ptr
    end apply
    extension (struct: SDL_JoyBallEvent)
      def `type`: SDL_EventType = struct._1
      def type_=(value: SDL_EventType): Unit = !struct.at1 = value
      def reserved: Uint32 = struct._2
      def reserved_=(value: Uint32): Unit = !struct.at2 = value
      def timestamp: Uint64 = struct._3
      def timestamp_=(value: Uint64): Unit = !struct.at3 = value
      def which: SDL_JoystickID = struct._4
      def which_=(value: SDL_JoystickID): Unit = !struct.at4 = value
      def ball: Uint8 = struct._5
      def ball_=(value: Uint8): Unit = !struct.at5 = value
      def padding1: Uint8 = struct._6
      def padding1_=(value: Uint8): Unit = !struct.at6 = value
      def padding2: Uint8 = struct._7
      def padding2_=(value: Uint8): Unit = !struct.at7 = value
      def padding3: Uint8 = struct._8
      def padding3_=(value: Uint8): Unit = !struct.at8 = value
      def xrel: Sint16 = struct._9
      def xrel_=(value: Sint16): Unit = !struct.at9 = value
      def yrel: Sint16 = struct._10
      def yrel_=(value: Sint16): Unit = !struct.at10 = value
    end extension
  end SDL_JoyBallEvent

  /** Joystick battery level change event structure (event.jbattery.*)
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  opaque type SDL_JoyBatteryEvent = CStruct6[
    SDL_EventType,
    Uint32,
    Uint64,
    SDL_JoystickID,
    SDL_PowerState,
    CInt
  ]
  object SDL_JoyBatteryEvent:
    given _tag: Tag[SDL_JoyBatteryEvent] = Tag.materializeCStruct6Tag[
      SDL_EventType,
      Uint32,
      Uint64,
      SDL_JoystickID,
      SDL_PowerState,
      CInt
    ]
    def apply()(using Zone): Ptr[SDL_JoyBatteryEvent] =
      scala.scalanative.unsafe.alloc[SDL_JoyBatteryEvent](1)
    def apply(
        `type`: SDL_EventType,
        reserved: Uint32,
        timestamp: Uint64,
        which: SDL_JoystickID,
        state: SDL_PowerState,
        percent: CInt
    )(using Zone): Ptr[SDL_JoyBatteryEvent] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).reserved = reserved
      (!____ptr).timestamp = timestamp
      (!____ptr).which = which
      (!____ptr).state = state
      (!____ptr).percent = percent
      ____ptr
    end apply
    extension (struct: SDL_JoyBatteryEvent)
      def `type`: SDL_EventType = struct._1
      def type_=(value: SDL_EventType): Unit = !struct.at1 = value
      def reserved: Uint32 = struct._2
      def reserved_=(value: Uint32): Unit = !struct.at2 = value
      def timestamp: Uint64 = struct._3
      def timestamp_=(value: Uint64): Unit = !struct.at3 = value
      def which: SDL_JoystickID = struct._4
      def which_=(value: SDL_JoystickID): Unit = !struct.at4 = value
      def state: SDL_PowerState = struct._5
      def state_=(value: SDL_PowerState): Unit = !struct.at5 = value
      def percent: CInt = struct._6
      def percent_=(value: CInt): Unit = !struct.at6 = value
    end extension
  end SDL_JoyBatteryEvent

  /** Joystick button event structure (event.jbutton.*)
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  opaque type SDL_JoyButtonEvent = CStruct8[
    SDL_EventType,
    Uint32,
    Uint64,
    SDL_JoystickID,
    Uint8,
    Boolean,
    Uint8,
    Uint8
  ]
  object SDL_JoyButtonEvent:
    given _tag: Tag[SDL_JoyButtonEvent] = Tag.materializeCStruct8Tag[
      SDL_EventType,
      Uint32,
      Uint64,
      SDL_JoystickID,
      Uint8,
      Boolean,
      Uint8,
      Uint8
    ]
    def apply()(using Zone): Ptr[SDL_JoyButtonEvent] =
      scala.scalanative.unsafe.alloc[SDL_JoyButtonEvent](1)
    def apply(
        `type`: SDL_EventType,
        reserved: Uint32,
        timestamp: Uint64,
        which: SDL_JoystickID,
        button: Uint8,
        down: Boolean,
        padding1: Uint8,
        padding2: Uint8
    )(using Zone): Ptr[SDL_JoyButtonEvent] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).reserved = reserved
      (!____ptr).timestamp = timestamp
      (!____ptr).which = which
      (!____ptr).button = button
      (!____ptr).down = down
      (!____ptr).padding1 = padding1
      (!____ptr).padding2 = padding2
      ____ptr
    end apply
    extension (struct: SDL_JoyButtonEvent)
      def `type`: SDL_EventType = struct._1
      def type_=(value: SDL_EventType): Unit = !struct.at1 = value
      def reserved: Uint32 = struct._2
      def reserved_=(value: Uint32): Unit = !struct.at2 = value
      def timestamp: Uint64 = struct._3
      def timestamp_=(value: Uint64): Unit = !struct.at3 = value
      def which: SDL_JoystickID = struct._4
      def which_=(value: SDL_JoystickID): Unit = !struct.at4 = value
      def button: Uint8 = struct._5
      def button_=(value: Uint8): Unit = !struct.at5 = value
      def down: Boolean = struct._6
      def down_=(value: Boolean): Unit = !struct.at6 = value
      def padding1: Uint8 = struct._7
      def padding1_=(value: Uint8): Unit = !struct.at7 = value
      def padding2: Uint8 = struct._8
      def padding2_=(value: Uint8): Unit = !struct.at8 = value
    end extension
  end SDL_JoyButtonEvent

  /** Joystick device event structure (event.jdevice.*)
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  opaque type SDL_JoyDeviceEvent =
    CStruct4[SDL_EventType, Uint32, Uint64, SDL_JoystickID]
  object SDL_JoyDeviceEvent:
    given _tag: Tag[SDL_JoyDeviceEvent] =
      Tag.materializeCStruct4Tag[SDL_EventType, Uint32, Uint64, SDL_JoystickID]
    def apply()(using Zone): Ptr[SDL_JoyDeviceEvent] =
      scala.scalanative.unsafe.alloc[SDL_JoyDeviceEvent](1)
    def apply(
        `type`: SDL_EventType,
        reserved: Uint32,
        timestamp: Uint64,
        which: SDL_JoystickID
    )(using Zone): Ptr[SDL_JoyDeviceEvent] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).reserved = reserved
      (!____ptr).timestamp = timestamp
      (!____ptr).which = which
      ____ptr
    end apply
    extension (struct: SDL_JoyDeviceEvent)
      def `type`: SDL_EventType = struct._1
      def type_=(value: SDL_EventType): Unit = !struct.at1 = value
      def reserved: Uint32 = struct._2
      def reserved_=(value: Uint32): Unit = !struct.at2 = value
      def timestamp: Uint64 = struct._3
      def timestamp_=(value: Uint64): Unit = !struct.at3 = value
      def which: SDL_JoystickID = struct._4
      def which_=(value: SDL_JoystickID): Unit = !struct.at4 = value
    end extension
  end SDL_JoyDeviceEvent

  /** Joystick hat position change event structure (event.jhat.*)
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  opaque type SDL_JoyHatEvent = CStruct8[
    SDL_EventType,
    Uint32,
    Uint64,
    SDL_JoystickID,
    Uint8,
    Uint8,
    Uint8,
    Uint8
  ]
  object SDL_JoyHatEvent:
    given _tag: Tag[SDL_JoyHatEvent] = Tag.materializeCStruct8Tag[
      SDL_EventType,
      Uint32,
      Uint64,
      SDL_JoystickID,
      Uint8,
      Uint8,
      Uint8,
      Uint8
    ]
    def apply()(using Zone): Ptr[SDL_JoyHatEvent] =
      scala.scalanative.unsafe.alloc[SDL_JoyHatEvent](1)
    def apply(
        `type`: SDL_EventType,
        reserved: Uint32,
        timestamp: Uint64,
        which: SDL_JoystickID,
        hat: Uint8,
        value: Uint8,
        padding1: Uint8,
        padding2: Uint8
    )(using Zone): Ptr[SDL_JoyHatEvent] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).reserved = reserved
      (!____ptr).timestamp = timestamp
      (!____ptr).which = which
      (!____ptr).hat = hat
      (!____ptr).value = value
      (!____ptr).padding1 = padding1
      (!____ptr).padding2 = padding2
      ____ptr
    end apply
    extension (struct: SDL_JoyHatEvent)
      def `type`: SDL_EventType = struct._1
      def type_=(value: SDL_EventType): Unit = !struct.at1 = value
      def reserved: Uint32 = struct._2
      def reserved_=(value: Uint32): Unit = !struct.at2 = value
      def timestamp: Uint64 = struct._3
      def timestamp_=(value: Uint64): Unit = !struct.at3 = value
      def which: SDL_JoystickID = struct._4
      def which_=(value: SDL_JoystickID): Unit = !struct.at4 = value
      def hat: Uint8 = struct._5
      def hat_=(value: Uint8): Unit = !struct.at5 = value
      def value: Uint8 = struct._6
      def value_=(value: Uint8): Unit = !struct.at6 = value
      def padding1: Uint8 = struct._7
      def padding1_=(value: Uint8): Unit = !struct.at7 = value
      def padding2: Uint8 = struct._8
      def padding2_=(value: Uint8): Unit = !struct.at8 = value
    end extension
  end SDL_JoyHatEvent

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  opaque type SDL_Joystick = CStruct0
  object SDL_Joystick:
    given _tag: Tag[SDL_Joystick] = Tag.materializeCStruct0Tag

  /** Keyboard device event structure (event.kdevice.*)
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  opaque type SDL_KeyboardDeviceEvent =
    CStruct4[SDL_EventType, Uint32, Uint64, SDL_KeyboardID]
  object SDL_KeyboardDeviceEvent:
    given _tag: Tag[SDL_KeyboardDeviceEvent] =
      Tag.materializeCStruct4Tag[SDL_EventType, Uint32, Uint64, SDL_KeyboardID]
    def apply()(using Zone): Ptr[SDL_KeyboardDeviceEvent] =
      scala.scalanative.unsafe.alloc[SDL_KeyboardDeviceEvent](1)
    def apply(
        `type`: SDL_EventType,
        reserved: Uint32,
        timestamp: Uint64,
        which: SDL_KeyboardID
    )(using Zone): Ptr[SDL_KeyboardDeviceEvent] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).reserved = reserved
      (!____ptr).timestamp = timestamp
      (!____ptr).which = which
      ____ptr
    end apply
    extension (struct: SDL_KeyboardDeviceEvent)
      def `type`: SDL_EventType = struct._1
      def type_=(value: SDL_EventType): Unit = !struct.at1 = value
      def reserved: Uint32 = struct._2
      def reserved_=(value: Uint32): Unit = !struct.at2 = value
      def timestamp: Uint64 = struct._3
      def timestamp_=(value: Uint64): Unit = !struct.at3 = value
      def which: SDL_KeyboardID = struct._4
      def which_=(value: SDL_KeyboardID): Unit = !struct.at4 = value
    end extension
  end SDL_KeyboardDeviceEvent

  /** Keyboard button event structure (event.key.*)
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  opaque type SDL_KeyboardEvent = CStruct11[
    SDL_EventType,
    Uint32,
    Uint64,
    SDL_WindowID,
    SDL_KeyboardID,
    SDL_Scancode,
    SDL_Keycode,
    SDL_Keymod,
    Uint16,
    Boolean,
    Boolean
  ]
  object SDL_KeyboardEvent:
    given _tag: Tag[SDL_KeyboardEvent] = Tag.materializeCStruct11Tag[
      SDL_EventType,
      Uint32,
      Uint64,
      SDL_WindowID,
      SDL_KeyboardID,
      SDL_Scancode,
      SDL_Keycode,
      SDL_Keymod,
      Uint16,
      Boolean,
      Boolean
    ]
    def apply()(using Zone): Ptr[SDL_KeyboardEvent] =
      scala.scalanative.unsafe.alloc[SDL_KeyboardEvent](1)
    def apply(
        `type`: SDL_EventType,
        reserved: Uint32,
        timestamp: Uint64,
        windowID: SDL_WindowID,
        which: SDL_KeyboardID,
        scancode: SDL_Scancode,
        key: SDL_Keycode,
        mod: SDL_Keymod,
        raw: Uint16,
        down: Boolean,
        repeat: Boolean
    )(using Zone): Ptr[SDL_KeyboardEvent] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).reserved = reserved
      (!____ptr).timestamp = timestamp
      (!____ptr).windowID = windowID
      (!____ptr).which = which
      (!____ptr).scancode = scancode
      (!____ptr).key = key
      (!____ptr).mod = mod
      (!____ptr).raw = raw
      (!____ptr).down = down
      (!____ptr).repeat = repeat
      ____ptr
    end apply
    extension (struct: SDL_KeyboardEvent)
      def `type`: SDL_EventType = struct._1
      def type_=(value: SDL_EventType): Unit = !struct.at1 = value
      def reserved: Uint32 = struct._2
      def reserved_=(value: Uint32): Unit = !struct.at2 = value
      def timestamp: Uint64 = struct._3
      def timestamp_=(value: Uint64): Unit = !struct.at3 = value
      def windowID: SDL_WindowID = struct._4
      def windowID_=(value: SDL_WindowID): Unit = !struct.at4 = value
      def which: SDL_KeyboardID = struct._5
      def which_=(value: SDL_KeyboardID): Unit = !struct.at5 = value
      def scancode: SDL_Scancode = struct._6
      def scancode_=(value: SDL_Scancode): Unit = !struct.at6 = value
      def key: SDL_Keycode = struct._7
      def key_=(value: SDL_Keycode): Unit = !struct.at7 = value
      def mod: SDL_Keymod = struct._8
      def mod_=(value: SDL_Keymod): Unit = !struct.at8 = value
      def raw: Uint16 = struct._9
      def raw_=(value: Uint16): Unit = !struct.at9 = value
      def down: Boolean = struct._10
      def down_=(value: Boolean): Unit = !struct.at10 = value
      def repeat: Boolean = struct._11
      def repeat_=(value: Boolean): Unit = !struct.at11 = value
    end extension
  end SDL_KeyboardEvent

  /** A struct to provide locale data.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_locale.h
    */
  opaque type SDL_Locale = CStruct2[CString, CString]
  object SDL_Locale:
    given _tag: Tag[SDL_Locale] = Tag.materializeCStruct2Tag[CString, CString]
    def apply()(using Zone): Ptr[SDL_Locale] =
      scala.scalanative.unsafe.alloc[SDL_Locale](1)
    def apply(language: CString, country: CString)(using
        Zone
    ): Ptr[SDL_Locale] =
      val ____ptr = apply()
      (!____ptr).language = language
      (!____ptr).country = country
      ____ptr
    end apply
    extension (struct: SDL_Locale)
      def language: CString = struct._1
      def language_=(value: CString): Unit = !struct.at1 = value
      def country: CString = struct._2
      def country_=(value: CString): Unit = !struct.at2 = value
    end extension
  end SDL_Locale

  /** Individual button data.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_messagebox.h
    */
  opaque type SDL_MessageBoxButtonData =
    CStruct3[SDL_MessageBoxButtonFlags, CInt, CString]
  object SDL_MessageBoxButtonData:
    given _tag: Tag[SDL_MessageBoxButtonData] =
      Tag.materializeCStruct3Tag[SDL_MessageBoxButtonFlags, CInt, CString]
    def apply()(using Zone): Ptr[SDL_MessageBoxButtonData] =
      scala.scalanative.unsafe.alloc[SDL_MessageBoxButtonData](1)
    def apply(flags: SDL_MessageBoxButtonFlags, buttonID: CInt, text: CString)(
        using Zone
    ): Ptr[SDL_MessageBoxButtonData] =
      val ____ptr = apply()
      (!____ptr).flags = flags
      (!____ptr).buttonID = buttonID
      (!____ptr).text = text
      ____ptr
    end apply
    extension (struct: SDL_MessageBoxButtonData)
      def flags: SDL_MessageBoxButtonFlags = struct._1
      def flags_=(value: SDL_MessageBoxButtonFlags): Unit = !struct.at1 = value
      def buttonID: CInt = struct._2
      def buttonID_=(value: CInt): Unit = !struct.at2 = value
      def text: CString = struct._3
      def text_=(value: CString): Unit = !struct.at3 = value
    end extension
  end SDL_MessageBoxButtonData

  /** RGB value used in a message box color scheme
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_messagebox.h
    */
  opaque type SDL_MessageBoxColor = CStruct3[Uint8, Uint8, Uint8]
  object SDL_MessageBoxColor:
    given _tag: Tag[SDL_MessageBoxColor] =
      Tag.materializeCStruct3Tag[Uint8, Uint8, Uint8]
    def apply()(using Zone): Ptr[SDL_MessageBoxColor] =
      scala.scalanative.unsafe.alloc[SDL_MessageBoxColor](1)
    def apply(r: Uint8, g: Uint8, b: Uint8)(using
        Zone
    ): Ptr[SDL_MessageBoxColor] =
      val ____ptr = apply()
      (!____ptr).r = r
      (!____ptr).g = g
      (!____ptr).b = b
      ____ptr
    end apply
    extension (struct: SDL_MessageBoxColor)
      def r: Uint8 = struct._1
      def r_=(value: Uint8): Unit = !struct.at1 = value
      def g: Uint8 = struct._2
      def g_=(value: Uint8): Unit = !struct.at2 = value
      def b: Uint8 = struct._3
      def b_=(value: Uint8): Unit = !struct.at3 = value
    end extension
  end SDL_MessageBoxColor

  /** A set of colors to use for message box dialogs
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_messagebox.h
    */
  opaque type SDL_MessageBoxColorScheme =
    CStruct1[CArray[SDL_MessageBoxColor, Nat._5]]
  object SDL_MessageBoxColorScheme:
    given _tag: Tag[SDL_MessageBoxColorScheme] =
      Tag.materializeCStruct1Tag[CArray[SDL_MessageBoxColor, Nat._5]]
    def apply()(using Zone): Ptr[SDL_MessageBoxColorScheme] =
      scala.scalanative.unsafe.alloc[SDL_MessageBoxColorScheme](1)
    def apply(colors: CArray[SDL_MessageBoxColor, Nat._5])(using
        Zone
    ): Ptr[SDL_MessageBoxColorScheme] =
      val ____ptr = apply()
      (!____ptr).colors = colors
      ____ptr
    end apply
    extension (struct: SDL_MessageBoxColorScheme)
      def colors: CArray[SDL_MessageBoxColor, Nat._5] = struct._1
      def colors_=(value: CArray[SDL_MessageBoxColor, Nat._5]): Unit =
        !struct.at1 = value
  end SDL_MessageBoxColorScheme

  /** MessageBox structure containing title, text, window, etc.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_messagebox.h
    */
  opaque type SDL_MessageBoxData =
    CStruct7[SDL_MessageBoxFlags, Ptr[SDL_Window], CString, CString, CInt, Ptr[
      SDL_MessageBoxButtonData
    ], Ptr[SDL_MessageBoxColorScheme]]
  object SDL_MessageBoxData:
    given _tag: Tag[SDL_MessageBoxData] =
      Tag.materializeCStruct7Tag[SDL_MessageBoxFlags, Ptr[
        SDL_Window
      ], CString, CString, CInt, Ptr[SDL_MessageBoxButtonData], Ptr[
        SDL_MessageBoxColorScheme
      ]]
    def apply()(using Zone): Ptr[SDL_MessageBoxData] =
      scala.scalanative.unsafe.alloc[SDL_MessageBoxData](1)
    def apply(
        flags: SDL_MessageBoxFlags,
        window: Ptr[SDL_Window],
        title: CString,
        message: CString,
        numbuttons: CInt,
        buttons: Ptr[SDL_MessageBoxButtonData],
        colorScheme: Ptr[SDL_MessageBoxColorScheme]
    )(using Zone): Ptr[SDL_MessageBoxData] =
      val ____ptr = apply()
      (!____ptr).flags = flags
      (!____ptr).window = window
      (!____ptr).title = title
      (!____ptr).message = message
      (!____ptr).numbuttons = numbuttons
      (!____ptr).buttons = buttons
      (!____ptr).colorScheme = colorScheme
      ____ptr
    end apply
    extension (struct: SDL_MessageBoxData)
      def flags: SDL_MessageBoxFlags = struct._1
      def flags_=(value: SDL_MessageBoxFlags): Unit = !struct.at1 = value
      def window: Ptr[SDL_Window] = struct._2
      def window_=(value: Ptr[SDL_Window]): Unit = !struct.at2 = value
      def title: CString = struct._3
      def title_=(value: CString): Unit = !struct.at3 = value
      def message: CString = struct._4
      def message_=(value: CString): Unit = !struct.at4 = value
      def numbuttons: CInt = struct._5
      def numbuttons_=(value: CInt): Unit = !struct.at5 = value
      def buttons: Ptr[SDL_MessageBoxButtonData] = struct._6
      def buttons_=(value: Ptr[SDL_MessageBoxButtonData]): Unit = !struct.at6 =
        value
      def colorScheme: Ptr[SDL_MessageBoxColorScheme] = struct._7
      def colorScheme_=(value: Ptr[SDL_MessageBoxColorScheme]): Unit =
        !struct.at7 = value
    end extension
  end SDL_MessageBoxData

  /** Mouse button event structure (event.button.*)
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  opaque type SDL_MouseButtonEvent = CStruct11[
    SDL_EventType,
    Uint32,
    Uint64,
    SDL_WindowID,
    SDL_MouseID,
    Uint8,
    Boolean,
    Uint8,
    Uint8,
    Float,
    Float
  ]
  object SDL_MouseButtonEvent:
    given _tag: Tag[SDL_MouseButtonEvent] = Tag.materializeCStruct11Tag[
      SDL_EventType,
      Uint32,
      Uint64,
      SDL_WindowID,
      SDL_MouseID,
      Uint8,
      Boolean,
      Uint8,
      Uint8,
      Float,
      Float
    ]
    def apply()(using Zone): Ptr[SDL_MouseButtonEvent] =
      scala.scalanative.unsafe.alloc[SDL_MouseButtonEvent](1)
    def apply(
        `type`: SDL_EventType,
        reserved: Uint32,
        timestamp: Uint64,
        windowID: SDL_WindowID,
        which: SDL_MouseID,
        button: Uint8,
        down: Boolean,
        clicks: Uint8,
        padding: Uint8,
        x: Float,
        y: Float
    )(using Zone): Ptr[SDL_MouseButtonEvent] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).reserved = reserved
      (!____ptr).timestamp = timestamp
      (!____ptr).windowID = windowID
      (!____ptr).which = which
      (!____ptr).button = button
      (!____ptr).down = down
      (!____ptr).clicks = clicks
      (!____ptr).padding = padding
      (!____ptr).x = x
      (!____ptr).y = y
      ____ptr
    end apply
    extension (struct: SDL_MouseButtonEvent)
      def `type`: SDL_EventType = struct._1
      def type_=(value: SDL_EventType): Unit = !struct.at1 = value
      def reserved: Uint32 = struct._2
      def reserved_=(value: Uint32): Unit = !struct.at2 = value
      def timestamp: Uint64 = struct._3
      def timestamp_=(value: Uint64): Unit = !struct.at3 = value
      def windowID: SDL_WindowID = struct._4
      def windowID_=(value: SDL_WindowID): Unit = !struct.at4 = value
      def which: SDL_MouseID = struct._5
      def which_=(value: SDL_MouseID): Unit = !struct.at5 = value
      def button: Uint8 = struct._6
      def button_=(value: Uint8): Unit = !struct.at6 = value
      def down: Boolean = struct._7
      def down_=(value: Boolean): Unit = !struct.at7 = value
      def clicks: Uint8 = struct._8
      def clicks_=(value: Uint8): Unit = !struct.at8 = value
      def padding: Uint8 = struct._9
      def padding_=(value: Uint8): Unit = !struct.at9 = value
      def x: Float = struct._10
      def x_=(value: Float): Unit = !struct.at10 = value
      def y: Float = struct._11
      def y_=(value: Float): Unit = !struct.at11 = value
    end extension
  end SDL_MouseButtonEvent

  /** Mouse device event structure (event.mdevice.*)
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  opaque type SDL_MouseDeviceEvent =
    CStruct4[SDL_EventType, Uint32, Uint64, SDL_MouseID]
  object SDL_MouseDeviceEvent:
    given _tag: Tag[SDL_MouseDeviceEvent] =
      Tag.materializeCStruct4Tag[SDL_EventType, Uint32, Uint64, SDL_MouseID]
    def apply()(using Zone): Ptr[SDL_MouseDeviceEvent] =
      scala.scalanative.unsafe.alloc[SDL_MouseDeviceEvent](1)
    def apply(
        `type`: SDL_EventType,
        reserved: Uint32,
        timestamp: Uint64,
        which: SDL_MouseID
    )(using Zone): Ptr[SDL_MouseDeviceEvent] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).reserved = reserved
      (!____ptr).timestamp = timestamp
      (!____ptr).which = which
      ____ptr
    end apply
    extension (struct: SDL_MouseDeviceEvent)
      def `type`: SDL_EventType = struct._1
      def type_=(value: SDL_EventType): Unit = !struct.at1 = value
      def reserved: Uint32 = struct._2
      def reserved_=(value: Uint32): Unit = !struct.at2 = value
      def timestamp: Uint64 = struct._3
      def timestamp_=(value: Uint64): Unit = !struct.at3 = value
      def which: SDL_MouseID = struct._4
      def which_=(value: SDL_MouseID): Unit = !struct.at4 = value
    end extension
  end SDL_MouseDeviceEvent

  /** Mouse motion event structure (event.motion.*)
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  opaque type SDL_MouseMotionEvent = CStruct10[
    SDL_EventType,
    Uint32,
    Uint64,
    SDL_WindowID,
    SDL_MouseID,
    SDL_MouseButtonFlags,
    Float,
    Float,
    Float,
    Float
  ]
  object SDL_MouseMotionEvent:
    given _tag: Tag[SDL_MouseMotionEvent] = Tag.materializeCStruct10Tag[
      SDL_EventType,
      Uint32,
      Uint64,
      SDL_WindowID,
      SDL_MouseID,
      SDL_MouseButtonFlags,
      Float,
      Float,
      Float,
      Float
    ]
    def apply()(using Zone): Ptr[SDL_MouseMotionEvent] =
      scala.scalanative.unsafe.alloc[SDL_MouseMotionEvent](1)
    def apply(
        `type`: SDL_EventType,
        reserved: Uint32,
        timestamp: Uint64,
        windowID: SDL_WindowID,
        which: SDL_MouseID,
        state: SDL_MouseButtonFlags,
        x: Float,
        y: Float,
        xrel: Float,
        yrel: Float
    )(using Zone): Ptr[SDL_MouseMotionEvent] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).reserved = reserved
      (!____ptr).timestamp = timestamp
      (!____ptr).windowID = windowID
      (!____ptr).which = which
      (!____ptr).state = state
      (!____ptr).x = x
      (!____ptr).y = y
      (!____ptr).xrel = xrel
      (!____ptr).yrel = yrel
      ____ptr
    end apply
    extension (struct: SDL_MouseMotionEvent)
      def `type`: SDL_EventType = struct._1
      def type_=(value: SDL_EventType): Unit = !struct.at1 = value
      def reserved: Uint32 = struct._2
      def reserved_=(value: Uint32): Unit = !struct.at2 = value
      def timestamp: Uint64 = struct._3
      def timestamp_=(value: Uint64): Unit = !struct.at3 = value
      def windowID: SDL_WindowID = struct._4
      def windowID_=(value: SDL_WindowID): Unit = !struct.at4 = value
      def which: SDL_MouseID = struct._5
      def which_=(value: SDL_MouseID): Unit = !struct.at5 = value
      def state: SDL_MouseButtonFlags = struct._6
      def state_=(value: SDL_MouseButtonFlags): Unit = !struct.at6 = value
      def x: Float = struct._7
      def x_=(value: Float): Unit = !struct.at7 = value
      def y: Float = struct._8
      def y_=(value: Float): Unit = !struct.at8 = value
      def xrel: Float = struct._9
      def xrel_=(value: Float): Unit = !struct.at9 = value
      def yrel: Float = struct._10
      def yrel_=(value: Float): Unit = !struct.at10 = value
    end extension
  end SDL_MouseMotionEvent

  /** Mouse wheel event structure (event.wheel.*)
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  opaque type SDL_MouseWheelEvent = CStruct10[
    SDL_EventType,
    Uint32,
    Uint64,
    SDL_WindowID,
    SDL_MouseID,
    Float,
    Float,
    SDL_MouseWheelDirection,
    Float,
    Float
  ]
  object SDL_MouseWheelEvent:
    given _tag: Tag[SDL_MouseWheelEvent] = Tag.materializeCStruct10Tag[
      SDL_EventType,
      Uint32,
      Uint64,
      SDL_WindowID,
      SDL_MouseID,
      Float,
      Float,
      SDL_MouseWheelDirection,
      Float,
      Float
    ]
    def apply()(using Zone): Ptr[SDL_MouseWheelEvent] =
      scala.scalanative.unsafe.alloc[SDL_MouseWheelEvent](1)
    def apply(
        `type`: SDL_EventType,
        reserved: Uint32,
        timestamp: Uint64,
        windowID: SDL_WindowID,
        which: SDL_MouseID,
        x: Float,
        y: Float,
        direction: SDL_MouseWheelDirection,
        mouse_x: Float,
        mouse_y: Float
    )(using Zone): Ptr[SDL_MouseWheelEvent] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).reserved = reserved
      (!____ptr).timestamp = timestamp
      (!____ptr).windowID = windowID
      (!____ptr).which = which
      (!____ptr).x = x
      (!____ptr).y = y
      (!____ptr).direction = direction
      (!____ptr).mouse_x = mouse_x
      (!____ptr).mouse_y = mouse_y
      ____ptr
    end apply
    extension (struct: SDL_MouseWheelEvent)
      def `type`: SDL_EventType = struct._1
      def type_=(value: SDL_EventType): Unit = !struct.at1 = value
      def reserved: Uint32 = struct._2
      def reserved_=(value: Uint32): Unit = !struct.at2 = value
      def timestamp: Uint64 = struct._3
      def timestamp_=(value: Uint64): Unit = !struct.at3 = value
      def windowID: SDL_WindowID = struct._4
      def windowID_=(value: SDL_WindowID): Unit = !struct.at4 = value
      def which: SDL_MouseID = struct._5
      def which_=(value: SDL_MouseID): Unit = !struct.at5 = value
      def x: Float = struct._6
      def x_=(value: Float): Unit = !struct.at6 = value
      def y: Float = struct._7
      def y_=(value: Float): Unit = !struct.at7 = value
      def direction: SDL_MouseWheelDirection = struct._8
      def direction_=(value: SDL_MouseWheelDirection): Unit = !struct.at8 =
        value
      def mouse_x: Float = struct._9
      def mouse_x_=(value: Float): Unit = !struct.at9 = value
      def mouse_y: Float = struct._10
      def mouse_y_=(value: Float): Unit = !struct.at10 = value
    end extension
  end SDL_MouseWheelEvent

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mutex.h
    */
  opaque type SDL_Mutex = CStruct0
  object SDL_Mutex:
    given _tag: Tag[SDL_Mutex] = Tag.materializeCStruct0Tag

  /** A set of indexed colors representing a palette.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_pixels.h
    */
  opaque type SDL_Palette = CStruct4[CInt, Ptr[SDL_Color], Uint32, CInt]
  object SDL_Palette:
    given _tag: Tag[SDL_Palette] =
      Tag.materializeCStruct4Tag[CInt, Ptr[SDL_Color], Uint32, CInt]
    def apply()(using Zone): Ptr[SDL_Palette] =
      scala.scalanative.unsafe.alloc[SDL_Palette](1)
    def apply(
        ncolors: CInt,
        colors: Ptr[SDL_Color],
        version: Uint32,
        refcount: CInt
    )(using Zone): Ptr[SDL_Palette] =
      val ____ptr = apply()
      (!____ptr).ncolors = ncolors
      (!____ptr).colors = colors
      (!____ptr).version = version
      (!____ptr).refcount = refcount
      ____ptr
    end apply
    extension (struct: SDL_Palette)
      def ncolors: CInt = struct._1
      def ncolors_=(value: CInt): Unit = !struct.at1 = value
      def colors: Ptr[SDL_Color] = struct._2
      def colors_=(value: Ptr[SDL_Color]): Unit = !struct.at2 = value
      def version: Uint32 = struct._3
      def version_=(value: Uint32): Unit = !struct.at3 = value
      def refcount: CInt = struct._4
      def refcount_=(value: CInt): Unit = !struct.at4 = value
    end extension
  end SDL_Palette

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_filesystem.h
    */
  opaque type SDL_PathInfo =
    CStruct5[SDL_PathType, Uint64, SDL_Time, SDL_Time, SDL_Time]
  object SDL_PathInfo:
    given _tag: Tag[SDL_PathInfo] = Tag.materializeCStruct5Tag[
      SDL_PathType,
      Uint64,
      SDL_Time,
      SDL_Time,
      SDL_Time
    ]
    def apply()(using Zone): Ptr[SDL_PathInfo] =
      scala.scalanative.unsafe.alloc[SDL_PathInfo](1)
    def apply(
        `type`: SDL_PathType,
        size: Uint64,
        create_time: SDL_Time,
        modify_time: SDL_Time,
        access_time: SDL_Time
    )(using Zone): Ptr[SDL_PathInfo] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).size = size
      (!____ptr).create_time = create_time
      (!____ptr).modify_time = modify_time
      (!____ptr).access_time = access_time
      ____ptr
    end apply
    extension (struct: SDL_PathInfo)
      def `type`: SDL_PathType = struct._1
      def type_=(value: SDL_PathType): Unit = !struct.at1 = value
      def size: Uint64 = struct._2
      def size_=(value: Uint64): Unit = !struct.at2 = value
      def create_time: SDL_Time = struct._3
      def create_time_=(value: SDL_Time): Unit = !struct.at3 = value
      def modify_time: SDL_Time = struct._4
      def modify_time_=(value: SDL_Time): Unit = !struct.at4 = value
      def access_time: SDL_Time = struct._5
      def access_time_=(value: SDL_Time): Unit = !struct.at5 = value
    end extension
  end SDL_PathInfo

  /** Pressure-sensitive pen pressure / angle event structure (event.paxis.*)
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  opaque type SDL_PenAxisEvent = CStruct10[
    SDL_EventType,
    Uint32,
    Uint64,
    SDL_WindowID,
    SDL_PenID,
    SDL_PenInputFlags,
    Float,
    Float,
    SDL_PenAxis,
    Float
  ]
  object SDL_PenAxisEvent:
    given _tag: Tag[SDL_PenAxisEvent] = Tag.materializeCStruct10Tag[
      SDL_EventType,
      Uint32,
      Uint64,
      SDL_WindowID,
      SDL_PenID,
      SDL_PenInputFlags,
      Float,
      Float,
      SDL_PenAxis,
      Float
    ]
    def apply()(using Zone): Ptr[SDL_PenAxisEvent] =
      scala.scalanative.unsafe.alloc[SDL_PenAxisEvent](1)
    def apply(
        `type`: SDL_EventType,
        reserved: Uint32,
        timestamp: Uint64,
        windowID: SDL_WindowID,
        which: SDL_PenID,
        pen_state: SDL_PenInputFlags,
        x: Float,
        y: Float,
        axis: SDL_PenAxis,
        value: Float
    )(using Zone): Ptr[SDL_PenAxisEvent] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).reserved = reserved
      (!____ptr).timestamp = timestamp
      (!____ptr).windowID = windowID
      (!____ptr).which = which
      (!____ptr).pen_state = pen_state
      (!____ptr).x = x
      (!____ptr).y = y
      (!____ptr).axis = axis
      (!____ptr).value = value
      ____ptr
    end apply
    extension (struct: SDL_PenAxisEvent)
      def `type`: SDL_EventType = struct._1
      def type_=(value: SDL_EventType): Unit = !struct.at1 = value
      def reserved: Uint32 = struct._2
      def reserved_=(value: Uint32): Unit = !struct.at2 = value
      def timestamp: Uint64 = struct._3
      def timestamp_=(value: Uint64): Unit = !struct.at3 = value
      def windowID: SDL_WindowID = struct._4
      def windowID_=(value: SDL_WindowID): Unit = !struct.at4 = value
      def which: SDL_PenID = struct._5
      def which_=(value: SDL_PenID): Unit = !struct.at5 = value
      def pen_state: SDL_PenInputFlags = struct._6
      def pen_state_=(value: SDL_PenInputFlags): Unit = !struct.at6 = value
      def x: Float = struct._7
      def x_=(value: Float): Unit = !struct.at7 = value
      def y: Float = struct._8
      def y_=(value: Float): Unit = !struct.at8 = value
      def axis: SDL_PenAxis = struct._9
      def axis_=(value: SDL_PenAxis): Unit = !struct.at9 = value
      def value: Float = struct._10
      def value_=(value: Float): Unit = !struct.at10 = value
    end extension
  end SDL_PenAxisEvent

  /** Pressure-sensitive pen button event structure (event.pbutton.*)
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  opaque type SDL_PenButtonEvent = CStruct10[
    SDL_EventType,
    Uint32,
    Uint64,
    SDL_WindowID,
    SDL_PenID,
    SDL_PenInputFlags,
    Float,
    Float,
    Uint8,
    Boolean
  ]
  object SDL_PenButtonEvent:
    given _tag: Tag[SDL_PenButtonEvent] = Tag.materializeCStruct10Tag[
      SDL_EventType,
      Uint32,
      Uint64,
      SDL_WindowID,
      SDL_PenID,
      SDL_PenInputFlags,
      Float,
      Float,
      Uint8,
      Boolean
    ]
    def apply()(using Zone): Ptr[SDL_PenButtonEvent] =
      scala.scalanative.unsafe.alloc[SDL_PenButtonEvent](1)
    def apply(
        `type`: SDL_EventType,
        reserved: Uint32,
        timestamp: Uint64,
        windowID: SDL_WindowID,
        which: SDL_PenID,
        pen_state: SDL_PenInputFlags,
        x: Float,
        y: Float,
        button: Uint8,
        down: Boolean
    )(using Zone): Ptr[SDL_PenButtonEvent] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).reserved = reserved
      (!____ptr).timestamp = timestamp
      (!____ptr).windowID = windowID
      (!____ptr).which = which
      (!____ptr).pen_state = pen_state
      (!____ptr).x = x
      (!____ptr).y = y
      (!____ptr).button = button
      (!____ptr).down = down
      ____ptr
    end apply
    extension (struct: SDL_PenButtonEvent)
      def `type`: SDL_EventType = struct._1
      def type_=(value: SDL_EventType): Unit = !struct.at1 = value
      def reserved: Uint32 = struct._2
      def reserved_=(value: Uint32): Unit = !struct.at2 = value
      def timestamp: Uint64 = struct._3
      def timestamp_=(value: Uint64): Unit = !struct.at3 = value
      def windowID: SDL_WindowID = struct._4
      def windowID_=(value: SDL_WindowID): Unit = !struct.at4 = value
      def which: SDL_PenID = struct._5
      def which_=(value: SDL_PenID): Unit = !struct.at5 = value
      def pen_state: SDL_PenInputFlags = struct._6
      def pen_state_=(value: SDL_PenInputFlags): Unit = !struct.at6 = value
      def x: Float = struct._7
      def x_=(value: Float): Unit = !struct.at7 = value
      def y: Float = struct._8
      def y_=(value: Float): Unit = !struct.at8 = value
      def button: Uint8 = struct._9
      def button_=(value: Uint8): Unit = !struct.at9 = value
      def down: Boolean = struct._10
      def down_=(value: Boolean): Unit = !struct.at10 = value
    end extension
  end SDL_PenButtonEvent

  /** Pressure-sensitive pen motion event structure (event.pmotion.*)
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  opaque type SDL_PenMotionEvent = CStruct8[
    SDL_EventType,
    Uint32,
    Uint64,
    SDL_WindowID,
    SDL_PenID,
    SDL_PenInputFlags,
    Float,
    Float
  ]
  object SDL_PenMotionEvent:
    given _tag: Tag[SDL_PenMotionEvent] = Tag.materializeCStruct8Tag[
      SDL_EventType,
      Uint32,
      Uint64,
      SDL_WindowID,
      SDL_PenID,
      SDL_PenInputFlags,
      Float,
      Float
    ]
    def apply()(using Zone): Ptr[SDL_PenMotionEvent] =
      scala.scalanative.unsafe.alloc[SDL_PenMotionEvent](1)
    def apply(
        `type`: SDL_EventType,
        reserved: Uint32,
        timestamp: Uint64,
        windowID: SDL_WindowID,
        which: SDL_PenID,
        pen_state: SDL_PenInputFlags,
        x: Float,
        y: Float
    )(using Zone): Ptr[SDL_PenMotionEvent] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).reserved = reserved
      (!____ptr).timestamp = timestamp
      (!____ptr).windowID = windowID
      (!____ptr).which = which
      (!____ptr).pen_state = pen_state
      (!____ptr).x = x
      (!____ptr).y = y
      ____ptr
    end apply
    extension (struct: SDL_PenMotionEvent)
      def `type`: SDL_EventType = struct._1
      def type_=(value: SDL_EventType): Unit = !struct.at1 = value
      def reserved: Uint32 = struct._2
      def reserved_=(value: Uint32): Unit = !struct.at2 = value
      def timestamp: Uint64 = struct._3
      def timestamp_=(value: Uint64): Unit = !struct.at3 = value
      def windowID: SDL_WindowID = struct._4
      def windowID_=(value: SDL_WindowID): Unit = !struct.at4 = value
      def which: SDL_PenID = struct._5
      def which_=(value: SDL_PenID): Unit = !struct.at5 = value
      def pen_state: SDL_PenInputFlags = struct._6
      def pen_state_=(value: SDL_PenInputFlags): Unit = !struct.at6 = value
      def x: Float = struct._7
      def x_=(value: Float): Unit = !struct.at7 = value
      def y: Float = struct._8
      def y_=(value: Float): Unit = !struct.at8 = value
    end extension
  end SDL_PenMotionEvent

  /** Pressure-sensitive pen proximity event structure (event.pmotion.*)
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  opaque type SDL_PenProximityEvent =
    CStruct5[SDL_EventType, Uint32, Uint64, SDL_WindowID, SDL_PenID]
  object SDL_PenProximityEvent:
    given _tag: Tag[SDL_PenProximityEvent] = Tag.materializeCStruct5Tag[
      SDL_EventType,
      Uint32,
      Uint64,
      SDL_WindowID,
      SDL_PenID
    ]
    def apply()(using Zone): Ptr[SDL_PenProximityEvent] =
      scala.scalanative.unsafe.alloc[SDL_PenProximityEvent](1)
    def apply(
        `type`: SDL_EventType,
        reserved: Uint32,
        timestamp: Uint64,
        windowID: SDL_WindowID,
        which: SDL_PenID
    )(using Zone): Ptr[SDL_PenProximityEvent] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).reserved = reserved
      (!____ptr).timestamp = timestamp
      (!____ptr).windowID = windowID
      (!____ptr).which = which
      ____ptr
    end apply
    extension (struct: SDL_PenProximityEvent)
      def `type`: SDL_EventType = struct._1
      def type_=(value: SDL_EventType): Unit = !struct.at1 = value
      def reserved: Uint32 = struct._2
      def reserved_=(value: Uint32): Unit = !struct.at2 = value
      def timestamp: Uint64 = struct._3
      def timestamp_=(value: Uint64): Unit = !struct.at3 = value
      def windowID: SDL_WindowID = struct._4
      def windowID_=(value: SDL_WindowID): Unit = !struct.at4 = value
      def which: SDL_PenID = struct._5
      def which_=(value: SDL_PenID): Unit = !struct.at5 = value
    end extension
  end SDL_PenProximityEvent

  /** Pressure-sensitive pen touched event structure (event.ptouch.*)
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  opaque type SDL_PenTouchEvent = CStruct10[
    SDL_EventType,
    Uint32,
    Uint64,
    SDL_WindowID,
    SDL_PenID,
    SDL_PenInputFlags,
    Float,
    Float,
    Boolean,
    Boolean
  ]
  object SDL_PenTouchEvent:
    given _tag: Tag[SDL_PenTouchEvent] = Tag.materializeCStruct10Tag[
      SDL_EventType,
      Uint32,
      Uint64,
      SDL_WindowID,
      SDL_PenID,
      SDL_PenInputFlags,
      Float,
      Float,
      Boolean,
      Boolean
    ]
    def apply()(using Zone): Ptr[SDL_PenTouchEvent] =
      scala.scalanative.unsafe.alloc[SDL_PenTouchEvent](1)
    def apply(
        `type`: SDL_EventType,
        reserved: Uint32,
        timestamp: Uint64,
        windowID: SDL_WindowID,
        which: SDL_PenID,
        pen_state: SDL_PenInputFlags,
        x: Float,
        y: Float,
        eraser: Boolean,
        down: Boolean
    )(using Zone): Ptr[SDL_PenTouchEvent] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).reserved = reserved
      (!____ptr).timestamp = timestamp
      (!____ptr).windowID = windowID
      (!____ptr).which = which
      (!____ptr).pen_state = pen_state
      (!____ptr).x = x
      (!____ptr).y = y
      (!____ptr).eraser = eraser
      (!____ptr).down = down
      ____ptr
    end apply
    extension (struct: SDL_PenTouchEvent)
      def `type`: SDL_EventType = struct._1
      def type_=(value: SDL_EventType): Unit = !struct.at1 = value
      def reserved: Uint32 = struct._2
      def reserved_=(value: Uint32): Unit = !struct.at2 = value
      def timestamp: Uint64 = struct._3
      def timestamp_=(value: Uint64): Unit = !struct.at3 = value
      def windowID: SDL_WindowID = struct._4
      def windowID_=(value: SDL_WindowID): Unit = !struct.at4 = value
      def which: SDL_PenID = struct._5
      def which_=(value: SDL_PenID): Unit = !struct.at5 = value
      def pen_state: SDL_PenInputFlags = struct._6
      def pen_state_=(value: SDL_PenInputFlags): Unit = !struct.at6 = value
      def x: Float = struct._7
      def x_=(value: Float): Unit = !struct.at7 = value
      def y: Float = struct._8
      def y_=(value: Float): Unit = !struct.at8 = value
      def eraser: Boolean = struct._9
      def eraser_=(value: Boolean): Unit = !struct.at9 = value
      def down: Boolean = struct._10
      def down_=(value: Boolean): Unit = !struct.at10 = value
    end extension
  end SDL_PenTouchEvent

  /** Details about the format of a pixel.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_pixels.h
    */
  opaque type SDL_PixelFormatDetails = CStruct16[
    SDL_PixelFormat,
    Uint8,
    Uint8,
    CArray[Uint8, Nat._2],
    Uint32,
    Uint32,
    Uint32,
    Uint32,
    Uint8,
    Uint8,
    Uint8,
    Uint8,
    Uint8,
    Uint8,
    Uint8,
    Uint8
  ]
  object SDL_PixelFormatDetails:
    given _tag: Tag[SDL_PixelFormatDetails] = Tag.materializeCStruct16Tag[
      SDL_PixelFormat,
      Uint8,
      Uint8,
      CArray[Uint8, Nat._2],
      Uint32,
      Uint32,
      Uint32,
      Uint32,
      Uint8,
      Uint8,
      Uint8,
      Uint8,
      Uint8,
      Uint8,
      Uint8,
      Uint8
    ]
    def apply()(using Zone): Ptr[SDL_PixelFormatDetails] =
      scala.scalanative.unsafe.alloc[SDL_PixelFormatDetails](1)
    def apply(
        format: SDL_PixelFormat,
        bits_per_pixel: Uint8,
        bytes_per_pixel: Uint8,
        padding: CArray[Uint8, Nat._2],
        Rmask: Uint32,
        Gmask: Uint32,
        Bmask: Uint32,
        Amask: Uint32,
        Rbits: Uint8,
        Gbits: Uint8,
        Bbits: Uint8,
        Abits: Uint8,
        Rshift: Uint8,
        Gshift: Uint8,
        Bshift: Uint8,
        Ashift: Uint8
    )(using Zone): Ptr[SDL_PixelFormatDetails] =
      val ____ptr = apply()
      (!____ptr).format = format
      (!____ptr).bits_per_pixel = bits_per_pixel
      (!____ptr).bytes_per_pixel = bytes_per_pixel
      (!____ptr).padding = padding
      (!____ptr).Rmask = Rmask
      (!____ptr).Gmask = Gmask
      (!____ptr).Bmask = Bmask
      (!____ptr).Amask = Amask
      (!____ptr).Rbits = Rbits
      (!____ptr).Gbits = Gbits
      (!____ptr).Bbits = Bbits
      (!____ptr).Abits = Abits
      (!____ptr).Rshift = Rshift
      (!____ptr).Gshift = Gshift
      (!____ptr).Bshift = Bshift
      (!____ptr).Ashift = Ashift
      ____ptr
    end apply
    extension (struct: SDL_PixelFormatDetails)
      def format: SDL_PixelFormat = struct._1
      def format_=(value: SDL_PixelFormat): Unit = !struct.at1 = value
      def bits_per_pixel: Uint8 = struct._2
      def bits_per_pixel_=(value: Uint8): Unit = !struct.at2 = value
      def bytes_per_pixel: Uint8 = struct._3
      def bytes_per_pixel_=(value: Uint8): Unit = !struct.at3 = value
      def padding: CArray[Uint8, Nat._2] = struct._4
      def padding_=(value: CArray[Uint8, Nat._2]): Unit = !struct.at4 = value
      def Rmask: Uint32 = struct._5
      def Rmask_=(value: Uint32): Unit = !struct.at5 = value
      def Gmask: Uint32 = struct._6
      def Gmask_=(value: Uint32): Unit = !struct.at6 = value
      def Bmask: Uint32 = struct._7
      def Bmask_=(value: Uint32): Unit = !struct.at7 = value
      def Amask: Uint32 = struct._8
      def Amask_=(value: Uint32): Unit = !struct.at8 = value
      def Rbits: Uint8 = struct._9
      def Rbits_=(value: Uint8): Unit = !struct.at9 = value
      def Gbits: Uint8 = struct._10
      def Gbits_=(value: Uint8): Unit = !struct.at10 = value
      def Bbits: Uint8 = struct._11
      def Bbits_=(value: Uint8): Unit = !struct.at11 = value
      def Abits: Uint8 = struct._12
      def Abits_=(value: Uint8): Unit = !struct.at12 = value
      def Rshift: Uint8 = struct._13
      def Rshift_=(value: Uint8): Unit = !struct.at13 = value
      def Gshift: Uint8 = struct._14
      def Gshift_=(value: Uint8): Unit = !struct.at14 = value
      def Bshift: Uint8 = struct._15
      def Bshift_=(value: Uint8): Unit = !struct.at15 = value
      def Ashift: Uint8 = struct._16
      def Ashift_=(value: Uint8): Unit = !struct.at16 = value
    end extension
  end SDL_PixelFormatDetails

  /** The structure that defines a point (using integers).
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_rect.h
    */
  opaque type SDL_Point = CStruct2[CInt, CInt]
  object SDL_Point:
    given _tag: Tag[SDL_Point] = Tag.materializeCStruct2Tag[CInt, CInt]
    def apply()(using Zone): Ptr[SDL_Point] =
      scala.scalanative.unsafe.alloc[SDL_Point](1)
    def apply(x: CInt, y: CInt)(using Zone): Ptr[SDL_Point] =
      val ____ptr = apply()
      (!____ptr).x = x
      (!____ptr).y = y
      ____ptr
    end apply
    extension (struct: SDL_Point)
      def x: CInt = struct._1
      def x_=(value: CInt): Unit = !struct.at1 = value
      def y: CInt = struct._2
      def y_=(value: CInt): Unit = !struct.at2 = value
    end extension
  end SDL_Point

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_process.h
    */
  opaque type SDL_Process = CStruct0
  object SDL_Process:
    given _tag: Tag[SDL_Process] = Tag.materializeCStruct0Tag

  /** The "quit requested" event
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  opaque type SDL_QuitEvent = CStruct3[SDL_EventType, Uint32, Uint64]
  object SDL_QuitEvent:
    given _tag: Tag[SDL_QuitEvent] =
      Tag.materializeCStruct3Tag[SDL_EventType, Uint32, Uint64]
    def apply()(using Zone): Ptr[SDL_QuitEvent] =
      scala.scalanative.unsafe.alloc[SDL_QuitEvent](1)
    def apply(`type`: SDL_EventType, reserved: Uint32, timestamp: Uint64)(using
        Zone
    ): Ptr[SDL_QuitEvent] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).reserved = reserved
      (!____ptr).timestamp = timestamp
      ____ptr
    end apply
    extension (struct: SDL_QuitEvent)
      def `type`: SDL_EventType = struct._1
      def type_=(value: SDL_EventType): Unit = !struct.at1 = value
      def reserved: Uint32 = struct._2
      def reserved_=(value: Uint32): Unit = !struct.at2 = value
      def timestamp: Uint64 = struct._3
      def timestamp_=(value: Uint64): Unit = !struct.at3 = value
    end extension
  end SDL_QuitEvent

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mutex.h
    */
  opaque type SDL_RWLock = CStruct0
  object SDL_RWLock:
    given _tag: Tag[SDL_RWLock] = Tag.materializeCStruct0Tag

  /** A rectangle, with the origin at the upper left (using integers).
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_rect.h
    */
  opaque type SDL_Rect = CStruct4[CInt, CInt, CInt, CInt]
  object SDL_Rect:
    given _tag: Tag[SDL_Rect] =
      Tag.materializeCStruct4Tag[CInt, CInt, CInt, CInt]
    def apply()(using Zone): Ptr[SDL_Rect] =
      scala.scalanative.unsafe.alloc[SDL_Rect](1)
    def apply(x: CInt, y: CInt, w: CInt, h: CInt)(using Zone): Ptr[SDL_Rect] =
      val ____ptr = apply()
      (!____ptr).x = x
      (!____ptr).y = y
      (!____ptr).w = w
      (!____ptr).h = h
      ____ptr
    end apply
    extension (struct: SDL_Rect)
      def x: CInt = struct._1
      def x_=(value: CInt): Unit = !struct.at1 = value
      def y: CInt = struct._2
      def y_=(value: CInt): Unit = !struct.at2 = value
      def w: CInt = struct._3
      def w_=(value: CInt): Unit = !struct.at3 = value
      def h: CInt = struct._4
      def h_=(value: CInt): Unit = !struct.at4 = value
    end extension
  end SDL_Rect

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  opaque type SDL_Renderer = CStruct0
  object SDL_Renderer:
    given _tag: Tag[SDL_Renderer] = Tag.materializeCStruct0Tag

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mutex.h
    */
  opaque type SDL_Semaphore = CStruct0
  object SDL_Semaphore:
    given _tag: Tag[SDL_Semaphore] = Tag.materializeCStruct0Tag

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_sensor.h
    */
  opaque type SDL_Sensor = CStruct0
  object SDL_Sensor:
    given _tag: Tag[SDL_Sensor] = Tag.materializeCStruct0Tag

  /** Sensor event structure (event.sensor.*)
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  opaque type SDL_SensorEvent = CStruct6[
    SDL_EventType,
    Uint32,
    Uint64,
    SDL_SensorID,
    CArray[Float, Nat._6],
    Uint64
  ]
  object SDL_SensorEvent:
    given _tag: Tag[SDL_SensorEvent] = Tag.materializeCStruct6Tag[
      SDL_EventType,
      Uint32,
      Uint64,
      SDL_SensorID,
      CArray[Float, Nat._6],
      Uint64
    ]
    def apply()(using Zone): Ptr[SDL_SensorEvent] =
      scala.scalanative.unsafe.alloc[SDL_SensorEvent](1)
    def apply(
        `type`: SDL_EventType,
        reserved: Uint32,
        timestamp: Uint64,
        which: SDL_SensorID,
        data: CArray[Float, Nat._6],
        sensor_timestamp: Uint64
    )(using Zone): Ptr[SDL_SensorEvent] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).reserved = reserved
      (!____ptr).timestamp = timestamp
      (!____ptr).which = which
      (!____ptr).data = data
      (!____ptr).sensor_timestamp = sensor_timestamp
      ____ptr
    end apply
    extension (struct: SDL_SensorEvent)
      def `type`: SDL_EventType = struct._1
      def type_=(value: SDL_EventType): Unit = !struct.at1 = value
      def reserved: Uint32 = struct._2
      def reserved_=(value: Uint32): Unit = !struct.at2 = value
      def timestamp: Uint64 = struct._3
      def timestamp_=(value: Uint64): Unit = !struct.at3 = value
      def which: SDL_SensorID = struct._4
      def which_=(value: SDL_SensorID): Unit = !struct.at4 = value
      def data: CArray[Float, Nat._6] = struct._5
      def data_=(value: CArray[Float, Nat._6]): Unit = !struct.at5 = value
      def sensor_timestamp: Uint64 = struct._6
      def sensor_timestamp_=(value: Uint64): Unit = !struct.at6 = value
    end extension
  end SDL_SensorEvent

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_loadso.h
    */
  opaque type SDL_SharedObject = CStruct0
  object SDL_SharedObject:
    given _tag: Tag[SDL_SharedObject] = Tag.materializeCStruct0Tag

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_storage.h
    */
  opaque type SDL_Storage = CStruct0
  object SDL_Storage:
    given _tag: Tag[SDL_Storage] = Tag.materializeCStruct0Tag

  /** Function interface for SDL_Storage.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_storage.h
    */
  opaque type SDL_StorageInterface = CStruct12[
    Uint32,
    CFuncPtr1[Ptr[Byte], Boolean],
    CFuncPtr1[Ptr[Byte], Boolean],
    CFuncPtr4[Ptr[Byte], CString, SDL_EnumerateDirectoryCallback, Ptr[
      Byte
    ], Boolean],
    CFuncPtr3[Ptr[Byte], CString, Ptr[SDL_PathInfo], Boolean],
    CFuncPtr4[Ptr[Byte], CString, Ptr[Byte], Uint64, Boolean],
    CFuncPtr4[Ptr[Byte], CString, Ptr[Byte], Uint64, Boolean],
    CFuncPtr2[Ptr[Byte], CString, Boolean],
    CFuncPtr2[Ptr[Byte], CString, Boolean],
    CFuncPtr3[Ptr[Byte], CString, CString, Boolean],
    CFuncPtr3[Ptr[Byte], CString, CString, Boolean],
    CFuncPtr1[Ptr[Byte], Uint64]
  ]
  object SDL_StorageInterface:
    given _tag: Tag[SDL_StorageInterface] = Tag.materializeCStruct12Tag[
      Uint32,
      CFuncPtr1[Ptr[Byte], Boolean],
      CFuncPtr1[Ptr[Byte], Boolean],
      CFuncPtr4[Ptr[Byte], CString, SDL_EnumerateDirectoryCallback, Ptr[
        Byte
      ], Boolean],
      CFuncPtr3[Ptr[Byte], CString, Ptr[SDL_PathInfo], Boolean],
      CFuncPtr4[Ptr[Byte], CString, Ptr[Byte], Uint64, Boolean],
      CFuncPtr4[Ptr[Byte], CString, Ptr[Byte], Uint64, Boolean],
      CFuncPtr2[Ptr[Byte], CString, Boolean],
      CFuncPtr2[Ptr[Byte], CString, Boolean],
      CFuncPtr3[Ptr[Byte], CString, CString, Boolean],
      CFuncPtr3[Ptr[Byte], CString, CString, Boolean],
      CFuncPtr1[Ptr[Byte], Uint64]
    ]
    def apply()(using Zone): Ptr[SDL_StorageInterface] =
      scala.scalanative.unsafe.alloc[SDL_StorageInterface](1)
    def apply(
        version: Uint32,
        close: CFuncPtr1[Ptr[Byte], Boolean],
        ready: CFuncPtr1[Ptr[Byte], Boolean],
        enumerate: CFuncPtr4[Ptr[
          Byte
        ], CString, SDL_EnumerateDirectoryCallback, Ptr[Byte], Boolean],
        info: CFuncPtr3[Ptr[Byte], CString, Ptr[SDL_PathInfo], Boolean],
        read_file: CFuncPtr4[Ptr[Byte], CString, Ptr[Byte], Uint64, Boolean],
        write_file: CFuncPtr4[Ptr[Byte], CString, Ptr[Byte], Uint64, Boolean],
        mkdir: CFuncPtr2[Ptr[Byte], CString, Boolean],
        remove: CFuncPtr2[Ptr[Byte], CString, Boolean],
        rename: CFuncPtr3[Ptr[Byte], CString, CString, Boolean],
        copy: CFuncPtr3[Ptr[Byte], CString, CString, Boolean],
        space_remaining: CFuncPtr1[Ptr[Byte], Uint64]
    )(using Zone): Ptr[SDL_StorageInterface] =
      val ____ptr = apply()
      (!____ptr).version = version
      (!____ptr).close = close
      (!____ptr).ready = ready
      (!____ptr).enumerate = enumerate
      (!____ptr).info = info
      (!____ptr).read_file = read_file
      (!____ptr).write_file = write_file
      (!____ptr).mkdir = mkdir
      (!____ptr).remove = remove
      (!____ptr).rename = rename
      (!____ptr).copy = copy
      (!____ptr).space_remaining = space_remaining
      ____ptr
    end apply
    extension (struct: SDL_StorageInterface)
      def version: Uint32 = struct._1
      def version_=(value: Uint32): Unit = !struct.at1 = value
      def close: CFuncPtr1[Ptr[Byte], Boolean] = struct._2
      def close_=(value: CFuncPtr1[Ptr[Byte], Boolean]): Unit = !struct.at2 =
        value
      def ready: CFuncPtr1[Ptr[Byte], Boolean] = struct._3
      def ready_=(value: CFuncPtr1[Ptr[Byte], Boolean]): Unit = !struct.at3 =
        value
      def enumerate: CFuncPtr4[Ptr[
        Byte
      ], CString, SDL_EnumerateDirectoryCallback, Ptr[Byte], Boolean] =
        struct._4
      def enumerate_=(
          value: CFuncPtr4[Ptr[
            Byte
          ], CString, SDL_EnumerateDirectoryCallback, Ptr[Byte], Boolean]
      ): Unit = !struct.at4 = value
      def info: CFuncPtr3[Ptr[Byte], CString, Ptr[SDL_PathInfo], Boolean] =
        struct._5
      def info_=(
          value: CFuncPtr3[Ptr[Byte], CString, Ptr[SDL_PathInfo], Boolean]
      ): Unit = !struct.at5 = value
      def read_file: CFuncPtr4[Ptr[Byte], CString, Ptr[Byte], Uint64, Boolean] =
        struct._6
      def read_file_=(
          value: CFuncPtr4[Ptr[Byte], CString, Ptr[Byte], Uint64, Boolean]
      ): Unit = !struct.at6 = value
      def write_file
          : CFuncPtr4[Ptr[Byte], CString, Ptr[Byte], Uint64, Boolean] =
        struct._7
      def write_file_=(
          value: CFuncPtr4[Ptr[Byte], CString, Ptr[Byte], Uint64, Boolean]
      ): Unit = !struct.at7 = value
      def mkdir: CFuncPtr2[Ptr[Byte], CString, Boolean] = struct._8
      def mkdir_=(value: CFuncPtr2[Ptr[Byte], CString, Boolean]): Unit =
        !struct.at8 = value
      def remove: CFuncPtr2[Ptr[Byte], CString, Boolean] = struct._9
      def remove_=(value: CFuncPtr2[Ptr[Byte], CString, Boolean]): Unit =
        !struct.at9 = value
      def rename: CFuncPtr3[Ptr[Byte], CString, CString, Boolean] = struct._10
      def rename_=(
          value: CFuncPtr3[Ptr[Byte], CString, CString, Boolean]
      ): Unit = !struct.at10 = value
      def copy: CFuncPtr3[Ptr[Byte], CString, CString, Boolean] = struct._11
      def copy_=(value: CFuncPtr3[Ptr[Byte], CString, CString, Boolean]): Unit =
        !struct.at11 = value
      def space_remaining: CFuncPtr1[Ptr[Byte], Uint64] = struct._12
      def space_remaining_=(value: CFuncPtr1[Ptr[Byte], Uint64]): Unit =
        !struct.at12 = value
    end extension
  end SDL_StorageInterface

  /** A collection of pixels used in software blitting.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  opaque type SDL_Surface =
    CStruct8[SDL_SurfaceFlags, SDL_PixelFormat, CInt, CInt, CInt, Ptr[
      Byte
    ], CInt, Ptr[Byte]]
  object SDL_Surface:
    given _tag: Tag[SDL_Surface] = Tag.materializeCStruct8Tag[
      SDL_SurfaceFlags,
      SDL_PixelFormat,
      CInt,
      CInt,
      CInt,
      Ptr[Byte],
      CInt,
      Ptr[Byte]
    ]
    def apply()(using Zone): Ptr[SDL_Surface] =
      scala.scalanative.unsafe.alloc[SDL_Surface](1)
    def apply(
        flags: SDL_SurfaceFlags,
        format: SDL_PixelFormat,
        w: CInt,
        h: CInt,
        pitch: CInt,
        pixels: Ptr[Byte],
        refcount: CInt,
        reserved: Ptr[Byte]
    )(using Zone): Ptr[SDL_Surface] =
      val ____ptr = apply()
      (!____ptr).flags = flags
      (!____ptr).format = format
      (!____ptr).w = w
      (!____ptr).h = h
      (!____ptr).pitch = pitch
      (!____ptr).pixels = pixels
      (!____ptr).refcount = refcount
      (!____ptr).reserved = reserved
      ____ptr
    end apply
    extension (struct: SDL_Surface)
      def flags: SDL_SurfaceFlags = struct._1
      def flags_=(value: SDL_SurfaceFlags): Unit = !struct.at1 = value
      def format: SDL_PixelFormat = struct._2
      def format_=(value: SDL_PixelFormat): Unit = !struct.at2 = value
      def w: CInt = struct._3
      def w_=(value: CInt): Unit = !struct.at3 = value
      def h: CInt = struct._4
      def h_=(value: CInt): Unit = !struct.at4 = value
      def pitch: CInt = struct._5
      def pitch_=(value: CInt): Unit = !struct.at5 = value
      def pixels: Ptr[Byte] = struct._6
      def pixels_=(value: Ptr[Byte]): Unit = !struct.at6 = value
      def refcount: CInt = struct._7
      def refcount_=(value: CInt): Unit = !struct.at7 = value
      def reserved: Ptr[Byte] = struct._8
      def reserved_=(value: Ptr[Byte]): Unit = !struct.at8 = value
    end extension
  end SDL_Surface

  /** Keyboard IME candidates event structure (event.edit_candidates.*)
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  opaque type SDL_TextEditingCandidatesEvent =
    CStruct11[SDL_EventType, Uint32, Uint64, SDL_WindowID, Ptr[
      CString
    ], Sint32, Sint32, Boolean, Uint8, Uint8, Uint8]
  object SDL_TextEditingCandidatesEvent:
    given _tag: Tag[SDL_TextEditingCandidatesEvent] = Tag
      .materializeCStruct11Tag[SDL_EventType, Uint32, Uint64, SDL_WindowID, Ptr[
        CString
      ], Sint32, Sint32, Boolean, Uint8, Uint8, Uint8]
    def apply()(using Zone): Ptr[SDL_TextEditingCandidatesEvent] =
      scala.scalanative.unsafe.alloc[SDL_TextEditingCandidatesEvent](1)
    def apply(
        `type`: SDL_EventType,
        reserved: Uint32,
        timestamp: Uint64,
        windowID: SDL_WindowID,
        candidates: Ptr[CString],
        num_candidates: Sint32,
        selected_candidate: Sint32,
        horizontal: Boolean,
        padding1: Uint8,
        padding2: Uint8,
        padding3: Uint8
    )(using Zone): Ptr[SDL_TextEditingCandidatesEvent] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).reserved = reserved
      (!____ptr).timestamp = timestamp
      (!____ptr).windowID = windowID
      (!____ptr).candidates = candidates
      (!____ptr).num_candidates = num_candidates
      (!____ptr).selected_candidate = selected_candidate
      (!____ptr).horizontal = horizontal
      (!____ptr).padding1 = padding1
      (!____ptr).padding2 = padding2
      (!____ptr).padding3 = padding3
      ____ptr
    end apply
    extension (struct: SDL_TextEditingCandidatesEvent)
      def `type`: SDL_EventType = struct._1
      def type_=(value: SDL_EventType): Unit = !struct.at1 = value
      def reserved: Uint32 = struct._2
      def reserved_=(value: Uint32): Unit = !struct.at2 = value
      def timestamp: Uint64 = struct._3
      def timestamp_=(value: Uint64): Unit = !struct.at3 = value
      def windowID: SDL_WindowID = struct._4
      def windowID_=(value: SDL_WindowID): Unit = !struct.at4 = value
      def candidates: Ptr[CString] = struct._5
      def candidates_=(value: Ptr[CString]): Unit = !struct.at5 = value
      def num_candidates: Sint32 = struct._6
      def num_candidates_=(value: Sint32): Unit = !struct.at6 = value
      def selected_candidate: Sint32 = struct._7
      def selected_candidate_=(value: Sint32): Unit = !struct.at7 = value
      def horizontal: Boolean = struct._8
      def horizontal_=(value: Boolean): Unit = !struct.at8 = value
      def padding1: Uint8 = struct._9
      def padding1_=(value: Uint8): Unit = !struct.at9 = value
      def padding2: Uint8 = struct._10
      def padding2_=(value: Uint8): Unit = !struct.at10 = value
      def padding3: Uint8 = struct._11
      def padding3_=(value: Uint8): Unit = !struct.at11 = value
    end extension
  end SDL_TextEditingCandidatesEvent

  /** Keyboard text editing event structure (event.edit.*)
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  opaque type SDL_TextEditingEvent = CStruct7[
    SDL_EventType,
    Uint32,
    Uint64,
    SDL_WindowID,
    CString,
    Sint32,
    Sint32
  ]
  object SDL_TextEditingEvent:
    given _tag: Tag[SDL_TextEditingEvent] = Tag.materializeCStruct7Tag[
      SDL_EventType,
      Uint32,
      Uint64,
      SDL_WindowID,
      CString,
      Sint32,
      Sint32
    ]
    def apply()(using Zone): Ptr[SDL_TextEditingEvent] =
      scala.scalanative.unsafe.alloc[SDL_TextEditingEvent](1)
    def apply(
        `type`: SDL_EventType,
        reserved: Uint32,
        timestamp: Uint64,
        windowID: SDL_WindowID,
        text: CString,
        start: Sint32,
        length: Sint32
    )(using Zone): Ptr[SDL_TextEditingEvent] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).reserved = reserved
      (!____ptr).timestamp = timestamp
      (!____ptr).windowID = windowID
      (!____ptr).text = text
      (!____ptr).start = start
      (!____ptr).length = length
      ____ptr
    end apply
    extension (struct: SDL_TextEditingEvent)
      def `type`: SDL_EventType = struct._1
      def type_=(value: SDL_EventType): Unit = !struct.at1 = value
      def reserved: Uint32 = struct._2
      def reserved_=(value: Uint32): Unit = !struct.at2 = value
      def timestamp: Uint64 = struct._3
      def timestamp_=(value: Uint64): Unit = !struct.at3 = value
      def windowID: SDL_WindowID = struct._4
      def windowID_=(value: SDL_WindowID): Unit = !struct.at4 = value
      def text: CString = struct._5
      def text_=(value: CString): Unit = !struct.at5 = value
      def start: Sint32 = struct._6
      def start_=(value: Sint32): Unit = !struct.at6 = value
      def length: Sint32 = struct._7
      def length_=(value: Sint32): Unit = !struct.at7 = value
    end extension
  end SDL_TextEditingEvent

  /** Keyboard text input event structure (event.text.*)
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  opaque type SDL_TextInputEvent =
    CStruct5[SDL_EventType, Uint32, Uint64, SDL_WindowID, CString]
  object SDL_TextInputEvent:
    given _tag: Tag[SDL_TextInputEvent] = Tag.materializeCStruct5Tag[
      SDL_EventType,
      Uint32,
      Uint64,
      SDL_WindowID,
      CString
    ]
    def apply()(using Zone): Ptr[SDL_TextInputEvent] =
      scala.scalanative.unsafe.alloc[SDL_TextInputEvent](1)
    def apply(
        `type`: SDL_EventType,
        reserved: Uint32,
        timestamp: Uint64,
        windowID: SDL_WindowID,
        text: CString
    )(using Zone): Ptr[SDL_TextInputEvent] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).reserved = reserved
      (!____ptr).timestamp = timestamp
      (!____ptr).windowID = windowID
      (!____ptr).text = text
      ____ptr
    end apply
    extension (struct: SDL_TextInputEvent)
      def `type`: SDL_EventType = struct._1
      def type_=(value: SDL_EventType): Unit = !struct.at1 = value
      def reserved: Uint32 = struct._2
      def reserved_=(value: Uint32): Unit = !struct.at2 = value
      def timestamp: Uint64 = struct._3
      def timestamp_=(value: Uint64): Unit = !struct.at3 = value
      def windowID: SDL_WindowID = struct._4
      def windowID_=(value: SDL_WindowID): Unit = !struct.at4 = value
      def text: CString = struct._5
      def text_=(value: CString): Unit = !struct.at5 = value
    end extension
  end SDL_TextInputEvent

  /** An efficient driver-specific representation of pixel data
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  opaque type SDL_Texture = CStruct4[SDL_PixelFormat, CInt, CInt, CInt]
  object SDL_Texture:
    given _tag: Tag[SDL_Texture] =
      Tag.materializeCStruct4Tag[SDL_PixelFormat, CInt, CInt, CInt]
    def apply()(using Zone): Ptr[SDL_Texture] =
      scala.scalanative.unsafe.alloc[SDL_Texture](1)
    def apply(format: SDL_PixelFormat, w: CInt, h: CInt, refcount: CInt)(using
        Zone
    ): Ptr[SDL_Texture] =
      val ____ptr = apply()
      (!____ptr).format = format
      (!____ptr).w = w
      (!____ptr).h = h
      (!____ptr).refcount = refcount
      ____ptr
    end apply
    extension (struct: SDL_Texture)
      def format: SDL_PixelFormat = struct._1
      def format_=(value: SDL_PixelFormat): Unit = !struct.at1 = value
      def w: CInt = struct._2
      def w_=(value: CInt): Unit = !struct.at2 = value
      def h: CInt = struct._3
      def h_=(value: CInt): Unit = !struct.at3 = value
      def refcount: CInt = struct._4
      def refcount_=(value: CInt): Unit = !struct.at4 = value
    end extension
  end SDL_Texture

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_thread.h
    */
  opaque type SDL_Thread = CStruct0
  object SDL_Thread:
    given _tag: Tag[SDL_Thread] = Tag.materializeCStruct0Tag

  /** Touch finger event structure (event.tfinger.*)
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  opaque type SDL_TouchFingerEvent = CStruct11[
    SDL_EventType,
    Uint32,
    Uint64,
    SDL_TouchID,
    SDL_FingerID,
    Float,
    Float,
    Float,
    Float,
    Float,
    SDL_WindowID
  ]
  object SDL_TouchFingerEvent:
    given _tag: Tag[SDL_TouchFingerEvent] = Tag.materializeCStruct11Tag[
      SDL_EventType,
      Uint32,
      Uint64,
      SDL_TouchID,
      SDL_FingerID,
      Float,
      Float,
      Float,
      Float,
      Float,
      SDL_WindowID
    ]
    def apply()(using Zone): Ptr[SDL_TouchFingerEvent] =
      scala.scalanative.unsafe.alloc[SDL_TouchFingerEvent](1)
    def apply(
        `type`: SDL_EventType,
        reserved: Uint32,
        timestamp: Uint64,
        touchID: SDL_TouchID,
        fingerID: SDL_FingerID,
        x: Float,
        y: Float,
        dx: Float,
        dy: Float,
        pressure: Float,
        windowID: SDL_WindowID
    )(using Zone): Ptr[SDL_TouchFingerEvent] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).reserved = reserved
      (!____ptr).timestamp = timestamp
      (!____ptr).touchID = touchID
      (!____ptr).fingerID = fingerID
      (!____ptr).x = x
      (!____ptr).y = y
      (!____ptr).dx = dx
      (!____ptr).dy = dy
      (!____ptr).pressure = pressure
      (!____ptr).windowID = windowID
      ____ptr
    end apply
    extension (struct: SDL_TouchFingerEvent)
      def `type`: SDL_EventType = struct._1
      def type_=(value: SDL_EventType): Unit = !struct.at1 = value
      def reserved: Uint32 = struct._2
      def reserved_=(value: Uint32): Unit = !struct.at2 = value
      def timestamp: Uint64 = struct._3
      def timestamp_=(value: Uint64): Unit = !struct.at3 = value
      def touchID: SDL_TouchID = struct._4
      def touchID_=(value: SDL_TouchID): Unit = !struct.at4 = value
      def fingerID: SDL_FingerID = struct._5
      def fingerID_=(value: SDL_FingerID): Unit = !struct.at5 = value
      def x: Float = struct._6
      def x_=(value: Float): Unit = !struct.at6 = value
      def y: Float = struct._7
      def y_=(value: Float): Unit = !struct.at7 = value
      def dx: Float = struct._8
      def dx_=(value: Float): Unit = !struct.at8 = value
      def dy: Float = struct._9
      def dy_=(value: Float): Unit = !struct.at9 = value
      def pressure: Float = struct._10
      def pressure_=(value: Float): Unit = !struct.at10 = value
      def windowID: SDL_WindowID = struct._11
      def windowID_=(value: SDL_WindowID): Unit = !struct.at11 = value
    end extension
  end SDL_TouchFingerEvent

  /** A user-defined event type (event.user.*)
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  opaque type SDL_UserEvent =
    CStruct7[Uint32, Uint32, Uint64, SDL_WindowID, Sint32, Ptr[Byte], Ptr[Byte]]
  object SDL_UserEvent:
    given _tag: Tag[SDL_UserEvent] = Tag
      .materializeCStruct7Tag[Uint32, Uint32, Uint64, SDL_WindowID, Sint32, Ptr[
        Byte
      ], Ptr[Byte]]
    def apply()(using Zone): Ptr[SDL_UserEvent] =
      scala.scalanative.unsafe.alloc[SDL_UserEvent](1)
    def apply(
        `type`: Uint32,
        reserved: Uint32,
        timestamp: Uint64,
        windowID: SDL_WindowID,
        code: Sint32,
        data1: Ptr[Byte],
        data2: Ptr[Byte]
    )(using Zone): Ptr[SDL_UserEvent] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).reserved = reserved
      (!____ptr).timestamp = timestamp
      (!____ptr).windowID = windowID
      (!____ptr).code = code
      (!____ptr).data1 = data1
      (!____ptr).data2 = data2
      ____ptr
    end apply
    extension (struct: SDL_UserEvent)
      def `type`: Uint32 = struct._1
      def type_=(value: Uint32): Unit = !struct.at1 = value
      def reserved: Uint32 = struct._2
      def reserved_=(value: Uint32): Unit = !struct.at2 = value
      def timestamp: Uint64 = struct._3
      def timestamp_=(value: Uint64): Unit = !struct.at3 = value
      def windowID: SDL_WindowID = struct._4
      def windowID_=(value: SDL_WindowID): Unit = !struct.at4 = value
      def code: Sint32 = struct._5
      def code_=(value: Sint32): Unit = !struct.at5 = value
      def data1: Ptr[Byte] = struct._6
      def data1_=(value: Ptr[Byte]): Unit = !struct.at6 = value
      def data2: Ptr[Byte] = struct._7
      def data2_=(value: Ptr[Byte]): Unit = !struct.at7 = value
    end extension
  end SDL_UserEvent

  /** Vertex structure.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  opaque type SDL_Vertex = CStruct3[SDL_FPoint, SDL_FColor, SDL_FPoint]
  object SDL_Vertex:
    given _tag: Tag[SDL_Vertex] =
      Tag.materializeCStruct3Tag[SDL_FPoint, SDL_FColor, SDL_FPoint]
    def apply()(using Zone): Ptr[SDL_Vertex] =
      scala.scalanative.unsafe.alloc[SDL_Vertex](1)
    def apply(position: SDL_FPoint, color: SDL_FColor, tex_coord: SDL_FPoint)(
        using Zone
    ): Ptr[SDL_Vertex] =
      val ____ptr = apply()
      (!____ptr).position = position
      (!____ptr).color = color
      (!____ptr).tex_coord = tex_coord
      ____ptr
    end apply
    extension (struct: SDL_Vertex)
      def position: SDL_FPoint = struct._1
      def position_=(value: SDL_FPoint): Unit = !struct.at1 = value
      def color: SDL_FColor = struct._2
      def color_=(value: SDL_FColor): Unit = !struct.at2 = value
      def tex_coord: SDL_FPoint = struct._3
      def tex_coord_=(value: SDL_FPoint): Unit = !struct.at3 = value
    end extension
  end SDL_Vertex

  /** The structure that describes a virtual joystick.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  opaque type SDL_VirtualJoystickDesc =
    CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]]
  object SDL_VirtualJoystickDesc:
    given _tag: Tag[SDL_VirtualJoystickDesc] =
      Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]](
        Tag.Byte,
        Tag.Digit3[Nat._1, Nat._3, Nat._6](Tag.Nat1, Tag.Nat3, Tag.Nat6)
      )
    def apply()(using Zone): Ptr[SDL_VirtualJoystickDesc] =
      scala.scalanative.unsafe.alloc[SDL_VirtualJoystickDesc](1)
    def apply(
        version: Uint32,
        `type`: Uint16,
        padding: Uint16,
        vendor_id: Uint16,
        product_id: Uint16,
        naxes: Uint16,
        nbuttons: Uint16,
        nballs: Uint16,
        nhats: Uint16,
        ntouchpads: Uint16,
        nsensors: Uint16,
        padding2: CArray[Uint16, Nat._2],
        button_mask: Uint32,
        axis_mask: Uint32,
        name: CString,
        touchpads: Ptr[SDL_VirtualJoystickTouchpadDesc],
        sensors: Ptr[SDL_VirtualJoystickSensorDesc],
        userdata: Ptr[Byte],
        Update: CFuncPtr1[Ptr[Byte], Unit],
        SetPlayerIndex: CFuncPtr2[Ptr[Byte], CInt, Unit],
        Rumble: CFuncPtr3[Ptr[Byte], Uint16, Uint16, Boolean],
        RumbleTriggers: CFuncPtr3[Ptr[Byte], Uint16, Uint16, Boolean],
        SetLED: CFuncPtr4[Ptr[Byte], Uint8, Uint8, Uint8, Boolean],
        SendEffect: CFuncPtr3[Ptr[Byte], Ptr[Byte], CInt, Boolean],
        SetSensorsEnabled: CFuncPtr2[Ptr[Byte], Boolean, Boolean],
        Cleanup: CFuncPtr1[Ptr[Byte], Unit]
    )(using Zone): Ptr[SDL_VirtualJoystickDesc] =
      val ____ptr = apply()
      (!____ptr).version = version
      (!____ptr).`type` = `type`
      (!____ptr).padding = padding
      (!____ptr).vendor_id = vendor_id
      (!____ptr).product_id = product_id
      (!____ptr).naxes = naxes
      (!____ptr).nbuttons = nbuttons
      (!____ptr).nballs = nballs
      (!____ptr).nhats = nhats
      (!____ptr).ntouchpads = ntouchpads
      (!____ptr).nsensors = nsensors
      (!____ptr).padding2 = padding2
      (!____ptr).button_mask = button_mask
      (!____ptr).axis_mask = axis_mask
      (!____ptr).name = name
      (!____ptr).touchpads = touchpads
      (!____ptr).sensors = sensors
      (!____ptr).userdata = userdata
      (!____ptr).Update = Update
      (!____ptr).SetPlayerIndex = SetPlayerIndex
      (!____ptr).Rumble = Rumble
      (!____ptr).RumbleTriggers = RumbleTriggers
      (!____ptr).SetLED = SetLED
      (!____ptr).SendEffect = SendEffect
      (!____ptr).SetSensorsEnabled = SetSensorsEnabled
      (!____ptr).Cleanup = Cleanup
      ____ptr
    end apply
    extension (struct: SDL_VirtualJoystickDesc)
      def version: Uint32 = !struct.at(offsets(0)).asInstanceOf[Ptr[Uint32]]
      def version_=(value: Uint32): Unit =
        !struct.at(offsets(0)).asInstanceOf[Ptr[Uint32]] = value
      def `type`: Uint16 = !struct.at(offsets(1)).asInstanceOf[Ptr[Uint16]]
      def type_=(value: Uint16): Unit =
        !struct.at(offsets(1)).asInstanceOf[Ptr[Uint16]] = value
      def padding: Uint16 = !struct.at(offsets(2)).asInstanceOf[Ptr[Uint16]]
      def padding_=(value: Uint16): Unit =
        !struct.at(offsets(2)).asInstanceOf[Ptr[Uint16]] = value
      def vendor_id: Uint16 = !struct.at(offsets(3)).asInstanceOf[Ptr[Uint16]]
      def vendor_id_=(value: Uint16): Unit =
        !struct.at(offsets(3)).asInstanceOf[Ptr[Uint16]] = value
      def product_id: Uint16 = !struct.at(offsets(4)).asInstanceOf[Ptr[Uint16]]
      def product_id_=(value: Uint16): Unit =
        !struct.at(offsets(4)).asInstanceOf[Ptr[Uint16]] = value
      def naxes: Uint16 = !struct.at(offsets(5)).asInstanceOf[Ptr[Uint16]]
      def naxes_=(value: Uint16): Unit =
        !struct.at(offsets(5)).asInstanceOf[Ptr[Uint16]] = value
      def nbuttons: Uint16 = !struct.at(offsets(6)).asInstanceOf[Ptr[Uint16]]
      def nbuttons_=(value: Uint16): Unit =
        !struct.at(offsets(6)).asInstanceOf[Ptr[Uint16]] = value
      def nballs: Uint16 = !struct.at(offsets(7)).asInstanceOf[Ptr[Uint16]]
      def nballs_=(value: Uint16): Unit =
        !struct.at(offsets(7)).asInstanceOf[Ptr[Uint16]] = value
      def nhats: Uint16 = !struct.at(offsets(8)).asInstanceOf[Ptr[Uint16]]
      def nhats_=(value: Uint16): Unit =
        !struct.at(offsets(8)).asInstanceOf[Ptr[Uint16]] = value
      def ntouchpads: Uint16 = !struct.at(offsets(9)).asInstanceOf[Ptr[Uint16]]
      def ntouchpads_=(value: Uint16): Unit =
        !struct.at(offsets(9)).asInstanceOf[Ptr[Uint16]] = value
      def nsensors: Uint16 = !struct.at(offsets(10)).asInstanceOf[Ptr[Uint16]]
      def nsensors_=(value: Uint16): Unit =
        !struct.at(offsets(10)).asInstanceOf[Ptr[Uint16]] = value
      def padding2: CArray[Uint16, Nat._2] =
        !struct.at(offsets(11)).asInstanceOf[Ptr[CArray[Uint16, Nat._2]]]
      def padding2_=(value: CArray[Uint16, Nat._2]): Unit =
        !struct.at(offsets(11)).asInstanceOf[Ptr[CArray[Uint16, Nat._2]]] =
          value
      def button_mask: Uint32 =
        !struct.at(offsets(12)).asInstanceOf[Ptr[Uint32]]
      def button_mask_=(value: Uint32): Unit =
        !struct.at(offsets(12)).asInstanceOf[Ptr[Uint32]] = value
      def axis_mask: Uint32 = !struct.at(offsets(13)).asInstanceOf[Ptr[Uint32]]
      def axis_mask_=(value: Uint32): Unit =
        !struct.at(offsets(13)).asInstanceOf[Ptr[Uint32]] = value
      def name: CString = !struct.at(offsets(14)).asInstanceOf[Ptr[CString]]
      def name_=(value: CString): Unit =
        !struct.at(offsets(14)).asInstanceOf[Ptr[CString]] = value
      def touchpads: Ptr[SDL_VirtualJoystickTouchpadDesc] = !struct
        .at(offsets(15))
        .asInstanceOf[Ptr[Ptr[SDL_VirtualJoystickTouchpadDesc]]]
      def touchpads_=(value: Ptr[SDL_VirtualJoystickTouchpadDesc]): Unit =
        !struct
          .at(offsets(15))
          .asInstanceOf[Ptr[Ptr[SDL_VirtualJoystickTouchpadDesc]]] = value
      def sensors: Ptr[SDL_VirtualJoystickSensorDesc] = !struct
        .at(offsets(16))
        .asInstanceOf[Ptr[Ptr[SDL_VirtualJoystickSensorDesc]]]
      def sensors_=(value: Ptr[SDL_VirtualJoystickSensorDesc]): Unit = !struct
        .at(offsets(16))
        .asInstanceOf[Ptr[Ptr[SDL_VirtualJoystickSensorDesc]]] = value
      def userdata: Ptr[Byte] =
        !struct.at(offsets(17)).asInstanceOf[Ptr[Ptr[Byte]]]
      def userdata_=(value: Ptr[Byte]): Unit =
        !struct.at(offsets(17)).asInstanceOf[Ptr[Ptr[Byte]]] = value
      def Update: CFuncPtr1[Ptr[Byte], Unit] =
        !struct.at(offsets(18)).asInstanceOf[Ptr[CFuncPtr1[Ptr[Byte], Unit]]]
      def Update_=(value: CFuncPtr1[Ptr[Byte], Unit]): Unit =
        !struct.at(offsets(18)).asInstanceOf[Ptr[CFuncPtr1[Ptr[Byte], Unit]]] =
          value
      def SetPlayerIndex: CFuncPtr2[Ptr[Byte], CInt, Unit] = !struct
        .at(offsets(19))
        .asInstanceOf[Ptr[CFuncPtr2[Ptr[Byte], CInt, Unit]]]
      def SetPlayerIndex_=(value: CFuncPtr2[Ptr[Byte], CInt, Unit]): Unit =
        !struct
          .at(offsets(19))
          .asInstanceOf[Ptr[CFuncPtr2[Ptr[Byte], CInt, Unit]]] = value
      def Rumble: CFuncPtr3[Ptr[Byte], Uint16, Uint16, Boolean] = !struct
        .at(offsets(20))
        .asInstanceOf[Ptr[CFuncPtr3[Ptr[Byte], Uint16, Uint16, Boolean]]]
      def Rumble_=(value: CFuncPtr3[Ptr[Byte], Uint16, Uint16, Boolean]): Unit =
        !struct
          .at(offsets(20))
          .asInstanceOf[Ptr[CFuncPtr3[Ptr[Byte], Uint16, Uint16, Boolean]]] =
          value
      def RumbleTriggers: CFuncPtr3[Ptr[Byte], Uint16, Uint16, Boolean] =
        !struct
          .at(offsets(21))
          .asInstanceOf[Ptr[CFuncPtr3[Ptr[Byte], Uint16, Uint16, Boolean]]]
      def RumbleTriggers_=(
          value: CFuncPtr3[Ptr[Byte], Uint16, Uint16, Boolean]
      ): Unit = !struct
        .at(offsets(21))
        .asInstanceOf[Ptr[CFuncPtr3[Ptr[Byte], Uint16, Uint16, Boolean]]] =
        value
      def SetLED: CFuncPtr4[Ptr[Byte], Uint8, Uint8, Uint8, Boolean] = !struct
        .at(offsets(22))
        .asInstanceOf[Ptr[CFuncPtr4[Ptr[Byte], Uint8, Uint8, Uint8, Boolean]]]
      def SetLED_=(
          value: CFuncPtr4[Ptr[Byte], Uint8, Uint8, Uint8, Boolean]
      ): Unit = !struct
        .at(offsets(22))
        .asInstanceOf[Ptr[CFuncPtr4[Ptr[Byte], Uint8, Uint8, Uint8, Boolean]]] =
        value
      def SendEffect: CFuncPtr3[Ptr[Byte], Ptr[Byte], CInt, Boolean] = !struct
        .at(offsets(23))
        .asInstanceOf[Ptr[CFuncPtr3[Ptr[Byte], Ptr[Byte], CInt, Boolean]]]
      def SendEffect_=(
          value: CFuncPtr3[Ptr[Byte], Ptr[Byte], CInt, Boolean]
      ): Unit = !struct
        .at(offsets(23))
        .asInstanceOf[Ptr[CFuncPtr3[Ptr[Byte], Ptr[Byte], CInt, Boolean]]] =
        value
      def SetSensorsEnabled: CFuncPtr2[Ptr[Byte], Boolean, Boolean] = !struct
        .at(offsets(24))
        .asInstanceOf[Ptr[CFuncPtr2[Ptr[Byte], Boolean, Boolean]]]
      def SetSensorsEnabled_=(
          value: CFuncPtr2[Ptr[Byte], Boolean, Boolean]
      ): Unit = !struct
        .at(offsets(24))
        .asInstanceOf[Ptr[CFuncPtr2[Ptr[Byte], Boolean, Boolean]]] = value
      def Cleanup: CFuncPtr1[Ptr[Byte], Unit] =
        !struct.at(offsets(25)).asInstanceOf[Ptr[CFuncPtr1[Ptr[Byte], Unit]]]
      def Cleanup_=(value: CFuncPtr1[Ptr[Byte], Unit]): Unit =
        !struct.at(offsets(25)).asInstanceOf[Ptr[CFuncPtr1[Ptr[Byte], Unit]]] =
          value
    end extension
    val offsets: Array[Int] =
      val res = Array.ofDim[Int](26)
      def align(offset: Int, alignment: Int) =
        val alignmentMask = alignment - 1
        val padding =
          if (offset & alignmentMask) == 0 then 0
          else alignment - (offset & alignmentMask)
        offset + padding
      end align

      res(0) = align(0, alignmentof[Uint32].toInt)
      res(1) = align(res(0) + sizeof[Uint32].toInt, alignmentof[Uint16].toInt)
      res(2) = align(res(1) + sizeof[Uint16].toInt, alignmentof[Uint16].toInt)
      res(3) = align(res(2) + sizeof[Uint16].toInt, alignmentof[Uint16].toInt)
      res(4) = align(res(3) + sizeof[Uint16].toInt, alignmentof[Uint16].toInt)
      res(5) = align(res(4) + sizeof[Uint16].toInt, alignmentof[Uint16].toInt)
      res(6) = align(res(5) + sizeof[Uint16].toInt, alignmentof[Uint16].toInt)
      res(7) = align(res(6) + sizeof[Uint16].toInt, alignmentof[Uint16].toInt)
      res(8) = align(res(7) + sizeof[Uint16].toInt, alignmentof[Uint16].toInt)
      res(9) = align(res(8) + sizeof[Uint16].toInt, alignmentof[Uint16].toInt)
      res(10) = align(res(9) + sizeof[Uint16].toInt, alignmentof[Uint16].toInt)
      res(11) = align(res(10) + sizeof[Uint16].toInt, alignmentof[Uint16].toInt)
      res(12) = align(
        res(11) + sizeof[CArray[Uint16, Nat._2]].toInt,
        alignmentof[Uint32].toInt
      )
      res(13) = align(res(12) + sizeof[Uint32].toInt, alignmentof[Uint32].toInt)
      res(14) =
        align(res(13) + sizeof[Uint32].toInt, alignmentof[CString].toInt)
      res(15) = align(
        res(14) + sizeof[CString].toInt,
        alignmentof[Ptr[SDL_VirtualJoystickTouchpadDesc]].toInt
      )
      res(16) = align(
        res(15) + sizeof[Ptr[SDL_VirtualJoystickTouchpadDesc]].toInt,
        alignmentof[Ptr[SDL_VirtualJoystickSensorDesc]].toInt
      )
      res(17) = align(
        res(16) + sizeof[Ptr[SDL_VirtualJoystickSensorDesc]].toInt,
        alignmentof[Ptr[Byte]].toInt
      )
      res(18) = align(
        res(17) + sizeof[Ptr[Byte]].toInt,
        alignmentof[CFuncPtr1[Ptr[Byte], Unit]].toInt
      )
      res(19) = align(
        res(18) + sizeof[CFuncPtr1[Ptr[Byte], Unit]].toInt,
        alignmentof[CFuncPtr2[Ptr[Byte], CInt, Unit]].toInt
      )
      res(20) = align(
        res(19) + sizeof[CFuncPtr2[Ptr[Byte], CInt, Unit]].toInt,
        alignmentof[CFuncPtr3[Ptr[Byte], Uint16, Uint16, Boolean]].toInt
      )
      res(21) = align(
        res(20) + sizeof[CFuncPtr3[Ptr[Byte], Uint16, Uint16, Boolean]].toInt,
        alignmentof[CFuncPtr3[Ptr[Byte], Uint16, Uint16, Boolean]].toInt
      )
      res(22) = align(
        res(21) + sizeof[CFuncPtr3[Ptr[Byte], Uint16, Uint16, Boolean]].toInt,
        alignmentof[CFuncPtr4[Ptr[Byte], Uint8, Uint8, Uint8, Boolean]].toInt
      )
      res(23) = align(
        res(22) + sizeof[
          CFuncPtr4[Ptr[Byte], Uint8, Uint8, Uint8, Boolean]
        ].toInt,
        alignmentof[CFuncPtr3[Ptr[Byte], Ptr[Byte], CInt, Boolean]].toInt
      )
      res(24) = align(
        res(23) + sizeof[CFuncPtr3[Ptr[Byte], Ptr[Byte], CInt, Boolean]].toInt,
        alignmentof[CFuncPtr2[Ptr[Byte], Boolean, Boolean]].toInt
      )
      res(25) = align(
        res(24) + sizeof[CFuncPtr2[Ptr[Byte], Boolean, Boolean]].toInt,
        alignmentof[CFuncPtr1[Ptr[Byte], Unit]].toInt
      )
      res
    end offsets
  end SDL_VirtualJoystickDesc

  /** The structure that describes a virtual joystick sensor.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  opaque type SDL_VirtualJoystickSensorDesc = CStruct2[SDL_SensorType, Float]
  object SDL_VirtualJoystickSensorDesc:
    given _tag: Tag[SDL_VirtualJoystickSensorDesc] =
      Tag.materializeCStruct2Tag[SDL_SensorType, Float]
    def apply()(using Zone): Ptr[SDL_VirtualJoystickSensorDesc] =
      scala.scalanative.unsafe.alloc[SDL_VirtualJoystickSensorDesc](1)
    def apply(`type`: SDL_SensorType, rate: Float)(using
        Zone
    ): Ptr[SDL_VirtualJoystickSensorDesc] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).rate = rate
      ____ptr
    end apply
    extension (struct: SDL_VirtualJoystickSensorDesc)
      def `type`: SDL_SensorType = struct._1
      def type_=(value: SDL_SensorType): Unit = !struct.at1 = value
      def rate: Float = struct._2
      def rate_=(value: Float): Unit = !struct.at2 = value
    end extension
  end SDL_VirtualJoystickSensorDesc

  /** The structure that describes a virtual joystick touchpad.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  opaque type SDL_VirtualJoystickTouchpadDesc =
    CStruct2[Uint16, CArray[Uint16, Nat._3]]
  object SDL_VirtualJoystickTouchpadDesc:
    given _tag: Tag[SDL_VirtualJoystickTouchpadDesc] =
      Tag.materializeCStruct2Tag[Uint16, CArray[Uint16, Nat._3]]
    def apply()(using Zone): Ptr[SDL_VirtualJoystickTouchpadDesc] =
      scala.scalanative.unsafe.alloc[SDL_VirtualJoystickTouchpadDesc](1)
    def apply(nfingers: Uint16, padding: CArray[Uint16, Nat._3])(using
        Zone
    ): Ptr[SDL_VirtualJoystickTouchpadDesc] =
      val ____ptr = apply()
      (!____ptr).nfingers = nfingers
      (!____ptr).padding = padding
      ____ptr
    end apply
    extension (struct: SDL_VirtualJoystickTouchpadDesc)
      def nfingers: Uint16 = struct._1
      def nfingers_=(value: Uint16): Unit = !struct.at1 = value
      def padding: CArray[Uint16, Nat._3] = struct._2
      def padding_=(value: CArray[Uint16, Nat._3]): Unit = !struct.at2 = value
    end extension
  end SDL_VirtualJoystickTouchpadDesc

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  opaque type SDL_Window = CStruct0
  object SDL_Window:
    given _tag: Tag[SDL_Window] = Tag.materializeCStruct0Tag

  /** Window state change event data (event.window.*)
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  opaque type SDL_WindowEvent =
    CStruct6[SDL_EventType, Uint32, Uint64, SDL_WindowID, Sint32, Sint32]
  object SDL_WindowEvent:
    given _tag: Tag[SDL_WindowEvent] = Tag.materializeCStruct6Tag[
      SDL_EventType,
      Uint32,
      Uint64,
      SDL_WindowID,
      Sint32,
      Sint32
    ]
    def apply()(using Zone): Ptr[SDL_WindowEvent] =
      scala.scalanative.unsafe.alloc[SDL_WindowEvent](1)
    def apply(
        `type`: SDL_EventType,
        reserved: Uint32,
        timestamp: Uint64,
        windowID: SDL_WindowID,
        data1: Sint32,
        data2: Sint32
    )(using Zone): Ptr[SDL_WindowEvent] =
      val ____ptr = apply()
      (!____ptr).`type` = `type`
      (!____ptr).reserved = reserved
      (!____ptr).timestamp = timestamp
      (!____ptr).windowID = windowID
      (!____ptr).data1 = data1
      (!____ptr).data2 = data2
      ____ptr
    end apply
    extension (struct: SDL_WindowEvent)
      def `type`: SDL_EventType = struct._1
      def type_=(value: SDL_EventType): Unit = !struct.at1 = value
      def reserved: Uint32 = struct._2
      def reserved_=(value: Uint32): Unit = !struct.at2 = value
      def timestamp: Uint64 = struct._3
      def timestamp_=(value: Uint64): Unit = !struct.at3 = value
      def windowID: SDL_WindowID = struct._4
      def windowID_=(value: SDL_WindowID): Unit = !struct.at4 = value
      def data1: Sint32 = struct._5
      def data1_=(value: Sint32): Unit = !struct.at5 = value
      def data2: Sint32 = struct._6
      def data2_=(value: Sint32): Unit = !struct.at6 = value
    end extension
  end SDL_WindowEvent

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  opaque type SDL_alignment_test = CStruct2[Uint8, Ptr[Byte]]
  object SDL_alignment_test:
    given _tag: Tag[SDL_alignment_test] =
      Tag.materializeCStruct2Tag[Uint8, Ptr[Byte]]
    def apply()(using Zone): Ptr[SDL_alignment_test] =
      scala.scalanative.unsafe.alloc[SDL_alignment_test](1)
    def apply(a: Uint8, b: Ptr[Byte])(using Zone): Ptr[SDL_alignment_test] =
      val ____ptr = apply()
      (!____ptr).a = a
      (!____ptr).b = b
      ____ptr
    end apply
    extension (struct: SDL_alignment_test)
      def a: Uint8 = struct._1
      def a_=(value: Uint8): Unit = !struct.at1 = value
      def b: Ptr[Byte] = struct._2
      def b_=(value: Ptr[Byte]): Unit = !struct.at2 = value
    end extension
  end SDL_alignment_test

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_hidapi.h
    */
  opaque type SDL_hid_device = CStruct0
  object SDL_hid_device:
    given _tag: Tag[SDL_hid_device] = Tag.materializeCStruct0Tag

  /** Information about a connected HID device
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_hidapi.h
    */
  opaque type SDL_hid_device_info = CStruct15[
    CString,
    CUnsignedShort,
    CUnsignedShort,
    Ptr[wchar_t],
    CUnsignedShort,
    Ptr[wchar_t],
    Ptr[wchar_t],
    CUnsignedShort,
    CUnsignedShort,
    CInt,
    CInt,
    CInt,
    CInt,
    SDL_hid_bus_type,
    Ptr[Byte]
  ]
  object SDL_hid_device_info:
    given _tag: Tag[SDL_hid_device_info] = Tag.materializeCStruct15Tag[
      CString,
      CUnsignedShort,
      CUnsignedShort,
      Ptr[wchar_t],
      CUnsignedShort,
      Ptr[wchar_t],
      Ptr[wchar_t],
      CUnsignedShort,
      CUnsignedShort,
      CInt,
      CInt,
      CInt,
      CInt,
      SDL_hid_bus_type,
      Ptr[Byte]
    ]
    def apply()(using Zone): Ptr[SDL_hid_device_info] =
      scala.scalanative.unsafe.alloc[SDL_hid_device_info](1)
    def apply(
        path: CString,
        vendor_id: CUnsignedShort,
        product_id: CUnsignedShort,
        serial_number: Ptr[wchar_t],
        release_number: CUnsignedShort,
        manufacturer_string: Ptr[wchar_t],
        product_string: Ptr[wchar_t],
        usage_page: CUnsignedShort,
        usage: CUnsignedShort,
        interface_number: CInt,
        interface_class: CInt,
        interface_subclass: CInt,
        interface_protocol: CInt,
        bus_type: SDL_hid_bus_type,
        next: Ptr[SDL_hid_device_info]
    )(using Zone): Ptr[SDL_hid_device_info] =
      val ____ptr = apply()
      (!____ptr).path = path
      (!____ptr).vendor_id = vendor_id
      (!____ptr).product_id = product_id
      (!____ptr).serial_number = serial_number
      (!____ptr).release_number = release_number
      (!____ptr).manufacturer_string = manufacturer_string
      (!____ptr).product_string = product_string
      (!____ptr).usage_page = usage_page
      (!____ptr).usage = usage
      (!____ptr).interface_number = interface_number
      (!____ptr).interface_class = interface_class
      (!____ptr).interface_subclass = interface_subclass
      (!____ptr).interface_protocol = interface_protocol
      (!____ptr).bus_type = bus_type
      (!____ptr).next = next
      ____ptr
    end apply
    extension (struct: SDL_hid_device_info)
      def path: CString = struct._1
      def path_=(value: CString): Unit = !struct.at1 = value
      def vendor_id: CUnsignedShort = struct._2
      def vendor_id_=(value: CUnsignedShort): Unit = !struct.at2 = value
      def product_id: CUnsignedShort = struct._3
      def product_id_=(value: CUnsignedShort): Unit = !struct.at3 = value
      def serial_number: Ptr[wchar_t] = struct._4
      def serial_number_=(value: Ptr[wchar_t]): Unit = !struct.at4 = value
      def release_number: CUnsignedShort = struct._5
      def release_number_=(value: CUnsignedShort): Unit = !struct.at5 = value
      def manufacturer_string: Ptr[wchar_t] = struct._6
      def manufacturer_string_=(value: Ptr[wchar_t]): Unit = !struct.at6 = value
      def product_string: Ptr[wchar_t] = struct._7
      def product_string_=(value: Ptr[wchar_t]): Unit = !struct.at7 = value
      def usage_page: CUnsignedShort = struct._8
      def usage_page_=(value: CUnsignedShort): Unit = !struct.at8 = value
      def usage: CUnsignedShort = struct._9
      def usage_=(value: CUnsignedShort): Unit = !struct.at9 = value
      def interface_number: CInt = struct._10
      def interface_number_=(value: CInt): Unit = !struct.at10 = value
      def interface_class: CInt = struct._11
      def interface_class_=(value: CInt): Unit = !struct.at11 = value
      def interface_subclass: CInt = struct._12
      def interface_subclass_=(value: CInt): Unit = !struct.at12 = value
      def interface_protocol: CInt = struct._13
      def interface_protocol_=(value: CInt): Unit = !struct.at13 = value
      def bus_type: SDL_hid_bus_type = struct._14
      def bus_type_=(value: SDL_hid_bus_type): Unit = !struct.at14 = value
      def next: Ptr[SDL_hid_device_info] =
        struct._15.asInstanceOf[Ptr[SDL_hid_device_info]]
      def next_=(value: Ptr[SDL_hid_device_info]): Unit = !struct.at15 =
        value.asInstanceOf[Ptr[Byte]]
    end extension
  end SDL_hid_device_info

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  opaque type SDL_iconv_data_t = CStruct0
  object SDL_iconv_data_t:
    given _tag: Tag[SDL_iconv_data_t] = Tag.materializeCStruct0Tag
end structs

object unions:
  import _root_.sdl3.enumerations.*
  import _root_.sdl3.predef.*
  import _root_.sdl3.aliases.*
  import _root_.sdl3.structs.*
  import _root_.sdl3.unions.*

  /** The structure for all events in SDL.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  opaque type SDL_Event = CArray[Byte, Nat.Digit3[Nat._1, Nat._2, Nat._8]]
  object SDL_Event:
    given _tag: Tag[SDL_Event] =
      Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._2, Nat._8]](
        Tag.Byte,
        Tag.Digit3[Nat._1, Nat._2, Nat._8](Tag.Nat1, Tag.Nat2, Tag.Nat8)
      )
    def apply()(using Zone): Ptr[SDL_Event] =
      val ___ptr = alloc[SDL_Event](1)
      ___ptr
    @scala.annotation.targetName("apply_type")
    def apply(`type`: Uint32)(using Zone): Ptr[SDL_Event] =
      val ___ptr = alloc[SDL_Event](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[Uint32]].update(0, `type`)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_common")
    def apply(common: SDL_CommonEvent)(using Zone): Ptr[SDL_Event] =
      val ___ptr = alloc[SDL_Event](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_CommonEvent]].update(0, common)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_display")
    def apply(display: SDL_DisplayEvent)(using Zone): Ptr[SDL_Event] =
      val ___ptr = alloc[SDL_Event](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_DisplayEvent]].update(0, display)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_window")
    def apply(window: SDL_WindowEvent)(using Zone): Ptr[SDL_Event] =
      val ___ptr = alloc[SDL_Event](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_WindowEvent]].update(0, window)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_kdevice")
    def apply(kdevice: SDL_KeyboardDeviceEvent)(using Zone): Ptr[SDL_Event] =
      val ___ptr = alloc[SDL_Event](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_KeyboardDeviceEvent]].update(0, kdevice)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_key")
    def apply(key: SDL_KeyboardEvent)(using Zone): Ptr[SDL_Event] =
      val ___ptr = alloc[SDL_Event](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_KeyboardEvent]].update(0, key)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_edit")
    def apply(edit: SDL_TextEditingEvent)(using Zone): Ptr[SDL_Event] =
      val ___ptr = alloc[SDL_Event](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_TextEditingEvent]].update(0, edit)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_edit_candidates")
    def apply(edit_candidates: SDL_TextEditingCandidatesEvent)(using
        Zone
    ): Ptr[SDL_Event] =
      val ___ptr = alloc[SDL_Event](1)
      val un = !___ptr
      un.at(0)
        .asInstanceOf[Ptr[SDL_TextEditingCandidatesEvent]]
        .update(0, edit_candidates)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_text")
    def apply(text: SDL_TextInputEvent)(using Zone): Ptr[SDL_Event] =
      val ___ptr = alloc[SDL_Event](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_TextInputEvent]].update(0, text)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_mdevice")
    def apply(mdevice: SDL_MouseDeviceEvent)(using Zone): Ptr[SDL_Event] =
      val ___ptr = alloc[SDL_Event](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_MouseDeviceEvent]].update(0, mdevice)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_motion")
    def apply(motion: SDL_MouseMotionEvent)(using Zone): Ptr[SDL_Event] =
      val ___ptr = alloc[SDL_Event](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_MouseMotionEvent]].update(0, motion)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_button")
    def apply(button: SDL_MouseButtonEvent)(using Zone): Ptr[SDL_Event] =
      val ___ptr = alloc[SDL_Event](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_MouseButtonEvent]].update(0, button)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_wheel")
    def apply(wheel: SDL_MouseWheelEvent)(using Zone): Ptr[SDL_Event] =
      val ___ptr = alloc[SDL_Event](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_MouseWheelEvent]].update(0, wheel)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_jdevice")
    def apply(jdevice: SDL_JoyDeviceEvent)(using Zone): Ptr[SDL_Event] =
      val ___ptr = alloc[SDL_Event](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_JoyDeviceEvent]].update(0, jdevice)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_jaxis")
    def apply(jaxis: SDL_JoyAxisEvent)(using Zone): Ptr[SDL_Event] =
      val ___ptr = alloc[SDL_Event](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_JoyAxisEvent]].update(0, jaxis)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_jball")
    def apply(jball: SDL_JoyBallEvent)(using Zone): Ptr[SDL_Event] =
      val ___ptr = alloc[SDL_Event](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_JoyBallEvent]].update(0, jball)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_jhat")
    def apply(jhat: SDL_JoyHatEvent)(using Zone): Ptr[SDL_Event] =
      val ___ptr = alloc[SDL_Event](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_JoyHatEvent]].update(0, jhat)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_jbutton")
    def apply(jbutton: SDL_JoyButtonEvent)(using Zone): Ptr[SDL_Event] =
      val ___ptr = alloc[SDL_Event](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_JoyButtonEvent]].update(0, jbutton)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_jbattery")
    def apply(jbattery: SDL_JoyBatteryEvent)(using Zone): Ptr[SDL_Event] =
      val ___ptr = alloc[SDL_Event](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_JoyBatteryEvent]].update(0, jbattery)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_gdevice")
    def apply(gdevice: SDL_GamepadDeviceEvent)(using Zone): Ptr[SDL_Event] =
      val ___ptr = alloc[SDL_Event](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_GamepadDeviceEvent]].update(0, gdevice)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_gaxis")
    def apply(gaxis: SDL_GamepadAxisEvent)(using Zone): Ptr[SDL_Event] =
      val ___ptr = alloc[SDL_Event](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_GamepadAxisEvent]].update(0, gaxis)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_gbutton")
    def apply(gbutton: SDL_GamepadButtonEvent)(using Zone): Ptr[SDL_Event] =
      val ___ptr = alloc[SDL_Event](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_GamepadButtonEvent]].update(0, gbutton)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_gtouchpad")
    def apply(gtouchpad: SDL_GamepadTouchpadEvent)(using Zone): Ptr[SDL_Event] =
      val ___ptr = alloc[SDL_Event](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_GamepadTouchpadEvent]].update(0, gtouchpad)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_gsensor")
    def apply(gsensor: SDL_GamepadSensorEvent)(using Zone): Ptr[SDL_Event] =
      val ___ptr = alloc[SDL_Event](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_GamepadSensorEvent]].update(0, gsensor)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_adevice")
    def apply(adevice: SDL_AudioDeviceEvent)(using Zone): Ptr[SDL_Event] =
      val ___ptr = alloc[SDL_Event](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_AudioDeviceEvent]].update(0, adevice)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_cdevice")
    def apply(cdevice: SDL_CameraDeviceEvent)(using Zone): Ptr[SDL_Event] =
      val ___ptr = alloc[SDL_Event](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_CameraDeviceEvent]].update(0, cdevice)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_sensor")
    def apply(sensor: SDL_SensorEvent)(using Zone): Ptr[SDL_Event] =
      val ___ptr = alloc[SDL_Event](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_SensorEvent]].update(0, sensor)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_quit")
    def apply(quit: SDL_QuitEvent)(using Zone): Ptr[SDL_Event] =
      val ___ptr = alloc[SDL_Event](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_QuitEvent]].update(0, quit)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_user")
    def apply(user: SDL_UserEvent)(using Zone): Ptr[SDL_Event] =
      val ___ptr = alloc[SDL_Event](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_UserEvent]].update(0, user)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_tfinger")
    def apply(tfinger: SDL_TouchFingerEvent)(using Zone): Ptr[SDL_Event] =
      val ___ptr = alloc[SDL_Event](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_TouchFingerEvent]].update(0, tfinger)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_pproximity")
    def apply(pproximity: SDL_PenProximityEvent)(using Zone): Ptr[SDL_Event] =
      val ___ptr = alloc[SDL_Event](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_PenProximityEvent]].update(0, pproximity)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_ptouch")
    def apply(ptouch: SDL_PenTouchEvent)(using Zone): Ptr[SDL_Event] =
      val ___ptr = alloc[SDL_Event](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_PenTouchEvent]].update(0, ptouch)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_pmotion")
    def apply(pmotion: SDL_PenMotionEvent)(using Zone): Ptr[SDL_Event] =
      val ___ptr = alloc[SDL_Event](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_PenMotionEvent]].update(0, pmotion)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_pbutton")
    def apply(pbutton: SDL_PenButtonEvent)(using Zone): Ptr[SDL_Event] =
      val ___ptr = alloc[SDL_Event](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_PenButtonEvent]].update(0, pbutton)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_paxis")
    def apply(paxis: SDL_PenAxisEvent)(using Zone): Ptr[SDL_Event] =
      val ___ptr = alloc[SDL_Event](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_PenAxisEvent]].update(0, paxis)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_drop")
    def apply(drop: SDL_DropEvent)(using Zone): Ptr[SDL_Event] =
      val ___ptr = alloc[SDL_Event](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_DropEvent]].update(0, drop)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_clipboard")
    def apply(clipboard: SDL_ClipboardEvent)(using Zone): Ptr[SDL_Event] =
      val ___ptr = alloc[SDL_Event](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_ClipboardEvent]].update(0, clipboard)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_padding")
    def apply(padding: CArray[Uint8, Nat.Digit3[Nat._1, Nat._2, Nat._8]])(using
        Zone
    ): Ptr[SDL_Event] =
      val ___ptr = alloc[SDL_Event](1)
      val un = !___ptr
      un.at(0)
        .asInstanceOf[Ptr[CArray[Uint8, Nat.Digit3[Nat._1, Nat._2, Nat._8]]]]
        .update(0, padding)
      ___ptr
    end apply
    extension (struct: SDL_Event)
      def `type`: Uint32 = !struct.at(0).asInstanceOf[Ptr[Uint32]]
      def type_=(value: Uint32): Unit =
        !struct.at(0).asInstanceOf[Ptr[Uint32]] = value
      def common: SDL_CommonEvent =
        !struct.at(0).asInstanceOf[Ptr[SDL_CommonEvent]]
      def common_=(value: SDL_CommonEvent): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_CommonEvent]] = value
      def display: SDL_DisplayEvent =
        !struct.at(0).asInstanceOf[Ptr[SDL_DisplayEvent]]
      def display_=(value: SDL_DisplayEvent): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_DisplayEvent]] = value
      def window: SDL_WindowEvent =
        !struct.at(0).asInstanceOf[Ptr[SDL_WindowEvent]]
      def window_=(value: SDL_WindowEvent): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_WindowEvent]] = value
      def kdevice: SDL_KeyboardDeviceEvent =
        !struct.at(0).asInstanceOf[Ptr[SDL_KeyboardDeviceEvent]]
      def kdevice_=(value: SDL_KeyboardDeviceEvent): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_KeyboardDeviceEvent]] = value
      def key: SDL_KeyboardEvent =
        !struct.at(0).asInstanceOf[Ptr[SDL_KeyboardEvent]]
      def key_=(value: SDL_KeyboardEvent): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_KeyboardEvent]] = value
      def edit: SDL_TextEditingEvent =
        !struct.at(0).asInstanceOf[Ptr[SDL_TextEditingEvent]]
      def edit_=(value: SDL_TextEditingEvent): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_TextEditingEvent]] = value
      def edit_candidates: SDL_TextEditingCandidatesEvent =
        !struct.at(0).asInstanceOf[Ptr[SDL_TextEditingCandidatesEvent]]
      def edit_candidates_=(value: SDL_TextEditingCandidatesEvent): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_TextEditingCandidatesEvent]] = value
      def text: SDL_TextInputEvent =
        !struct.at(0).asInstanceOf[Ptr[SDL_TextInputEvent]]
      def text_=(value: SDL_TextInputEvent): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_TextInputEvent]] = value
      def mdevice: SDL_MouseDeviceEvent =
        !struct.at(0).asInstanceOf[Ptr[SDL_MouseDeviceEvent]]
      def mdevice_=(value: SDL_MouseDeviceEvent): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_MouseDeviceEvent]] = value
      def motion: SDL_MouseMotionEvent =
        !struct.at(0).asInstanceOf[Ptr[SDL_MouseMotionEvent]]
      def motion_=(value: SDL_MouseMotionEvent): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_MouseMotionEvent]] = value
      def button: SDL_MouseButtonEvent =
        !struct.at(0).asInstanceOf[Ptr[SDL_MouseButtonEvent]]
      def button_=(value: SDL_MouseButtonEvent): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_MouseButtonEvent]] = value
      def wheel: SDL_MouseWheelEvent =
        !struct.at(0).asInstanceOf[Ptr[SDL_MouseWheelEvent]]
      def wheel_=(value: SDL_MouseWheelEvent): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_MouseWheelEvent]] = value
      def jdevice: SDL_JoyDeviceEvent =
        !struct.at(0).asInstanceOf[Ptr[SDL_JoyDeviceEvent]]
      def jdevice_=(value: SDL_JoyDeviceEvent): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_JoyDeviceEvent]] = value
      def jaxis: SDL_JoyAxisEvent =
        !struct.at(0).asInstanceOf[Ptr[SDL_JoyAxisEvent]]
      def jaxis_=(value: SDL_JoyAxisEvent): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_JoyAxisEvent]] = value
      def jball: SDL_JoyBallEvent =
        !struct.at(0).asInstanceOf[Ptr[SDL_JoyBallEvent]]
      def jball_=(value: SDL_JoyBallEvent): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_JoyBallEvent]] = value
      def jhat: SDL_JoyHatEvent =
        !struct.at(0).asInstanceOf[Ptr[SDL_JoyHatEvent]]
      def jhat_=(value: SDL_JoyHatEvent): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_JoyHatEvent]] = value
      def jbutton: SDL_JoyButtonEvent =
        !struct.at(0).asInstanceOf[Ptr[SDL_JoyButtonEvent]]
      def jbutton_=(value: SDL_JoyButtonEvent): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_JoyButtonEvent]] = value
      def jbattery: SDL_JoyBatteryEvent =
        !struct.at(0).asInstanceOf[Ptr[SDL_JoyBatteryEvent]]
      def jbattery_=(value: SDL_JoyBatteryEvent): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_JoyBatteryEvent]] = value
      def gdevice: SDL_GamepadDeviceEvent =
        !struct.at(0).asInstanceOf[Ptr[SDL_GamepadDeviceEvent]]
      def gdevice_=(value: SDL_GamepadDeviceEvent): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_GamepadDeviceEvent]] = value
      def gaxis: SDL_GamepadAxisEvent =
        !struct.at(0).asInstanceOf[Ptr[SDL_GamepadAxisEvent]]
      def gaxis_=(value: SDL_GamepadAxisEvent): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_GamepadAxisEvent]] = value
      def gbutton: SDL_GamepadButtonEvent =
        !struct.at(0).asInstanceOf[Ptr[SDL_GamepadButtonEvent]]
      def gbutton_=(value: SDL_GamepadButtonEvent): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_GamepadButtonEvent]] = value
      def gtouchpad: SDL_GamepadTouchpadEvent =
        !struct.at(0).asInstanceOf[Ptr[SDL_GamepadTouchpadEvent]]
      def gtouchpad_=(value: SDL_GamepadTouchpadEvent): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_GamepadTouchpadEvent]] = value
      def gsensor: SDL_GamepadSensorEvent =
        !struct.at(0).asInstanceOf[Ptr[SDL_GamepadSensorEvent]]
      def gsensor_=(value: SDL_GamepadSensorEvent): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_GamepadSensorEvent]] = value
      def adevice: SDL_AudioDeviceEvent =
        !struct.at(0).asInstanceOf[Ptr[SDL_AudioDeviceEvent]]
      def adevice_=(value: SDL_AudioDeviceEvent): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_AudioDeviceEvent]] = value
      def cdevice: SDL_CameraDeviceEvent =
        !struct.at(0).asInstanceOf[Ptr[SDL_CameraDeviceEvent]]
      def cdevice_=(value: SDL_CameraDeviceEvent): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_CameraDeviceEvent]] = value
      def sensor: SDL_SensorEvent =
        !struct.at(0).asInstanceOf[Ptr[SDL_SensorEvent]]
      def sensor_=(value: SDL_SensorEvent): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_SensorEvent]] = value
      def quit: SDL_QuitEvent = !struct.at(0).asInstanceOf[Ptr[SDL_QuitEvent]]
      def quit_=(value: SDL_QuitEvent): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_QuitEvent]] = value
      def user: SDL_UserEvent = !struct.at(0).asInstanceOf[Ptr[SDL_UserEvent]]
      def user_=(value: SDL_UserEvent): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_UserEvent]] = value
      def tfinger: SDL_TouchFingerEvent =
        !struct.at(0).asInstanceOf[Ptr[SDL_TouchFingerEvent]]
      def tfinger_=(value: SDL_TouchFingerEvent): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_TouchFingerEvent]] = value
      def pproximity: SDL_PenProximityEvent =
        !struct.at(0).asInstanceOf[Ptr[SDL_PenProximityEvent]]
      def pproximity_=(value: SDL_PenProximityEvent): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_PenProximityEvent]] = value
      def ptouch: SDL_PenTouchEvent =
        !struct.at(0).asInstanceOf[Ptr[SDL_PenTouchEvent]]
      def ptouch_=(value: SDL_PenTouchEvent): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_PenTouchEvent]] = value
      def pmotion: SDL_PenMotionEvent =
        !struct.at(0).asInstanceOf[Ptr[SDL_PenMotionEvent]]
      def pmotion_=(value: SDL_PenMotionEvent): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_PenMotionEvent]] = value
      def pbutton: SDL_PenButtonEvent =
        !struct.at(0).asInstanceOf[Ptr[SDL_PenButtonEvent]]
      def pbutton_=(value: SDL_PenButtonEvent): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_PenButtonEvent]] = value
      def paxis: SDL_PenAxisEvent =
        !struct.at(0).asInstanceOf[Ptr[SDL_PenAxisEvent]]
      def paxis_=(value: SDL_PenAxisEvent): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_PenAxisEvent]] = value
      def drop: SDL_DropEvent = !struct.at(0).asInstanceOf[Ptr[SDL_DropEvent]]
      def drop_=(value: SDL_DropEvent): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_DropEvent]] = value
      def clipboard: SDL_ClipboardEvent =
        !struct.at(0).asInstanceOf[Ptr[SDL_ClipboardEvent]]
      def clipboard_=(value: SDL_ClipboardEvent): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_ClipboardEvent]] = value
      def padding: CArray[Uint8, Nat.Digit3[Nat._1, Nat._2, Nat._8]] = !struct
        .at(0)
        .asInstanceOf[Ptr[CArray[Uint8, Nat.Digit3[Nat._1, Nat._2, Nat._8]]]]
      def padding_=(
          value: CArray[Uint8, Nat.Digit3[Nat._1, Nat._2, Nat._8]]
      ): Unit = !struct
        .at(0)
        .asInstanceOf[Ptr[CArray[Uint8, Nat.Digit3[Nat._1, Nat._2, Nat._8]]]] =
        value
    end extension
  end SDL_Event

  /** The generic template for any haptic effect.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  opaque type SDL_HapticEffect = CArray[Byte, Nat.Digit2[Nat._7, Nat._2]]
  object SDL_HapticEffect:
    given _tag: Tag[SDL_HapticEffect] =
      Tag.CArray[CChar, Nat.Digit2[Nat._7, Nat._2]](
        Tag.Byte,
        Tag.Digit2[Nat._7, Nat._2](Tag.Nat7, Tag.Nat2)
      )
    def apply()(using Zone): Ptr[SDL_HapticEffect] =
      val ___ptr = alloc[SDL_HapticEffect](1)
      ___ptr
    @scala.annotation.targetName("apply_type")
    def apply(`type`: Uint16)(using Zone): Ptr[SDL_HapticEffect] =
      val ___ptr = alloc[SDL_HapticEffect](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[Uint16]].update(0, `type`)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_constant")
    def apply(constant: SDL_HapticConstant)(using Zone): Ptr[SDL_HapticEffect] =
      val ___ptr = alloc[SDL_HapticEffect](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_HapticConstant]].update(0, constant)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_periodic")
    def apply(periodic: SDL_HapticPeriodic)(using Zone): Ptr[SDL_HapticEffect] =
      val ___ptr = alloc[SDL_HapticEffect](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_HapticPeriodic]].update(0, periodic)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_condition")
    def apply(condition: SDL_HapticCondition)(using
        Zone
    ): Ptr[SDL_HapticEffect] =
      val ___ptr = alloc[SDL_HapticEffect](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_HapticCondition]].update(0, condition)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_ramp")
    def apply(ramp: SDL_HapticRamp)(using Zone): Ptr[SDL_HapticEffect] =
      val ___ptr = alloc[SDL_HapticEffect](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_HapticRamp]].update(0, ramp)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_leftright")
    def apply(leftright: SDL_HapticLeftRight)(using
        Zone
    ): Ptr[SDL_HapticEffect] =
      val ___ptr = alloc[SDL_HapticEffect](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_HapticLeftRight]].update(0, leftright)
      ___ptr
    end apply
    @scala.annotation.targetName("apply_custom")
    def apply(custom: SDL_HapticCustom)(using Zone): Ptr[SDL_HapticEffect] =
      val ___ptr = alloc[SDL_HapticEffect](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[SDL_HapticCustom]].update(0, custom)
      ___ptr
    end apply
    extension (struct: SDL_HapticEffect)
      def `type`: Uint16 = !struct.at(0).asInstanceOf[Ptr[Uint16]]
      def type_=(value: Uint16): Unit =
        !struct.at(0).asInstanceOf[Ptr[Uint16]] = value
      def constant: SDL_HapticConstant =
        !struct.at(0).asInstanceOf[Ptr[SDL_HapticConstant]]
      def constant_=(value: SDL_HapticConstant): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_HapticConstant]] = value
      def periodic: SDL_HapticPeriodic =
        !struct.at(0).asInstanceOf[Ptr[SDL_HapticPeriodic]]
      def periodic_=(value: SDL_HapticPeriodic): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_HapticPeriodic]] = value
      def condition: SDL_HapticCondition =
        !struct.at(0).asInstanceOf[Ptr[SDL_HapticCondition]]
      def condition_=(value: SDL_HapticCondition): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_HapticCondition]] = value
      def ramp: SDL_HapticRamp = !struct.at(0).asInstanceOf[Ptr[SDL_HapticRamp]]
      def ramp_=(value: SDL_HapticRamp): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_HapticRamp]] = value
      def leftright: SDL_HapticLeftRight =
        !struct.at(0).asInstanceOf[Ptr[SDL_HapticLeftRight]]
      def leftright_=(value: SDL_HapticLeftRight): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_HapticLeftRight]] = value
      def custom: SDL_HapticCustom =
        !struct.at(0).asInstanceOf[Ptr[SDL_HapticCustom]]
      def custom_=(value: SDL_HapticCustom): Unit =
        !struct.at(0).asInstanceOf[Ptr[SDL_HapticCustom]] = value
    end extension
  end SDL_HapticEffect

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_system.h
    */
  opaque type XEvent = CArray[Byte, Nat._0]
  object XEvent:
    given _tag: Tag[XEvent] = Tag.CArray[CChar, Nat._0](Tag.Byte, Tag.Nat0)

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_system.h
    */
  opaque type _XEvent = CArray[Byte, Nat._0]
  object _XEvent:
    given _tag: Tag[_XEvent] = Tag.CArray[CChar, Nat._0](Tag.Byte, Tag.Nat0)
end unions

@extern
private[sdl3] object extern_functions:
  import _root_.sdl3.enumerations.*
  import _root_.sdl3.predef.*
  import _root_.sdl3.aliases.*
  import _root_.sdl3.structs.*
  import _root_.sdl3.unions.*

  /** Acquire a frame.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_camera.h
    */
  def SDL_AcquireCameraFrame(
      camera: Ptr[SDL_Camera],
      timestampNS: Ptr[Uint64]
  ): Ptr[SDL_Surface] = extern

  /** Acquire a command buffer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_AcquireGPUCommandBuffer(
      device: Ptr[SDL_GPUDevice]
  ): Ptr[SDL_GPUCommandBuffer] = extern

  /** Acquire a texture to use in presentation.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_AcquireGPUSwapchainTexture(
      command_buffer: Ptr[SDL_GPUCommandBuffer],
      window: Ptr[SDL_Window],
      swapchain_texture: Ptr[Ptr[SDL_GPUTexture]],
      swapchain_texture_width: Ptr[Uint32],
      swapchain_texture_height: Ptr[Uint32]
  ): Boolean = extern

  /** Add to an atomic variable.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_atomic.h
    */
  def SDL_AddAtomicInt(a: Ptr[SDL_AtomicInt], v: CInt): CInt = extern

  /** Add a callback to be triggered when an event is added to the event queue.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  def SDL_AddEventWatch(filter: SDL_EventFilter, userdata: Ptr[Byte]): Boolean =
    extern

  /** Add support for gamepads that SDL is unaware of or change the binding of
    * an existing gamepad.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_AddGamepadMapping(mapping: CString): CInt = extern

  /** Load a set of gamepad mappings from a file.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_AddGamepadMappingsFromFile(file: CString): CInt = extern

  /** Load a set of gamepad mappings from an SDL_IOStream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_AddGamepadMappingsFromIO(
      src: Ptr[SDL_IOStream],
      closeio: Boolean
  ): CInt = extern

  /** Add a function to watch a particular hint.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_hints.h
    */
  def SDL_AddHintCallback(
      name: CString,
      callback: SDL_HintCallback,
      userdata: Ptr[Byte]
  ): Boolean = extern

  /** Add an alternate version of a surface.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_AddSurfaceAlternateImage(
      surface: Ptr[SDL_Surface],
      image: Ptr[SDL_Surface]
  ): Boolean = extern

  /** Call a callback function at a future time.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_timer.h
    */
  def SDL_AddTimer(
      interval: Uint32,
      callback: SDL_TimerCallback,
      userdata: Ptr[Byte]
  ): SDL_TimerID = extern

  /** Call a callback function at a future time.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_timer.h
    */
  def SDL_AddTimerNS(
      interval: Uint64,
      callback: SDL_NSTimerCallback,
      userdata: Ptr[Byte]
  ): SDL_TimerID = extern

  /** Add a set of synchronization semaphores for the current frame.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_AddVulkanRenderSemaphores(
      renderer: Ptr[SDL_Renderer],
      wait_stage_mask: Uint32,
      wait_semaphore: Sint64,
      signal_semaphore: Sint64
  ): Boolean = extern

  /** Attach a new virtual joystick.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_AttachVirtualJoystick(
      desc: Ptr[SDL_VirtualJoystickDesc]
  ): SDL_JoystickID = extern

  /** Use this function to query if an audio device is paused.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_AudioDevicePaused(dev: SDL_AudioDeviceID): Boolean = extern

  /** Begins a compute pass on a command buffer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_BeginGPUComputePass(
      command_buffer: Ptr[SDL_GPUCommandBuffer],
      storage_texture_bindings: Ptr[SDL_GPUStorageTextureReadWriteBinding],
      num_storage_texture_bindings: Uint32,
      storage_buffer_bindings: Ptr[SDL_GPUStorageBufferReadWriteBinding],
      num_storage_buffer_bindings: Uint32
  ): Ptr[SDL_GPUComputePass] = extern

  /** Begins a copy pass on a command buffer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_BeginGPUCopyPass(
      command_buffer: Ptr[SDL_GPUCommandBuffer]
  ): Ptr[SDL_GPUCopyPass] = extern

  /** Begins a render pass on a command buffer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_BeginGPURenderPass(
      command_buffer: Ptr[SDL_GPUCommandBuffer],
      color_target_infos: Ptr[SDL_GPUColorTargetInfo],
      num_color_targets: Uint32,
      depth_stencil_target_info: Ptr[SDL_GPUDepthStencilTargetInfo]
  ): Ptr[SDL_GPURenderPass] = extern

  /** Bind a single audio stream to an audio device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_BindAudioStream(
      devid: SDL_AudioDeviceID,
      stream: Ptr[SDL_AudioStream]
  ): Boolean = extern

  /** Bind a list of audio streams to an audio device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_BindAudioStreams(
      devid: SDL_AudioDeviceID,
      streams: Ptr[Ptr[SDL_AudioStream]],
      num_streams: CInt
  ): Boolean = extern

  /** Binds a compute pipeline on a command buffer for use in compute dispatch.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_BindGPUComputePipeline(
      compute_pass: Ptr[SDL_GPUComputePass],
      compute_pipeline: Ptr[SDL_GPUComputePipeline]
  ): Unit = extern

  /** Binds texture-sampler pairs for use on the compute shader.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_BindGPUComputeSamplers(
      compute_pass: Ptr[SDL_GPUComputePass],
      first_slot: Uint32,
      texture_sampler_bindings: Ptr[SDL_GPUTextureSamplerBinding],
      num_bindings: Uint32
  ): Unit = extern

  /** Binds storage buffers as readonly for use on the compute pipeline.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_BindGPUComputeStorageBuffers(
      compute_pass: Ptr[SDL_GPUComputePass],
      first_slot: Uint32,
      storage_buffers: Ptr[Ptr[SDL_GPUBuffer]],
      num_bindings: Uint32
  ): Unit = extern

  /** Binds storage textures as readonly for use on the compute pipeline.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_BindGPUComputeStorageTextures(
      compute_pass: Ptr[SDL_GPUComputePass],
      first_slot: Uint32,
      storage_textures: Ptr[Ptr[SDL_GPUTexture]],
      num_bindings: Uint32
  ): Unit = extern

  /** Binds texture-sampler pairs for use on the fragment shader.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_BindGPUFragmentSamplers(
      render_pass: Ptr[SDL_GPURenderPass],
      first_slot: Uint32,
      texture_sampler_bindings: Ptr[SDL_GPUTextureSamplerBinding],
      num_bindings: Uint32
  ): Unit = extern

  /** Binds storage buffers for use on the fragment shader.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_BindGPUFragmentStorageBuffers(
      render_pass: Ptr[SDL_GPURenderPass],
      first_slot: Uint32,
      storage_buffers: Ptr[Ptr[SDL_GPUBuffer]],
      num_bindings: Uint32
  ): Unit = extern

  /** Binds storage textures for use on the fragment shader.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_BindGPUFragmentStorageTextures(
      render_pass: Ptr[SDL_GPURenderPass],
      first_slot: Uint32,
      storage_textures: Ptr[Ptr[SDL_GPUTexture]],
      num_bindings: Uint32
  ): Unit = extern

  /** Binds a graphics pipeline on a render pass to be used in rendering.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_BindGPUGraphicsPipeline(
      render_pass: Ptr[SDL_GPURenderPass],
      graphics_pipeline: Ptr[SDL_GPUGraphicsPipeline]
  ): Unit = extern

  /** Binds an index buffer on a command buffer for use with subsequent draw
    * calls.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_BindGPUIndexBuffer(
      render_pass: Ptr[SDL_GPURenderPass],
      binding: Ptr[SDL_GPUBufferBinding],
      index_element_size: SDL_GPUIndexElementSize
  ): Unit = extern

  /** Binds vertex buffers on a command buffer for use with subsequent draw
    * calls.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_BindGPUVertexBuffers(
      render_pass: Ptr[SDL_GPURenderPass],
      first_slot: Uint32,
      bindings: Ptr[SDL_GPUBufferBinding],
      num_bindings: Uint32
  ): Unit = extern

  /** Binds texture-sampler pairs for use on the vertex shader.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_BindGPUVertexSamplers(
      render_pass: Ptr[SDL_GPURenderPass],
      first_slot: Uint32,
      texture_sampler_bindings: Ptr[SDL_GPUTextureSamplerBinding],
      num_bindings: Uint32
  ): Unit = extern

  /** Binds storage buffers for use on the vertex shader.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_BindGPUVertexStorageBuffers(
      render_pass: Ptr[SDL_GPURenderPass],
      first_slot: Uint32,
      storage_buffers: Ptr[Ptr[SDL_GPUBuffer]],
      num_bindings: Uint32
  ): Unit = extern

  /** Binds storage textures for use on the vertex shader.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_BindGPUVertexStorageTextures(
      render_pass: Ptr[SDL_GPURenderPass],
      first_slot: Uint32,
      storage_textures: Ptr[Ptr[SDL_GPUTexture]],
      num_bindings: Uint32
  ): Unit = extern

  /** Blits from a source texture region to a destination texture region.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_BlitGPUTexture(
      command_buffer: Ptr[SDL_GPUCommandBuffer],
      info: Ptr[SDL_GPUBlitInfo]
  ): Unit = extern

  /** Performs a fast blit from the source surface to the destination surface.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_BlitSurface(
      src: Ptr[SDL_Surface],
      srcrect: Ptr[SDL_Rect],
      dst: Ptr[SDL_Surface],
      dstrect: Ptr[SDL_Rect]
  ): Boolean = extern

  /** Perform a scaled blit using the 9-grid algorithm to a destination surface,
    * which may be of a different format.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_BlitSurface9Grid(
      src: Ptr[SDL_Surface],
      srcrect: Ptr[SDL_Rect],
      left_width: CInt,
      right_width: CInt,
      top_height: CInt,
      bottom_height: CInt,
      scale: Float,
      scaleMode: SDL_ScaleMode,
      dst: Ptr[SDL_Surface],
      dstrect: Ptr[SDL_Rect]
  ): Boolean = extern

  /** Perform a scaled blit to a destination surface, which may be of a
    * different format.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_BlitSurfaceScaled(
      src: Ptr[SDL_Surface],
      srcrect: Ptr[SDL_Rect],
      dst: Ptr[SDL_Surface],
      dstrect: Ptr[SDL_Rect],
      scaleMode: SDL_ScaleMode
  ): Boolean = extern

  /** Perform a tiled blit to a destination surface, which may be of a different
    * format.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_BlitSurfaceTiled(
      src: Ptr[SDL_Surface],
      srcrect: Ptr[SDL_Rect],
      dst: Ptr[SDL_Surface],
      dstrect: Ptr[SDL_Rect]
  ): Boolean = extern

  /** Perform a scaled and tiled blit to a destination surface, which may be of
    * a different format.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_BlitSurfaceTiledWithScale(
      src: Ptr[SDL_Surface],
      srcrect: Ptr[SDL_Rect],
      scale: Float,
      scaleMode: SDL_ScaleMode,
      dst: Ptr[SDL_Surface],
      dstrect: Ptr[SDL_Rect]
  ): Boolean = extern

  /** Perform low-level surface blitting only.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_BlitSurfaceUnchecked(
      src: Ptr[SDL_Surface],
      srcrect: Ptr[SDL_Rect],
      dst: Ptr[SDL_Surface],
      dstrect: Ptr[SDL_Rect]
  ): Boolean = extern

  /** Perform low-level surface scaled blitting only.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_BlitSurfaceUncheckedScaled(
      src: Ptr[SDL_Surface],
      srcrect: Ptr[SDL_Rect],
      dst: Ptr[SDL_Surface],
      dstrect: Ptr[SDL_Rect],
      scaleMode: SDL_ScaleMode
  ): Boolean = extern

  /** Restart all threads that are waiting on the condition variable.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mutex.h
    */
  def SDL_BroadcastCondition(cond: Ptr[SDL_Condition]): Unit = extern

  /** Calculate the size in bytes of a texture format with dimensions.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_CalculateGPUTextureFormatSize(
      format: SDL_GPUTextureFormat,
      width: Uint32,
      height: Uint32,
      depth_or_layer_count: Uint32
  ): Uint32 = extern

  /** Cancels a command buffer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_CancelGPUCommandBuffer(
      command_buffer: Ptr[SDL_GPUCommandBuffer]
  ): Boolean = extern

  /** Capture the mouse and to track input outside an SDL window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mouse.h
    */
  def SDL_CaptureMouse(enabled: Boolean): Boolean = extern

  /** Claims a window, creating a swapchain structure for it.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_ClaimWindowForGPUDevice(
      device: Ptr[SDL_GPUDevice],
      window: Ptr[SDL_Window]
  ): Boolean = extern

  /** Cleanup all TLS data for this thread.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_thread.h
    */
  def SDL_CleanupTLS(): Unit = extern

  /** Clear any pending data in the stream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_ClearAudioStream(stream: Ptr[SDL_AudioStream]): Boolean = extern

  /** Clear the clipboard data.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_clipboard.h
    */
  def SDL_ClearClipboardData(): Boolean = extern

  /** Dismiss the composition window/IME without disabling the subsystem.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_keyboard.h
    */
  def SDL_ClearComposition(window: Ptr[SDL_Window]): Boolean = extern

  /** Clear any previous error message for this thread.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_error.h
    */
  def SDL_ClearError(): Boolean = extern

  /** Clear a property from a group of properties.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_properties.h
    */
  def SDL_ClearProperty(props: SDL_PropertiesID, name: CString): Boolean =
    extern

  /** Clear a surface with a specific color, with floating point precision.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_ClearSurface(
      surface: Ptr[SDL_Surface],
      r: Float,
      g: Float,
      b: Float,
      a: Float
  ): Boolean = extern

  /** Close a previously-opened audio device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_CloseAudioDevice(devid: SDL_AudioDeviceID): Unit = extern

  /** Use this function to shut down camera processing and close the camera
    * device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_camera.h
    */
  def SDL_CloseCamera(camera: Ptr[SDL_Camera]): Unit = extern

  /** Close a gamepad previously opened with SDL_OpenGamepad().
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_CloseGamepad(gamepad: Ptr[SDL_Gamepad]): Unit = extern

  /** Close a haptic device previously opened with SDL_OpenHaptic().
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  def SDL_CloseHaptic(haptic: Ptr[SDL_Haptic]): Unit = extern

  /** Close and free an allocated SDL_IOStream structure.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_CloseIO(context: Ptr[SDL_IOStream]): Boolean = extern

  /** Close a joystick previously opened with SDL_OpenJoystick().
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_CloseJoystick(joystick: Ptr[SDL_Joystick]): Unit = extern

  /** Close a sensor previously opened with SDL_OpenSensor().
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_sensor.h
    */
  def SDL_CloseSensor(sensor: Ptr[SDL_Sensor]): Unit = extern

  /** Closes and frees a storage container.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_storage.h
    */
  def SDL_CloseStorage(storage: Ptr[SDL_Storage]): Boolean = extern

  /** Set an atomic variable to a new value if it is currently an old value.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_atomic.h
    */
  def SDL_CompareAndSwapAtomicInt(
      a: Ptr[SDL_AtomicInt],
      oldval: CInt,
      newval: CInt
  ): Boolean = extern

  /** Set a pointer to a new value if it is currently an old value.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_atomic.h
    */
  def SDL_CompareAndSwapAtomicPointer(
      a: Ptr[Ptr[Byte]],
      oldval: Ptr[Byte],
      newval: Ptr[Byte]
  ): Boolean = extern

  /** Set an atomic variable to a new value if it is currently an old value.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_atomic.h
    */
  def SDL_CompareAndSwapAtomicU32(
      a: Ptr[SDL_AtomicU32],
      oldval: Uint32,
      newval: Uint32
  ): Boolean = extern

  /** Compose a custom blend mode for renderers.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_blendmode.h
    */
  def SDL_ComposeCustomBlendMode(
      srcColorFactor: SDL_BlendFactor,
      dstColorFactor: SDL_BlendFactor,
      colorOperation: SDL_BlendOperation,
      srcAlphaFactor: SDL_BlendFactor,
      dstAlphaFactor: SDL_BlendFactor,
      alphaOperation: SDL_BlendOperation
  ): SDL_BlendMode = extern

  /** Convert some audio data of one format to another format.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_ConvertAudioSamples(
      src_spec: Ptr[SDL_AudioSpec],
      src_data: Ptr[Uint8],
      src_len: CInt,
      dst_spec: Ptr[SDL_AudioSpec],
      dst_data: Ptr[Ptr[Uint8]],
      dst_len: Ptr[CInt]
  ): Boolean = extern

  /** Convert the coordinates in an event to render coordinates.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_ConvertEventToRenderCoordinates(
      renderer: Ptr[SDL_Renderer],
      event: Ptr[SDL_Event]
  ): Boolean = extern

  /** Copy a block of pixels of one format to another format.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_ConvertPixels(
      width: CInt,
      height: CInt,
      src_format: SDL_PixelFormat,
      src: Ptr[Byte],
      src_pitch: CInt,
      dst_format: SDL_PixelFormat,
      dst: Ptr[Byte],
      dst_pitch: CInt
  ): Boolean = extern

  /** Copy a block of pixels of one format and colorspace to another format and
    * colorspace.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_ConvertPixelsAndColorspace(
      width: CInt,
      height: CInt,
      src_format: SDL_PixelFormat,
      src_colorspace: SDL_Colorspace,
      src_properties: SDL_PropertiesID,
      src: Ptr[Byte],
      src_pitch: CInt,
      dst_format: SDL_PixelFormat,
      dst_colorspace: SDL_Colorspace,
      dst_properties: SDL_PropertiesID,
      dst: Ptr[Byte],
      dst_pitch: CInt
  ): Boolean = extern

  /** Copy an existing surface to a new surface of the specified format.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_ConvertSurface(
      surface: Ptr[SDL_Surface],
      format: SDL_PixelFormat
  ): Ptr[SDL_Surface] = extern

  /** Copy an existing surface to a new surface of the specified format and
    * colorspace.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_ConvertSurfaceAndColorspace(
      surface: Ptr[SDL_Surface],
      format: SDL_PixelFormat,
      palette: Ptr[SDL_Palette],
      colorspace: SDL_Colorspace,
      props: SDL_PropertiesID
  ): Ptr[SDL_Surface] = extern

  /** Copy a file.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_filesystem.h
    */
  def SDL_CopyFile(oldpath: CString, newpath: CString): Boolean = extern

  /** Performs a buffer-to-buffer copy.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_CopyGPUBufferToBuffer(
      copy_pass: Ptr[SDL_GPUCopyPass],
      source: Ptr[SDL_GPUBufferLocation],
      destination: Ptr[SDL_GPUBufferLocation],
      size: Uint32,
      cycle: Boolean
  ): Unit = extern

  /** Performs a texture-to-texture copy.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_CopyGPUTextureToTexture(
      copy_pass: Ptr[SDL_GPUCopyPass],
      source: Ptr[SDL_GPUTextureLocation],
      destination: Ptr[SDL_GPUTextureLocation],
      w: Uint32,
      h: Uint32,
      d: Uint32,
      cycle: Boolean
  ): Unit = extern

  /** Copy a group of properties.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_properties.h
    */
  def SDL_CopyProperties(
      src: SDL_PropertiesID,
      dst: SDL_PropertiesID
  ): Boolean = extern

  /** Copy a file in a writable storage container.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_storage.h
    */
  def SDL_CopyStorageFile(
      storage: Ptr[SDL_Storage],
      oldpath: CString,
      newpath: CString
  ): Boolean = extern

  /** Create a new audio stream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_CreateAudioStream(
      src_spec: Ptr[SDL_AudioSpec],
      dst_spec: Ptr[SDL_AudioSpec]
  ): Ptr[SDL_AudioStream] = extern

  /** Create a color cursor.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mouse.h
    */
  def SDL_CreateColorCursor(
      surface: Ptr[SDL_Surface],
      hot_x: CInt,
      hot_y: CInt
  ): Ptr[SDL_Cursor] = extern

  /** Create a condition variable.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mutex.h
    */
  def SDL_CreateCondition(): Ptr[SDL_Condition] = extern

  /** Create a cursor using the specified bitmap data and mask (in MSB format).
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mouse.h
    */
  def SDL_CreateCursor(
      data: Ptr[Uint8],
      mask: Ptr[Uint8],
      w: CInt,
      h: CInt,
      hot_x: CInt,
      hot_y: CInt
  ): Ptr[SDL_Cursor] = extern

  /** Create a directory, and any missing parent directories.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_filesystem.h
    */
  def SDL_CreateDirectory(path: CString): Boolean = extern

  /** Create a set of environment variables
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_CreateEnvironment(populated: Boolean): Ptr[SDL_Environment] = extern

  /** Creates a buffer object to be used in graphics or compute workflows.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_CreateGPUBuffer(
      device: Ptr[SDL_GPUDevice],
      createinfo: Ptr[SDL_GPUBufferCreateInfo]
  ): Ptr[SDL_GPUBuffer] = extern

  /** Creates a pipeline object to be used in a compute workflow.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_CreateGPUComputePipeline(
      device: Ptr[SDL_GPUDevice],
      createinfo: Ptr[SDL_GPUComputePipelineCreateInfo]
  ): Ptr[SDL_GPUComputePipeline] = extern

  /** Creates a GPU context.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_CreateGPUDevice(
      format_flags: SDL_GPUShaderFormat,
      debug_mode: Boolean,
      name: CString
  ): Ptr[SDL_GPUDevice] = extern

  /** Creates a GPU context.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_CreateGPUDeviceWithProperties(
      props: SDL_PropertiesID
  ): Ptr[SDL_GPUDevice] = extern

  /** Creates a pipeline object to be used in a graphics workflow.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_CreateGPUGraphicsPipeline(
      device: Ptr[SDL_GPUDevice],
      createinfo: Ptr[SDL_GPUGraphicsPipelineCreateInfo]
  ): Ptr[SDL_GPUGraphicsPipeline] = extern

  /** Creates a sampler object to be used when binding textures in a graphics
    * workflow.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_CreateGPUSampler(
      device: Ptr[SDL_GPUDevice],
      createinfo: Ptr[SDL_GPUSamplerCreateInfo]
  ): Ptr[SDL_GPUSampler] = extern

  /** Creates a shader to be used when creating a graphics pipeline.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_CreateGPUShader(
      device: Ptr[SDL_GPUDevice],
      createinfo: Ptr[SDL_GPUShaderCreateInfo]
  ): Ptr[SDL_GPUShader] = extern

  /** Creates a texture object to be used in graphics or compute workflows.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_CreateGPUTexture(
      device: Ptr[SDL_GPUDevice],
      createinfo: Ptr[SDL_GPUTextureCreateInfo]
  ): Ptr[SDL_GPUTexture] = extern

  /** Creates a transfer buffer to be used when uploading to or downloading from
    * graphics resources.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_CreateGPUTransferBuffer(
      device: Ptr[SDL_GPUDevice],
      createinfo: Ptr[SDL_GPUTransferBufferCreateInfo]
  ): Ptr[SDL_GPUTransferBuffer] = extern

  /** Create a new haptic effect on a specified device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  def SDL_CreateHapticEffect(
      haptic: Ptr[SDL_Haptic],
      effect: Ptr[SDL_HapticEffect]
  ): CInt = extern

  /** Create a new mutex.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mutex.h
    */
  def SDL_CreateMutex(): Ptr[SDL_Mutex] = extern

  /** Create a palette structure with the specified number of color entries.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_pixels.h
    */
  def SDL_CreatePalette(ncolors: CInt): Ptr[SDL_Palette] = extern

  /** Create a child popup window of the specified parent window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_CreatePopupWindow(
      parent: Ptr[SDL_Window],
      offset_x: CInt,
      offset_y: CInt,
      w: CInt,
      h: CInt,
      flags: SDL_WindowFlags
  ): Ptr[SDL_Window] = extern

  /** Create a new process.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_process.h
    */
  def SDL_CreateProcess(
      args: Ptr[CString],
      pipe_stdio: Boolean
  ): Ptr[SDL_Process] = extern

  /** Create a new process with the specified properties.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_process.h
    */
  def SDL_CreateProcessWithProperties(
      props: SDL_PropertiesID
  ): Ptr[SDL_Process] = extern

  /** Create a group of properties.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_properties.h
    */
  def SDL_CreateProperties(): SDL_PropertiesID = extern

  /** Create a new read/write lock.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mutex.h
    */
  def SDL_CreateRWLock(): Ptr[SDL_RWLock] = extern

  /** Create a 2D rendering context for a window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_CreateRenderer(
      window: Ptr[SDL_Window],
      name: CString
  ): Ptr[SDL_Renderer] = extern

  /** Create a 2D rendering context for a window, with the specified properties.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_CreateRendererWithProperties(
      props: SDL_PropertiesID
  ): Ptr[SDL_Renderer] = extern

  /** Create a semaphore.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mutex.h
    */
  def SDL_CreateSemaphore(initial_value: Uint32): Ptr[SDL_Semaphore] = extern

  /** Create a 2D software rendering context for a surface.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_CreateSoftwareRenderer(surface: Ptr[SDL_Surface]): Ptr[SDL_Renderer] =
    extern

  /** Create a directory in a writable storage container.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_storage.h
    */
  def SDL_CreateStorageDirectory(
      storage: Ptr[SDL_Storage],
      path: CString
  ): Boolean = extern

  /** Allocate a new surface with a specific pixel format.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_CreateSurface(
      width: CInt,
      height: CInt,
      format: SDL_PixelFormat
  ): Ptr[SDL_Surface] = extern

  /** Allocate a new surface with a specific pixel format and existing pixel
    * data.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_CreateSurfaceFrom(
      width: CInt,
      height: CInt,
      format: SDL_PixelFormat,
      pixels: Ptr[Byte],
      pitch: CInt
  ): Ptr[SDL_Surface] = extern

  /** Create a palette and associate it with a surface.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_CreateSurfacePalette(surface: Ptr[SDL_Surface]): Ptr[SDL_Palette] =
    extern

  /** Create a system cursor.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mouse.h
    */
  def SDL_CreateSystemCursor(id: SDL_SystemCursor): Ptr[SDL_Cursor] = extern

  /** Create a texture for a rendering context.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_CreateTexture(
      renderer: Ptr[SDL_Renderer],
      format: SDL_PixelFormat,
      access: SDL_TextureAccess,
      w: CInt,
      h: CInt
  ): Ptr[SDL_Texture] = extern

  /** Create a texture from an existing surface.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_CreateTextureFromSurface(
      renderer: Ptr[SDL_Renderer],
      surface: Ptr[SDL_Surface]
  ): Ptr[SDL_Texture] = extern

  /** Create a texture for a rendering context with the specified properties.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_CreateTextureWithProperties(
      renderer: Ptr[SDL_Renderer],
      props: SDL_PropertiesID
  ): Ptr[SDL_Texture] = extern

  /** The actual entry point for SDL_CreateThread.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_thread.h
    */
  def SDL_CreateThreadRuntime(
      fn: SDL_ThreadFunction,
      name: CString,
      data: Ptr[Byte],
      pfnBeginThread: SDL_FunctionPointer,
      pfnEndThread: SDL_FunctionPointer
  ): Ptr[SDL_Thread] = extern

  /** The actual entry point for SDL_CreateThreadWithProperties.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_thread.h
    */
  def SDL_CreateThreadWithPropertiesRuntime(
      props: SDL_PropertiesID,
      pfnBeginThread: SDL_FunctionPointer,
      pfnEndThread: SDL_FunctionPointer
  ): Ptr[SDL_Thread] = extern

  /** Create a window with the specified dimensions and flags.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_CreateWindow(
      title: CString,
      w: CInt,
      h: CInt,
      flags: SDL_WindowFlags
  ): Ptr[SDL_Window] = extern

  /** Create a window and default renderer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_CreateWindowAndRenderer(
      title: CString,
      width: CInt,
      height: CInt,
      window_flags: SDL_WindowFlags,
      window: Ptr[Ptr[SDL_Window]],
      renderer: Ptr[Ptr[SDL_Renderer]]
  ): Boolean = extern

  /** Create a window with the specified properties.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_CreateWindowWithProperties(props: SDL_PropertiesID): Ptr[SDL_Window] =
    extern

  /** Return whether the cursor is currently being shown.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mouse.h
    */
  def SDL_CursorVisible(): Boolean = extern

  /** Converts a calendar time to an SDL_Time in nanoseconds since the epoch.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_time.h
    */
  def SDL_DateTimeToTime(dt: Ptr[SDL_DateTime], ticks: Ptr[SDL_Time]): Boolean =
    extern

  /** Wait a specified number of milliseconds before returning.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_timer.h
    */
  def SDL_Delay(ms: Uint32): Unit = extern

  /** Wait a specified number of nanoseconds before returning.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_timer.h
    */
  def SDL_DelayNS(ns: Uint64): Unit = extern

  /** Wait a specified number of nanoseconds before returning.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_timer.h
    */
  def SDL_DelayPrecise(ns: Uint64): Unit = extern

  /** Free an audio stream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_DestroyAudioStream(stream: Ptr[SDL_AudioStream]): Unit = extern

  /** Destroy a condition variable.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mutex.h
    */
  def SDL_DestroyCondition(cond: Ptr[SDL_Condition]): Unit = extern

  /** Free a previously-created cursor.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mouse.h
    */
  def SDL_DestroyCursor(cursor: Ptr[SDL_Cursor]): Unit = extern

  /** Destroy a set of environment variables.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_DestroyEnvironment(env: Ptr[SDL_Environment]): Unit = extern

  /** Destroys a GPU context previously returned by SDL_CreateGPUDevice.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_DestroyGPUDevice(device: Ptr[SDL_GPUDevice]): Unit = extern

  /** Destroy a haptic effect on the device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  def SDL_DestroyHapticEffect(haptic: Ptr[SDL_Haptic], effect: CInt): Unit =
    extern

  /** Destroy a mutex created with SDL_CreateMutex().
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mutex.h
    */
  def SDL_DestroyMutex(mutex: Ptr[SDL_Mutex]): Unit = extern

  /** Free a palette created with SDL_CreatePalette().
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_pixels.h
    */
  def SDL_DestroyPalette(palette: Ptr[SDL_Palette]): Unit = extern

  /** Destroy a previously created process object.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_process.h
    */
  def SDL_DestroyProcess(process: Ptr[SDL_Process]): Unit = extern

  /** Destroy a group of properties.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_properties.h
    */
  def SDL_DestroyProperties(props: SDL_PropertiesID): Unit = extern

  /** Destroy a read/write lock created with SDL_CreateRWLock().
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mutex.h
    */
  def SDL_DestroyRWLock(rwlock: Ptr[SDL_RWLock]): Unit = extern

  /** Destroy the rendering context for a window and free all associated
    * textures.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_DestroyRenderer(renderer: Ptr[SDL_Renderer]): Unit = extern

  /** Destroy a semaphore.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mutex.h
    */
  def SDL_DestroySemaphore(sem: Ptr[SDL_Semaphore]): Unit = extern

  /** Free a surface.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_DestroySurface(surface: Ptr[SDL_Surface]): Unit = extern

  /** Destroy the specified texture.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_DestroyTexture(texture: Ptr[SDL_Texture]): Unit = extern

  /** Destroy a window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_DestroyWindow(window: Ptr[SDL_Window]): Unit = extern

  /** Destroy the surface associated with the window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_DestroyWindowSurface(window: Ptr[SDL_Window]): Boolean = extern

  /** Let a thread clean up on exit without intervention.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_thread.h
    */
  def SDL_DetachThread(thread: Ptr[SDL_Thread]): Unit = extern

  /** Detach a virtual joystick.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_DetachVirtualJoystick(instance_id: SDL_JoystickID): Boolean = extern

  /** Prevent the screen from being blanked by a screen saver.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_DisableScreenSaver(): Boolean = extern

  /** Dispatches compute work.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_DispatchGPUCompute(
      compute_pass: Ptr[SDL_GPUComputePass],
      groupcount_x: Uint32,
      groupcount_y: Uint32,
      groupcount_z: Uint32
  ): Unit = extern

  /** Dispatches compute work with parameters set from a buffer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_DispatchGPUComputeIndirect(
      compute_pass: Ptr[SDL_GPUComputePass],
      buffer: Ptr[SDL_GPUBuffer],
      offset: Uint32
  ): Unit = extern

  /** Copies data from a buffer to a transfer buffer on the GPU timeline.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_DownloadFromGPUBuffer(
      copy_pass: Ptr[SDL_GPUCopyPass],
      source: Ptr[SDL_GPUBufferRegion],
      destination: Ptr[SDL_GPUTransferBufferLocation]
  ): Unit = extern

  /** Copies data from a texture to a transfer buffer on the GPU timeline.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_DownloadFromGPUTexture(
      copy_pass: Ptr[SDL_GPUCopyPass],
      source: Ptr[SDL_GPUTextureRegion],
      destination: Ptr[SDL_GPUTextureTransferInfo]
  ): Unit = extern

  /** Draws data using bound graphics state with an index buffer and instancing
    * enabled.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_DrawGPUIndexedPrimitives(
      render_pass: Ptr[SDL_GPURenderPass],
      num_indices: Uint32,
      num_instances: Uint32,
      first_index: Uint32,
      vertex_offset: Sint32,
      first_instance: Uint32
  ): Unit = extern

  /** Draws data using bound graphics state with an index buffer enabled and
    * with draw parameters set from a buffer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_DrawGPUIndexedPrimitivesIndirect(
      render_pass: Ptr[SDL_GPURenderPass],
      buffer: Ptr[SDL_GPUBuffer],
      offset: Uint32,
      draw_count: Uint32
  ): Unit = extern

  /** Draws data using bound graphics state.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_DrawGPUPrimitives(
      render_pass: Ptr[SDL_GPURenderPass],
      num_vertices: Uint32,
      num_instances: Uint32,
      first_vertex: Uint32,
      first_instance: Uint32
  ): Unit = extern

  /** Draws data using bound graphics state and with draw parameters set from a
    * buffer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_DrawGPUPrimitivesIndirect(
      render_pass: Ptr[SDL_GPURenderPass],
      buffer: Ptr[SDL_GPUBuffer],
      offset: Uint32,
      draw_count: Uint32
  ): Unit = extern

  /** Creates a new surface identical to the existing surface.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_DuplicateSurface(surface: Ptr[SDL_Surface]): Ptr[SDL_Surface] = extern

  /** Get the currently active EGL config.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_EGL_GetCurrentConfig(): SDL_EGLConfig = extern

  /** Get the currently active EGL display.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_EGL_GetCurrentDisplay(): SDL_EGLDisplay = extern

  /** Get an EGL library function by name.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_EGL_GetProcAddress(proc: CString): SDL_FunctionPointer = extern

  /** Get the EGL surface associated with the window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_EGL_GetWindowSurface(window: Ptr[SDL_Window]): SDL_EGLSurface = extern

  /** Sets the callbacks for defining custom EGLAttrib arrays for EGL
    * initialization.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_EGL_SetAttributeCallbacks(
      platformAttribCallback: SDL_EGLAttribArrayCallback,
      surfaceAttribCallback: SDL_EGLIntArrayCallback,
      contextAttribCallback: SDL_EGLIntArrayCallback,
      userdata: Ptr[Byte]
  ): Unit = extern

  /** Allow the screen to be blanked by a screen saver.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_EnableScreenSaver(): Boolean = extern

  /** Ends the current compute pass.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_EndGPUComputePass(compute_pass: Ptr[SDL_GPUComputePass]): Unit =
    extern

  /** Ends the current copy pass.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_EndGPUCopyPass(copy_pass: Ptr[SDL_GPUCopyPass]): Unit = extern

  /** Ends the given render pass.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_EndGPURenderPass(render_pass: Ptr[SDL_GPURenderPass]): Unit = extern

  /** Enumerate a directory through a callback function.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_filesystem.h
    */
  def SDL_EnumerateDirectory(
      path: CString,
      callback: SDL_EnumerateDirectoryCallback,
      userdata: Ptr[Byte]
  ): Boolean = extern

  /** Enumerate the properties contained in a group of properties.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_properties.h
    */
  def SDL_EnumerateProperties(
      props: SDL_PropertiesID,
      callback: SDL_EnumeratePropertiesCallback,
      userdata: Ptr[Byte]
  ): Boolean = extern

  /** Enumerate a directory in a storage container through a callback function.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_storage.h
    */
  def SDL_EnumerateStorageDirectory(
      storage: Ptr[SDL_Storage],
      path: CString,
      callback: SDL_EnumerateDirectoryCallback,
      userdata: Ptr[Byte]
  ): Boolean = extern

  /** Query the state of processing events by type.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  def SDL_EventEnabled(`type`: Uint32): Boolean = extern

  /** Perform a fast fill of a rectangle with a specific color.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_FillSurfaceRect(
      dst: Ptr[SDL_Surface],
      rect: Ptr[SDL_Rect],
      color: Uint32
  ): Boolean = extern

  /** Perform a fast fill of a set of rectangles with a specific color.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_FillSurfaceRects(
      dst: Ptr[SDL_Surface],
      rects: Ptr[SDL_Rect],
      count: CInt,
      color: Uint32
  ): Boolean = extern

  /** Run a specific filter function on the current event queue, removing any
    * events for which the filter returns false.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  def SDL_FilterEvents(filter: SDL_EventFilter, userdata: Ptr[Byte]): Unit =
    extern

  /** Request a window to demand attention from the user.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_FlashWindow(
      window: Ptr[SDL_Window],
      operation: SDL_FlashOperation
  ): Boolean = extern

  /** Flip a surface vertically or horizontally.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_FlipSurface(surface: Ptr[SDL_Surface], flip: SDL_FlipMode): Boolean =
    extern

  /** Tell the stream that you're done sending data, and anything being buffered
    * should be converted/resampled and made available immediately.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_FlushAudioStream(stream: Ptr[SDL_AudioStream]): Boolean = extern

  /** Clear events of a specific type from the event queue.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  def SDL_FlushEvent(`type`: Uint32): Unit = extern

  /** Clear events of a range of types from the event queue.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  def SDL_FlushEvents(minType: Uint32, maxType: Uint32): Unit = extern

  /** Flush any buffered data in the stream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_FlushIO(context: Ptr[SDL_IOStream]): Boolean = extern

  /** Force the rendering context to flush any pending commands and state.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_FlushRenderer(renderer: Ptr[SDL_Renderer]): Boolean = extern

  /** Create an OpenGL context for an OpenGL window, and make it current.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GL_CreateContext(window: Ptr[SDL_Window]): SDL_GLContext = extern

  /** Delete an OpenGL context.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GL_DestroyContext(context: SDL_GLContext): Boolean = extern

  /** Check if an OpenGL extension is supported for the current context.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GL_ExtensionSupported(extension: CString): Boolean = extern

  /** Get the actual value for an attribute from the current context.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GL_GetAttribute(attr: SDL_GLAttr, value: Ptr[CInt]): Boolean = extern

  /** Get the currently active OpenGL context.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GL_GetCurrentContext(): SDL_GLContext = extern

  /** Get the currently active OpenGL window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GL_GetCurrentWindow(): Ptr[SDL_Window] = extern

  /** Get an OpenGL function by name.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GL_GetProcAddress(proc: CString): SDL_FunctionPointer = extern

  /** Get the swap interval for the current OpenGL context.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GL_GetSwapInterval(interval: Ptr[CInt]): Boolean = extern

  /** Dynamically load an OpenGL library.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GL_LoadLibrary(path: CString): Boolean = extern

  /** Set up an OpenGL context for rendering into an OpenGL window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GL_MakeCurrent(
      window: Ptr[SDL_Window],
      context: SDL_GLContext
  ): Boolean = extern

  /** Reset all previously set OpenGL context attributes to their default
    * values.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GL_ResetAttributes(): Unit = extern

  /** Set an OpenGL window attribute before window creation.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GL_SetAttribute(attr: SDL_GLAttr, value: CInt): Boolean = extern

  /** Set the swap interval for the current OpenGL context.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GL_SetSwapInterval(interval: CInt): Boolean = extern

  /** Update a window with OpenGL rendering.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GL_SwapWindow(window: Ptr[SDL_Window]): Boolean = extern

  /** Unload the OpenGL library previously loaded by SDL_GL_LoadLibrary().
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GL_UnloadLibrary(): Unit = extern

  /** Checks for GPU runtime support.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_GPUSupportsProperties(props: SDL_PropertiesID): Boolean = extern

  /** Checks for GPU runtime support.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_GPUSupportsShaderFormats(
      format_flags: SDL_GPUShaderFormat,
      name: CString
  ): Boolean = extern

  /** Obtains the texel block size for a texture format.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_GPUTextureFormatTexelBlockSize(format: SDL_GPUTextureFormat): Uint32 =
    extern

  /** Determines whether a texture format is supported for a given type and
    * usage.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_GPUTextureSupportsFormat(
      device: Ptr[SDL_GPUDevice],
      format: SDL_GPUTextureFormat,
      `type`: SDL_GPUTextureType,
      usage: SDL_GPUTextureUsageFlags
  ): Boolean = extern

  /** Determines if a sample count for a texture format is supported.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_GPUTextureSupportsSampleCount(
      device: Ptr[SDL_GPUDevice],
      format: SDL_GPUTextureFormat,
      sample_count: SDL_GPUSampleCount
  ): Boolean = extern

  /** Check if a gamepad has been opened and is currently connected.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GamepadConnected(gamepad: Ptr[SDL_Gamepad]): Boolean = extern

  /** Query the state of gamepad event processing.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GamepadEventsEnabled(): Boolean = extern

  /** Query whether a gamepad has a given axis.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GamepadHasAxis(
      gamepad: Ptr[SDL_Gamepad],
      axis: SDL_GamepadAxis
  ): Boolean = extern

  /** Query whether a gamepad has a given button.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GamepadHasButton(
      gamepad: Ptr[SDL_Gamepad],
      button: SDL_GamepadButton
  ): Boolean = extern

  /** Return whether a gamepad has a particular sensor.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GamepadHasSensor(
      gamepad: Ptr[SDL_Gamepad],
      `type`: SDL_SensorType
  ): Boolean = extern

  /** Query whether sensor data reporting is enabled for a gamepad.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GamepadSensorEnabled(
      gamepad: Ptr[SDL_Gamepad],
      `type`: SDL_SensorType
  ): Boolean = extern

  /** Generates mipmaps for the given texture.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_GenerateMipmapsForGPUTexture(
      command_buffer: Ptr[SDL_GPUCommandBuffer],
      texture: Ptr[SDL_GPUTexture]
  ): Unit = extern

  /** Get metadata about your app.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_init.h
    */
  def SDL_GetAppMetadataProperty(name: CString): CString = extern

  /** Get the current assertion handler.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_assert.h
    */
  def SDL_GetAssertionHandler(puserdata: Ptr[Ptr[Byte]]): SDL_AssertionHandler =
    extern

  /** Get a list of all assertion failures.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_assert.h
    */
  def SDL_GetAssertionReport(): Ptr[SDL_AssertData] = extern

  /** Get the value of an atomic variable.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_atomic.h
    */
  def SDL_GetAtomicInt(a: Ptr[SDL_AtomicInt]): CInt = extern

  /** Get the value of a pointer atomically.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_atomic.h
    */
  def SDL_GetAtomicPointer(a: Ptr[Ptr[Byte]]): Ptr[Byte] = extern

  /** Get the value of an atomic variable.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_atomic.h
    */
  def SDL_GetAtomicU32(a: Ptr[SDL_AtomicU32]): Uint32 = extern

  /** Get the current channel map of an audio device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_GetAudioDeviceChannelMap(
      devid: SDL_AudioDeviceID,
      count: Ptr[CInt]
  ): Ptr[CInt] = extern

  /** Get the current audio format of a specific audio device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_GetAudioDeviceFormat(
      devid: SDL_AudioDeviceID,
      spec: Ptr[SDL_AudioSpec],
      sample_frames: Ptr[CInt]
  ): Boolean = extern

  /** Get the gain of an audio device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_GetAudioDeviceGain(devid: SDL_AudioDeviceID): Float = extern

  /** Get the human-readable name of a specific audio device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_GetAudioDeviceName(devid: SDL_AudioDeviceID): CString = extern

  /** Use this function to get the name of a built in audio driver.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_GetAudioDriver(index: CInt): CString = extern

  /** Get the human readable name of an audio format.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_GetAudioFormatName(format: SDL_AudioFormat): CString = extern

  /** Get a list of currently-connected audio playback devices.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_GetAudioPlaybackDevices(count: Ptr[CInt]): Ptr[SDL_AudioDeviceID] =
    extern

  /** Get a list of currently-connected audio recording devices.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_GetAudioRecordingDevices(count: Ptr[CInt]): Ptr[SDL_AudioDeviceID] =
    extern

  /** Get the number of converted/resampled bytes available.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_GetAudioStreamAvailable(stream: Ptr[SDL_AudioStream]): CInt = extern

  /** Get converted/resampled data from the stream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_GetAudioStreamData(
      stream: Ptr[SDL_AudioStream],
      buf: Ptr[Byte],
      len: CInt
  ): CInt = extern

  /** Query an audio stream for its currently-bound device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_GetAudioStreamDevice(
      stream: Ptr[SDL_AudioStream]
  ): SDL_AudioDeviceID = extern

  /** Query the current format of an audio stream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_GetAudioStreamFormat(
      stream: Ptr[SDL_AudioStream],
      src_spec: Ptr[SDL_AudioSpec],
      dst_spec: Ptr[SDL_AudioSpec]
  ): Boolean = extern

  /** Get the frequency ratio of an audio stream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_GetAudioStreamFrequencyRatio(stream: Ptr[SDL_AudioStream]): Float =
    extern

  /** Get the gain of an audio stream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_GetAudioStreamGain(stream: Ptr[SDL_AudioStream]): Float = extern

  /** Get the current input channel map of an audio stream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_GetAudioStreamInputChannelMap(
      stream: Ptr[SDL_AudioStream],
      count: Ptr[CInt]
  ): Ptr[CInt] = extern

  /** Get the current output channel map of an audio stream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_GetAudioStreamOutputChannelMap(
      stream: Ptr[SDL_AudioStream],
      count: Ptr[CInt]
  ): Ptr[CInt] = extern

  /** Get the properties associated with an audio stream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_GetAudioStreamProperties(
      stream: Ptr[SDL_AudioStream]
  ): SDL_PropertiesID = extern

  /** Get the number of bytes currently queued.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_GetAudioStreamQueued(stream: Ptr[SDL_AudioStream]): CInt = extern

  /** Get the directory where the application was run from.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_filesystem.h
    */
  def SDL_GetBasePath(): CString = extern

  /** Get a boolean property from a group of properties.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_properties.h
    */
  def SDL_GetBooleanProperty(
      props: SDL_PropertiesID,
      name: CString,
      default_value: Boolean
  ): Boolean = extern

  /** Determine the L1 cache line size of the CPU.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_cpuinfo.h
    */
  def SDL_GetCPUCacheLineSize(): CInt = extern

  /** Use this function to get the name of a built in camera driver.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_camera.h
    */
  def SDL_GetCameraDriver(index: CInt): CString = extern

  /** Get the spec that a camera is using when generating images.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_camera.h
    */
  def SDL_GetCameraFormat(
      camera: Ptr[SDL_Camera],
      spec: Ptr[SDL_CameraSpec]
  ): Boolean = extern

  /** Get the instance ID of an opened camera.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_camera.h
    */
  def SDL_GetCameraID(camera: Ptr[SDL_Camera]): SDL_CameraID = extern

  /** Get the human-readable device name for a camera.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_camera.h
    */
  def SDL_GetCameraName(instance_id: SDL_CameraID): CString = extern

  /** Query if camera access has been approved by the user.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_camera.h
    */
  def SDL_GetCameraPermissionState(camera: Ptr[SDL_Camera]): CInt = extern

  /** Get the position of the camera in relation to the system.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_camera.h
    */
  def SDL_GetCameraPosition(instance_id: SDL_CameraID): SDL_CameraPosition =
    extern

  /** Get the properties associated with an opened camera.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_camera.h
    */
  def SDL_GetCameraProperties(camera: Ptr[SDL_Camera]): SDL_PropertiesID =
    extern

  /** Get the list of native formats/sizes a camera supports.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_camera.h
    */
  def SDL_GetCameraSupportedFormats(
      devid: SDL_CameraID,
      count: Ptr[CInt]
  ): Ptr[Ptr[SDL_CameraSpec]] = extern

  /** Get a list of currently connected camera devices.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_camera.h
    */
  def SDL_GetCameras(count: Ptr[CInt]): Ptr[SDL_CameraID] = extern

  /** Get the data from clipboard for a given mime type.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_clipboard.h
    */
  def SDL_GetClipboardData(mime_type: CString, size: Ptr[size_t]): Ptr[Byte] =
    extern

  /** Retrieve the list of mime types available in the clipboard.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_clipboard.h
    */
  def SDL_GetClipboardMimeTypes(num_mime_types: Ptr[size_t]): Ptr[CString] =
    extern

  /** Get UTF-8 text from the clipboard.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_clipboard.h
    */
  def SDL_GetClipboardText(): CString = extern

  /** Get the closest match to the requested display mode.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetClosestFullscreenDisplayMode(
      displayID: SDL_DisplayID,
      w: CInt,
      h: CInt,
      refresh_rate: Float,
      include_high_density_modes: Boolean,
      mode: Ptr[SDL_DisplayMode]
  ): Boolean = extern

  /** Get the name of the current audio driver.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_GetCurrentAudioDriver(): CString = extern

  /** Get the name of the current camera driver.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_camera.h
    */
  def SDL_GetCurrentCameraDriver(): CString = extern

  /** Get information about the current display mode.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetCurrentDisplayMode(
      displayID: SDL_DisplayID
  ): Ptr[SDL_DisplayMode] = extern

  /** Get the orientation of a display.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetCurrentDisplayOrientation(
      displayID: SDL_DisplayID
  ): SDL_DisplayOrientation = extern

  /** Get the current output size in pixels of a rendering context.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_GetCurrentRenderOutputSize(
      renderer: Ptr[SDL_Renderer],
      w: Ptr[CInt],
      h: Ptr[CInt]
  ): Boolean = extern

  /** Get the thread identifier for the current thread.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_thread.h
    */
  def SDL_GetCurrentThreadID(): SDL_ThreadID = extern

  /** Gets the current value of the system realtime clock in nanoseconds since
    * Jan 1, 1970 in Universal Coordinated Time (UTC).
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_time.h
    */
  def SDL_GetCurrentTime(ticks: Ptr[SDL_Time]): Boolean = extern

  /** Get the name of the currently initialized video driver.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetCurrentVideoDriver(): CString = extern

  /** Get the active cursor.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mouse.h
    */
  def SDL_GetCursor(): Ptr[SDL_Cursor] = extern

  /** Gets the current preferred date and time format for the system locale.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_time.h
    */
  def SDL_GetDateTimeLocalePreferences(
      dateFormat: Ptr[SDL_DateFormat],
      timeFormat: Ptr[SDL_TimeFormat]
  ): Boolean = extern

  /** Get the day of week for a calendar date.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_time.h
    */
  def SDL_GetDayOfWeek(year: CInt, month: CInt, day: CInt): CInt = extern

  /** Get the day of year for a calendar date.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_time.h
    */
  def SDL_GetDayOfYear(year: CInt, month: CInt, day: CInt): CInt = extern

  /** Get the number of days in a month for a given year.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_time.h
    */
  def SDL_GetDaysInMonth(year: CInt, month: CInt): CInt = extern

  /** Get the default assertion handler.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_assert.h
    */
  def SDL_GetDefaultAssertionHandler(): SDL_AssertionHandler = extern

  /** Get the default cursor.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mouse.h
    */
  def SDL_GetDefaultCursor(): Ptr[SDL_Cursor] = extern

  /** Get the default log output function.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_log.h
    */
  def SDL_GetDefaultLogOutputFunction(): SDL_LogOutputFunction = extern

  /** Get information about the desktop's display mode.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetDesktopDisplayMode(
      displayID: SDL_DisplayID
  ): Ptr[SDL_DisplayMode] = extern

  /** Get the desktop area represented by a display.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetDisplayBounds(
      displayID: SDL_DisplayID,
      rect: Ptr[SDL_Rect]
  ): Boolean = extern

  /** Get the content scale of a display.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetDisplayContentScale(displayID: SDL_DisplayID): Float = extern

  /** Get the display containing a point.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetDisplayForPoint(point: Ptr[SDL_Point]): SDL_DisplayID = extern

  /** Get the display primarily containing a rect.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetDisplayForRect(rect: Ptr[SDL_Rect]): SDL_DisplayID = extern

  /** Get the display associated with a window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetDisplayForWindow(window: Ptr[SDL_Window]): SDL_DisplayID = extern

  /** Get the name of a display in UTF-8 encoding.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetDisplayName(displayID: SDL_DisplayID): CString = extern

  /** Get the properties associated with a display.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetDisplayProperties(displayID: SDL_DisplayID): SDL_PropertiesID =
    extern

  /** Get the usable desktop area represented by a display, in screen
    * coordinates.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetDisplayUsableBounds(
      displayID: SDL_DisplayID,
      rect: Ptr[SDL_Rect]
  ): Boolean = extern

  /** Get a list of currently connected displays.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetDisplays(count: Ptr[CInt]): Ptr[SDL_DisplayID] = extern

  /** Get the process environment.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_GetEnvironment(): Ptr[SDL_Environment] = extern

  /** Get the value of a variable in the environment.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_GetEnvironmentVariable(
      env: Ptr[SDL_Environment],
      name: CString
  ): CString = extern

  /** Get all variables in the environment.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_GetEnvironmentVariables(env: Ptr[SDL_Environment]): Ptr[CString] =
    extern

  /** Retrieve a message about the last error that occurred on the current
    * thread.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_error.h
    */
  def SDL_GetError(): CString = extern

  /** Query the current event filter.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  def SDL_GetEventFilter(
      filter: Ptr[SDL_EventFilter],
      userdata: Ptr[Ptr[Byte]]
  ): Boolean = extern

  /** Get a floating point property from a group of properties.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_properties.h
    */
  def SDL_GetFloatProperty(
      props: SDL_PropertiesID,
      name: CString,
      default_value: Float
  ): Float = extern

  /** Get a list of fullscreen display modes available on a display.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetFullscreenDisplayModes(
      displayID: SDL_DisplayID,
      count: Ptr[CInt]
  ): Ptr[Ptr[SDL_DisplayMode]] = extern

  /** Returns the name of the backend used to create this GPU context.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_GetGPUDeviceDriver(device: Ptr[SDL_GPUDevice]): CString = extern

  /** Get the name of a built in GPU driver.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_GetGPUDriver(index: CInt): CString = extern

  /** Returns the supported shader formats for this GPU context.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_GetGPUShaderFormats(device: Ptr[SDL_GPUDevice]): SDL_GPUShaderFormat =
    extern

  /** Obtains the texture format of the swapchain for the given window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_GetGPUSwapchainTextureFormat(
      device: Ptr[SDL_GPUDevice],
      window: Ptr[SDL_Window]
  ): SDL_GPUTextureFormat = extern

  /** Return the sfSymbolsName for a given axis on a gamepad on Apple platforms.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadAppleSFSymbolsNameForAxis(
      gamepad: Ptr[SDL_Gamepad],
      axis: SDL_GamepadAxis
  ): CString = extern

  /** Return the sfSymbolsName for a given button on a gamepad on Apple
    * platforms.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadAppleSFSymbolsNameForButton(
      gamepad: Ptr[SDL_Gamepad],
      button: SDL_GamepadButton
  ): CString = extern

  /** Get the current state of an axis control on a gamepad.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadAxis(
      gamepad: Ptr[SDL_Gamepad],
      axis: SDL_GamepadAxis
  ): Sint16 = extern

  /** Convert a string into SDL_GamepadAxis enum.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadAxisFromString(str: CString): SDL_GamepadAxis = extern

  /** Get the SDL joystick layer bindings for a gamepad.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadBindings(
      gamepad: Ptr[SDL_Gamepad],
      count: Ptr[CInt]
  ): Ptr[Ptr[SDL_GamepadBinding]] = extern

  /** Get the current state of a button on a gamepad.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadButton(
      gamepad: Ptr[SDL_Gamepad],
      button: SDL_GamepadButton
  ): Boolean = extern

  /** Convert a string into an SDL_GamepadButton enum.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadButtonFromString(str: CString): SDL_GamepadButton = extern

  /** Get the label of a button on a gamepad.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadButtonLabel(
      gamepad: Ptr[SDL_Gamepad],
      button: SDL_GamepadButton
  ): SDL_GamepadButtonLabel = extern

  /** Get the label of a button on a gamepad.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadButtonLabelForType(
      `type`: SDL_GamepadType,
      button: SDL_GamepadButton
  ): SDL_GamepadButtonLabel = extern

  /** Get the connection state of a gamepad.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadConnectionState(
      gamepad: Ptr[SDL_Gamepad]
  ): SDL_JoystickConnectionState = extern

  /** Get the firmware version of an opened gamepad, if available.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadFirmwareVersion(gamepad: Ptr[SDL_Gamepad]): Uint16 = extern

  /** Get the SDL_Gamepad associated with a joystick instance ID, if it has been
    * opened.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadFromID(instance_id: SDL_JoystickID): Ptr[SDL_Gamepad] =
    extern

  /** Get the SDL_Gamepad associated with a player index.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadFromPlayerIndex(player_index: CInt): Ptr[SDL_Gamepad] =
    extern

  /** Get the instance ID of an opened gamepad.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadID(gamepad: Ptr[SDL_Gamepad]): SDL_JoystickID = extern

  /** Get the underlying joystick from a gamepad.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadJoystick(gamepad: Ptr[SDL_Gamepad]): Ptr[SDL_Joystick] =
    extern

  /** Get the current mapping of a gamepad.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadMapping(gamepad: Ptr[SDL_Gamepad]): CString = extern

  /** Get the mapping of a gamepad.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadMappingForID(instance_id: SDL_JoystickID): CString = extern

  /** Get the current gamepad mappings.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadMappings(count: Ptr[CInt]): Ptr[CString] = extern

  /** Get the implementation-dependent name for an opened gamepad.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadName(gamepad: Ptr[SDL_Gamepad]): CString = extern

  /** Get the implementation dependent name of a gamepad.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadNameForID(instance_id: SDL_JoystickID): CString = extern

  /** Get the implementation-dependent path for an opened gamepad.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadPath(gamepad: Ptr[SDL_Gamepad]): CString = extern

  /** Get the implementation dependent path of a gamepad.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadPathForID(instance_id: SDL_JoystickID): CString = extern

  /** Get the player index of an opened gamepad.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadPlayerIndex(gamepad: Ptr[SDL_Gamepad]): CInt = extern

  /** Get the player index of a gamepad.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadPlayerIndexForID(instance_id: SDL_JoystickID): CInt = extern

  /** Get the battery state of a gamepad.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadPowerInfo(
      gamepad: Ptr[SDL_Gamepad],
      percent: Ptr[CInt]
  ): SDL_PowerState = extern

  /** Get the USB product ID of an opened gamepad, if available.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadProduct(gamepad: Ptr[SDL_Gamepad]): Uint16 = extern

  /** Get the USB product ID of a gamepad, if available.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadProductForID(instance_id: SDL_JoystickID): Uint16 = extern

  /** Get the product version of an opened gamepad, if available.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadProductVersion(gamepad: Ptr[SDL_Gamepad]): Uint16 = extern

  /** Get the product version of a gamepad, if available.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadProductVersionForID(instance_id: SDL_JoystickID): Uint16 =
    extern

  /** Get the properties associated with an opened gamepad.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadProperties(gamepad: Ptr[SDL_Gamepad]): SDL_PropertiesID =
    extern

  /** Get the current state of a gamepad sensor.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadSensorData(
      gamepad: Ptr[SDL_Gamepad],
      `type`: SDL_SensorType,
      data: Ptr[Float],
      num_values: CInt
  ): Boolean = extern

  /** Get the data rate (number of events per second) of a gamepad sensor.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadSensorDataRate(
      gamepad: Ptr[SDL_Gamepad],
      `type`: SDL_SensorType
  ): Float = extern

  /** Get the serial number of an opened gamepad, if available.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadSerial(gamepad: Ptr[SDL_Gamepad]): CString = extern

  /** Get the Steam Input handle of an opened gamepad, if available.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadSteamHandle(gamepad: Ptr[SDL_Gamepad]): Uint64 = extern

  /** Convert from an SDL_GamepadAxis enum to a string.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadStringForAxis(axis: SDL_GamepadAxis): CString = extern

  /** Convert from an SDL_GamepadButton enum to a string.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadStringForButton(button: SDL_GamepadButton): CString = extern

  /** Convert from an SDL_GamepadType enum to a string.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadStringForType(`type`: SDL_GamepadType): CString = extern

  /** Get the current state of a finger on a touchpad on a gamepad.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadTouchpadFinger(
      gamepad: Ptr[SDL_Gamepad],
      touchpad: CInt,
      finger: CInt,
      down: Ptr[Boolean],
      x: Ptr[Float],
      y: Ptr[Float],
      pressure: Ptr[Float]
  ): Boolean = extern

  /** Get the type of an opened gamepad.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadType(gamepad: Ptr[SDL_Gamepad]): SDL_GamepadType = extern

  /** Get the type of a gamepad.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadTypeForID(instance_id: SDL_JoystickID): SDL_GamepadType =
    extern

  /** Convert a string into SDL_GamepadType enum.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadTypeFromString(str: CString): SDL_GamepadType = extern

  /** Get the USB vendor ID of an opened gamepad, if available.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadVendor(gamepad: Ptr[SDL_Gamepad]): Uint16 = extern

  /** Get the USB vendor ID of a gamepad, if available.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadVendorForID(instance_id: SDL_JoystickID): Uint16 = extern

  /** Get a list of currently connected gamepads.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepads(count: Ptr[CInt]): Ptr[SDL_JoystickID] = extern

  /** Get the current state of the mouse in relation to the desktop.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mouse.h
    */
  def SDL_GetGlobalMouseState(
      x: Ptr[Float],
      y: Ptr[Float]
  ): SDL_MouseButtonFlags = extern

  /** Get the global SDL properties.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_properties.h
    */
  def SDL_GetGlobalProperties(): SDL_PropertiesID = extern

  /** Get the window that currently has an input grab enabled.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetGrabbedWindow(): Ptr[SDL_Window] = extern

  /** Get the status of the current effect on the specified haptic device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  def SDL_GetHapticEffectStatus(
      haptic: Ptr[SDL_Haptic],
      effect: CInt
  ): Boolean = extern

  /** Get the haptic device's supported features in bitwise manner.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  def SDL_GetHapticFeatures(haptic: Ptr[SDL_Haptic]): Uint32 = extern

  /** Get the SDL_Haptic associated with an instance ID, if it has been opened.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  def SDL_GetHapticFromID(instance_id: SDL_HapticID): Ptr[SDL_Haptic] = extern

  /** Get the instance ID of an opened haptic device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  def SDL_GetHapticID(haptic: Ptr[SDL_Haptic]): SDL_HapticID = extern

  /** Get the implementation dependent name of a haptic device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  def SDL_GetHapticName(haptic: Ptr[SDL_Haptic]): CString = extern

  /** Get the implementation dependent name of a haptic device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  def SDL_GetHapticNameForID(instance_id: SDL_HapticID): CString = extern

  /** Get a list of currently connected haptic devices.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  def SDL_GetHaptics(count: Ptr[CInt]): Ptr[SDL_HapticID] = extern

  /** Get the value of a hint.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_hints.h
    */
  def SDL_GetHint(name: CString): CString = extern

  /** Get the boolean value of a hint variable.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_hints.h
    */
  def SDL_GetHintBoolean(name: CString, default_value: Boolean): Boolean =
    extern

  /** Get the properties associated with an SDL_IOStream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_GetIOProperties(context: Ptr[SDL_IOStream]): SDL_PropertiesID = extern

  /** Use this function to get the size of the data stream in an SDL_IOStream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_GetIOSize(context: Ptr[SDL_IOStream]): Sint64 = extern

  /** Query the stream status of an SDL_IOStream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_GetIOStatus(context: Ptr[SDL_IOStream]): SDL_IOStatus = extern

  /** Get the current state of an axis control on a joystick.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_GetJoystickAxis(joystick: Ptr[SDL_Joystick], axis: CInt): Sint16 =
    extern

  /** Get the initial state of an axis control on a joystick.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_GetJoystickAxisInitialState(
      joystick: Ptr[SDL_Joystick],
      axis: CInt,
      state: Ptr[Sint16]
  ): Boolean = extern

  /** Get the ball axis change since the last poll.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_GetJoystickBall(
      joystick: Ptr[SDL_Joystick],
      ball: CInt,
      dx: Ptr[CInt],
      dy: Ptr[CInt]
  ): Boolean = extern

  /** Get the current state of a button on a joystick.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_GetJoystickButton(
      joystick: Ptr[SDL_Joystick],
      button: CInt
  ): Boolean = extern

  /** Get the connection state of a joystick.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_GetJoystickConnectionState(
      joystick: Ptr[SDL_Joystick]
  ): SDL_JoystickConnectionState = extern

  /** Get the firmware version of an opened joystick, if available.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_GetJoystickFirmwareVersion(joystick: Ptr[SDL_Joystick]): Uint16 =
    extern

  /** Get the SDL_Joystick associated with an instance ID, if it has been
    * opened.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_GetJoystickFromID(instance_id: SDL_JoystickID): Ptr[SDL_Joystick] =
    extern

  /** Get the SDL_Joystick associated with a player index.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_GetJoystickFromPlayerIndex(player_index: CInt): Ptr[SDL_Joystick] =
    extern

  /** Get the current state of a POV hat on a joystick.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_GetJoystickHat(joystick: Ptr[SDL_Joystick], hat: CInt): Uint8 = extern

  /** Get the instance ID of an opened joystick.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_GetJoystickID(joystick: Ptr[SDL_Joystick]): SDL_JoystickID = extern

  /** Get the implementation dependent name of a joystick.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_GetJoystickName(joystick: Ptr[SDL_Joystick]): CString = extern

  /** Get the implementation dependent name of a joystick.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_GetJoystickNameForID(instance_id: SDL_JoystickID): CString = extern

  /** Get the implementation dependent path of a joystick.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_GetJoystickPath(joystick: Ptr[SDL_Joystick]): CString = extern

  /** Get the implementation dependent path of a joystick.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_GetJoystickPathForID(instance_id: SDL_JoystickID): CString = extern

  /** Get the player index of an opened joystick.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_GetJoystickPlayerIndex(joystick: Ptr[SDL_Joystick]): CInt = extern

  /** Get the player index of a joystick.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_GetJoystickPlayerIndexForID(instance_id: SDL_JoystickID): CInt =
    extern

  /** Get the battery state of a joystick.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_GetJoystickPowerInfo(
      joystick: Ptr[SDL_Joystick],
      percent: Ptr[CInt]
  ): SDL_PowerState = extern

  /** Get the USB product ID of an opened joystick, if available.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_GetJoystickProduct(joystick: Ptr[SDL_Joystick]): Uint16 = extern

  /** Get the USB product ID of a joystick, if available.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_GetJoystickProductForID(instance_id: SDL_JoystickID): Uint16 = extern

  /** Get the product version of an opened joystick, if available.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_GetJoystickProductVersion(joystick: Ptr[SDL_Joystick]): Uint16 =
    extern

  /** Get the product version of a joystick, if available.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_GetJoystickProductVersionForID(instance_id: SDL_JoystickID): Uint16 =
    extern

  /** Get the properties associated with a joystick.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_GetJoystickProperties(joystick: Ptr[SDL_Joystick]): SDL_PropertiesID =
    extern

  /** Get the serial number of an opened joystick, if available.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_GetJoystickSerial(joystick: Ptr[SDL_Joystick]): CString = extern

  /** Get the type of an opened joystick.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_GetJoystickType(joystick: Ptr[SDL_Joystick]): SDL_JoystickType =
    extern

  /** Get the type of a joystick, if available.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_GetJoystickTypeForID(instance_id: SDL_JoystickID): SDL_JoystickType =
    extern

  /** Get the USB vendor ID of an opened joystick, if available.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_GetJoystickVendor(joystick: Ptr[SDL_Joystick]): Uint16 = extern

  /** Get the USB vendor ID of a joystick, if available.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_GetJoystickVendorForID(instance_id: SDL_JoystickID): Uint16 = extern

  /** Get a list of currently connected joysticks.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_GetJoysticks(count: Ptr[CInt]): Ptr[SDL_JoystickID] = extern

  /** Get a key code from a human-readable name.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_keyboard.h
    */
  def SDL_GetKeyFromName(name: CString): SDL_Keycode = extern

  /** Get the key code corresponding to the given scancode according to the
    * current keyboard layout.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_keyboard.h
    */
  def SDL_GetKeyFromScancode(
      scancode: SDL_Scancode,
      modstate: SDL_Keymod,
      key_event: Boolean
  ): SDL_Keycode = extern

  /** Get a human-readable name for a key.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_keyboard.h
    */
  def SDL_GetKeyName(key: SDL_Keycode): CString = extern

  /** Query the window which currently has keyboard focus.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_keyboard.h
    */
  def SDL_GetKeyboardFocus(): Ptr[SDL_Window] = extern

  /** Get the name of a keyboard.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_keyboard.h
    */
  def SDL_GetKeyboardNameForID(instance_id: SDL_KeyboardID): CString = extern

  /** Get a snapshot of the current state of the keyboard.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_keyboard.h
    */
  def SDL_GetKeyboardState(numkeys: Ptr[CInt]): Ptr[Boolean] = extern

  /** Get a list of currently connected keyboards.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_keyboard.h
    */
  def SDL_GetKeyboards(count: Ptr[CInt]): Ptr[SDL_KeyboardID] = extern

  /** Get the current log output function.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_log.h
    */
  def SDL_GetLogOutputFunction(
      callback: Ptr[SDL_LogOutputFunction],
      userdata: Ptr[Ptr[Byte]]
  ): Unit = extern

  /** Get the priority of a particular log category.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_log.h
    */
  def SDL_GetLogPriority(category: CInt): SDL_LogPriority = extern

  /** Convert one of the enumerated pixel formats to a bpp value and RGBA masks.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_pixels.h
    */
  def SDL_GetMasksForPixelFormat(
      format: SDL_PixelFormat,
      bpp: Ptr[CInt],
      Rmask: Ptr[Uint32],
      Gmask: Ptr[Uint32],
      Bmask: Ptr[Uint32],
      Amask: Ptr[Uint32]
  ): Boolean = extern

  /** Get the number of effects a haptic device can store.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  def SDL_GetMaxHapticEffects(haptic: Ptr[SDL_Haptic]): CInt = extern

  /** Get the number of effects a haptic device can play at the same time.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  def SDL_GetMaxHapticEffectsPlaying(haptic: Ptr[SDL_Haptic]): CInt = extern

  /** Get the current set of SDL memory functions.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_GetMemoryFunctions(
      malloc_func: Ptr[SDL_malloc_func],
      calloc_func: Ptr[SDL_calloc_func],
      realloc_func: Ptr[SDL_realloc_func],
      free_func: Ptr[SDL_free_func]
  ): Unit = extern

  /** Get a list of currently connected mice.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mouse.h
    */
  def SDL_GetMice(count: Ptr[CInt]): Ptr[SDL_MouseID] = extern

  /** Get the current key modifier state for the keyboard.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_keyboard.h
    */
  def SDL_GetModState(): SDL_Keymod = extern

  /** Get the window which currently has mouse focus.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mouse.h
    */
  def SDL_GetMouseFocus(): Ptr[SDL_Window] = extern

  /** Get the name of a mouse.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mouse.h
    */
  def SDL_GetMouseNameForID(instance_id: SDL_MouseID): CString = extern

  /** Retrieve the current state of the mouse.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mouse.h
    */
  def SDL_GetMouseState(x: Ptr[Float], y: Ptr[Float]): SDL_MouseButtonFlags =
    extern

  /** Get the orientation of a display when it is unrotated.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetNaturalDisplayOrientation(
      displayID: SDL_DisplayID
  ): SDL_DisplayOrientation = extern

  /** Get the number of outstanding (unfreed) allocations.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_GetNumAllocations(): CInt = extern

  /** Use this function to get the number of built-in audio drivers.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_GetNumAudioDrivers(): CInt = extern

  /** Use this function to get the number of built-in camera drivers.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_camera.h
    */
  def SDL_GetNumCameraDrivers(): CInt = extern

  /** Get the number of GPU drivers compiled into SDL.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_GetNumGPUDrivers(): CInt = extern

  /** Get the number of supported simultaneous fingers on a touchpad on a game
    * gamepad.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetNumGamepadTouchpadFingers(
      gamepad: Ptr[SDL_Gamepad],
      touchpad: CInt
  ): CInt = extern

  /** Get the number of touchpads on a gamepad.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetNumGamepadTouchpads(gamepad: Ptr[SDL_Gamepad]): CInt = extern

  /** Get the number of haptic axes the device has.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  def SDL_GetNumHapticAxes(haptic: Ptr[SDL_Haptic]): CInt = extern

  /** Get the number of general axis controls on a joystick.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_GetNumJoystickAxes(joystick: Ptr[SDL_Joystick]): CInt = extern

  /** Get the number of trackballs on a joystick.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_GetNumJoystickBalls(joystick: Ptr[SDL_Joystick]): CInt = extern

  /** Get the number of buttons on a joystick.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_GetNumJoystickButtons(joystick: Ptr[SDL_Joystick]): CInt = extern

  /** Get the number of POV hats on a joystick.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_GetNumJoystickHats(joystick: Ptr[SDL_Joystick]): CInt = extern

  /** Get the number of logical CPU cores available.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_cpuinfo.h
    */
  def SDL_GetNumLogicalCPUCores(): CInt = extern

  /** Get the number of 2D rendering drivers available for the current display.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_GetNumRenderDrivers(): CInt = extern

  /** Get the number of video drivers compiled into SDL.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetNumVideoDrivers(): CInt = extern

  /** Get a number property from a group of properties.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_properties.h
    */
  def SDL_GetNumberProperty(
      props: SDL_PropertiesID,
      name: CString,
      default_value: Sint64
  ): Sint64 = extern

  /** Get the original set of SDL memory functions.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_GetOriginalMemoryFunctions(
      malloc_func: Ptr[SDL_malloc_func],
      calloc_func: Ptr[SDL_calloc_func],
      realloc_func: Ptr[SDL_realloc_func],
      free_func: Ptr[SDL_free_func]
  ): Unit = extern

  /** Get information about a filesystem path.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_filesystem.h
    */
  def SDL_GetPathInfo(path: CString, info: Ptr[SDL_PathInfo]): Boolean = extern

  /** Get the current value of the high resolution counter.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_timer.h
    */
  def SDL_GetPerformanceCounter(): Uint64 = extern

  /** Get the count per second of the high resolution counter.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_timer.h
    */
  def SDL_GetPerformanceFrequency(): Uint64 = extern

  /** Create an SDL_PixelFormatDetails structure corresponding to a pixel
    * format.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_pixels.h
    */
  def SDL_GetPixelFormatDetails(
      format: SDL_PixelFormat
  ): Ptr[SDL_PixelFormatDetails] = extern

  /** Convert a bpp value and RGBA masks to an enumerated pixel format.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_pixels.h
    */
  def SDL_GetPixelFormatForMasks(
      bpp: CInt,
      Rmask: Uint32,
      Gmask: Uint32,
      Bmask: Uint32,
      Amask: Uint32
  ): SDL_PixelFormat = extern

  /** Get the human readable name of a pixel format.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_pixels.h
    */
  def SDL_GetPixelFormatName(format: SDL_PixelFormat): CString = extern

  /** Get the name of the platform.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_platform.h
    */
  def SDL_GetPlatform(): CString = extern

  /** Get a pointer property from a group of properties.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_properties.h
    */
  def SDL_GetPointerProperty(
      props: SDL_PropertiesID,
      name: CString,
      default_value: Ptr[Byte]
  ): Ptr[Byte] = extern

  /** Get the current power supply details.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_power.h
    */
  def SDL_GetPowerInfo(seconds: Ptr[CInt], percent: Ptr[CInt]): SDL_PowerState =
    extern

  /** Get the user-and-app-specific path where files can be written.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_filesystem.h
    */
  def SDL_GetPrefPath(org: CString, app: CString): CString = extern

  /** Report the user's preferred locale.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_locale.h
    */
  def SDL_GetPreferredLocales(count: Ptr[CInt]): Ptr[Ptr[SDL_Locale]] = extern

  /** Return the primary display.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetPrimaryDisplay(): SDL_DisplayID = extern

  /** Get UTF-8 text from the primary selection.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_clipboard.h
    */
  def SDL_GetPrimarySelectionText(): CString = extern

  /** Get the SDL_IOStream associated with process standard input.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_process.h
    */
  def SDL_GetProcessInput(process: Ptr[SDL_Process]): Ptr[SDL_IOStream] = extern

  /** Get the SDL_IOStream associated with process standard output.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_process.h
    */
  def SDL_GetProcessOutput(process: Ptr[SDL_Process]): Ptr[SDL_IOStream] =
    extern

  /** Get the properties associated with a process.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_process.h
    */
  def SDL_GetProcessProperties(process: Ptr[SDL_Process]): SDL_PropertiesID =
    extern

  /** Get the type of a property in a group of properties.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_properties.h
    */
  def SDL_GetPropertyType(
      props: SDL_PropertiesID,
      name: CString
  ): SDL_PropertyType = extern

  /** Get RGB values from a pixel in the specified format.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_pixels.h
    */
  def SDL_GetRGB(
      pixel: Uint32,
      format: Ptr[SDL_PixelFormatDetails],
      palette: Ptr[SDL_Palette],
      r: Ptr[Uint8],
      g: Ptr[Uint8],
      b: Ptr[Uint8]
  ): Unit = extern

  /** Get RGBA values from a pixel in the specified format.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_pixels.h
    */
  def SDL_GetRGBA(
      pixel: Uint32,
      format: Ptr[SDL_PixelFormatDetails],
      palette: Ptr[SDL_Palette],
      r: Ptr[Uint8],
      g: Ptr[Uint8],
      b: Ptr[Uint8],
      a: Ptr[Uint8]
  ): Unit = extern

  /** Get the type of an opened gamepad, ignoring any mapping override.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetRealGamepadType(gamepad: Ptr[SDL_Gamepad]): SDL_GamepadType =
    extern

  /** Get the type of a gamepad, ignoring any mapping override.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetRealGamepadTypeForID(
      instance_id: SDL_JoystickID
  ): SDL_GamepadType = extern

  /** Calculate the intersection of a rectangle and line segment.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_rect.h
    */
  def SDL_GetRectAndLineIntersection(
      rect: Ptr[SDL_Rect],
      X1: Ptr[CInt],
      Y1: Ptr[CInt],
      X2: Ptr[CInt],
      Y2: Ptr[CInt]
  ): Boolean = extern

  /** Calculate the intersection of a rectangle and line segment with float
    * precision.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_rect.h
    */
  def SDL_GetRectAndLineIntersectionFloat(
      rect: Ptr[SDL_FRect],
      X1: Ptr[Float],
      Y1: Ptr[Float],
      X2: Ptr[Float],
      Y2: Ptr[Float]
  ): Boolean = extern

  /** Calculate a minimal rectangle enclosing a set of points.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_rect.h
    */
  def SDL_GetRectEnclosingPoints(
      points: Ptr[SDL_Point],
      count: CInt,
      clip: Ptr[SDL_Rect],
      result: Ptr[SDL_Rect]
  ): Boolean = extern

  /** Calculate a minimal rectangle enclosing a set of points with float
    * precision.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_rect.h
    */
  def SDL_GetRectEnclosingPointsFloat(
      points: Ptr[SDL_FPoint],
      count: CInt,
      clip: Ptr[SDL_FRect],
      result: Ptr[SDL_FRect]
  ): Boolean = extern

  /** Calculate the intersection of two rectangles.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_rect.h
    */
  def SDL_GetRectIntersection(
      A: Ptr[SDL_Rect],
      B: Ptr[SDL_Rect],
      result: Ptr[SDL_Rect]
  ): Boolean = extern

  /** Calculate the intersection of two rectangles with float precision.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_rect.h
    */
  def SDL_GetRectIntersectionFloat(
      A: Ptr[SDL_FRect],
      B: Ptr[SDL_FRect],
      result: Ptr[SDL_FRect]
  ): Boolean = extern

  /** Calculate the union of two rectangles.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_rect.h
    */
  def SDL_GetRectUnion(
      A: Ptr[SDL_Rect],
      B: Ptr[SDL_Rect],
      result: Ptr[SDL_Rect]
  ): Boolean = extern

  /** Calculate the union of two rectangles with float precision.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_rect.h
    */
  def SDL_GetRectUnionFloat(
      A: Ptr[SDL_FRect],
      B: Ptr[SDL_FRect],
      result: Ptr[SDL_FRect]
  ): Boolean = extern

  /** Retrieve the relative state of the mouse.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mouse.h
    */
  def SDL_GetRelativeMouseState(
      x: Ptr[Float],
      y: Ptr[Float]
  ): SDL_MouseButtonFlags = extern

  /** Get the clip rectangle for the current target.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_GetRenderClipRect(
      renderer: Ptr[SDL_Renderer],
      rect: Ptr[SDL_Rect]
  ): Boolean = extern

  /** Get the color scale used for render operations.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_GetRenderColorScale(
      renderer: Ptr[SDL_Renderer],
      scale: Ptr[Float]
  ): Boolean = extern

  /** Get the blend mode used for drawing operations.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_GetRenderDrawBlendMode(
      renderer: Ptr[SDL_Renderer],
      blendMode: Ptr[SDL_BlendMode]
  ): Boolean = extern

  /** Get the color used for drawing operations (Rect, Line and Clear).
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_GetRenderDrawColor(
      renderer: Ptr[SDL_Renderer],
      r: Ptr[Uint8],
      g: Ptr[Uint8],
      b: Ptr[Uint8],
      a: Ptr[Uint8]
  ): Boolean = extern

  /** Get the color used for drawing operations (Rect, Line and Clear).
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_GetRenderDrawColorFloat(
      renderer: Ptr[SDL_Renderer],
      r: Ptr[Float],
      g: Ptr[Float],
      b: Ptr[Float],
      a: Ptr[Float]
  ): Boolean = extern

  /** Use this function to get the name of a built in 2D rendering driver.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_GetRenderDriver(index: CInt): CString = extern

  /** Get device independent resolution and presentation mode for rendering.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_GetRenderLogicalPresentation(
      renderer: Ptr[SDL_Renderer],
      w: Ptr[CInt],
      h: Ptr[CInt],
      mode: Ptr[SDL_RendererLogicalPresentation]
  ): Boolean = extern

  /** Get the final presentation rectangle for rendering.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_GetRenderLogicalPresentationRect(
      renderer: Ptr[SDL_Renderer],
      rect: Ptr[SDL_FRect]
  ): Boolean = extern

  /** Get the Metal command encoder for the current frame.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_GetRenderMetalCommandEncoder(renderer: Ptr[SDL_Renderer]): Ptr[Byte] =
    extern

  /** Get the CAMetalLayer associated with the given Metal renderer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_GetRenderMetalLayer(renderer: Ptr[SDL_Renderer]): Ptr[Byte] = extern

  /** Get the output size in pixels of a rendering context.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_GetRenderOutputSize(
      renderer: Ptr[SDL_Renderer],
      w: Ptr[CInt],
      h: Ptr[CInt]
  ): Boolean = extern

  /** Get the safe area for rendering within the current viewport.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_GetRenderSafeArea(
      renderer: Ptr[SDL_Renderer],
      rect: Ptr[SDL_Rect]
  ): Boolean = extern

  /** Get the drawing scale for the current target.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_GetRenderScale(
      renderer: Ptr[SDL_Renderer],
      scaleX: Ptr[Float],
      scaleY: Ptr[Float]
  ): Boolean = extern

  /** Get the current render target.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_GetRenderTarget(renderer: Ptr[SDL_Renderer]): Ptr[SDL_Texture] =
    extern

  /** Get VSync of the given renderer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_GetRenderVSync(
      renderer: Ptr[SDL_Renderer],
      vsync: Ptr[CInt]
  ): Boolean = extern

  /** Get the drawing area for the current target.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_GetRenderViewport(
      renderer: Ptr[SDL_Renderer],
      rect: Ptr[SDL_Rect]
  ): Boolean = extern

  /** Get the window associated with a renderer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_GetRenderWindow(renderer: Ptr[SDL_Renderer]): Ptr[SDL_Window] = extern

  /** Get the renderer associated with a window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_GetRenderer(window: Ptr[SDL_Window]): Ptr[SDL_Renderer] = extern

  /** Get the renderer that created an SDL_Texture.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_GetRendererFromTexture(texture: Ptr[SDL_Texture]): Ptr[SDL_Renderer] =
    extern

  /** Get the name of a renderer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_GetRendererName(renderer: Ptr[SDL_Renderer]): CString = extern

  /** Get the properties associated with a renderer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_GetRendererProperties(renderer: Ptr[SDL_Renderer]): SDL_PropertiesID =
    extern

  /** Get the code revision of SDL that is linked against your program.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_version.h
    */
  def SDL_GetRevision(): CString = extern

  /** Report the alignment this system needs for SIMD allocations.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_cpuinfo.h
    */
  def SDL_GetSIMDAlignment(): size_t = extern

  /** Get the application sandbox environment, if any.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_system.h
    */
  def SDL_GetSandbox(): SDL_Sandbox = extern

  /** Get the scancode corresponding to the given key code according to the
    * current keyboard layout.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_keyboard.h
    */
  def SDL_GetScancodeFromKey(
      key: SDL_Keycode,
      modstate: Ptr[SDL_Keymod]
  ): SDL_Scancode = extern

  /** Get a scancode from a human-readable name.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_keyboard.h
    */
  def SDL_GetScancodeFromName(name: CString): SDL_Scancode = extern

  /** Get a human-readable name for a scancode.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_keyboard.h
    */
  def SDL_GetScancodeName(scancode: SDL_Scancode): CString = extern

  /** Get the current value of a semaphore.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mutex.h
    */
  def SDL_GetSemaphoreValue(sem: Ptr[SDL_Semaphore]): Uint32 = extern

  /** Get the current state of an opened sensor.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_sensor.h
    */
  def SDL_GetSensorData(
      sensor: Ptr[SDL_Sensor],
      data: Ptr[Float],
      num_values: CInt
  ): Boolean = extern

  /** Return the SDL_Sensor associated with an instance ID.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_sensor.h
    */
  def SDL_GetSensorFromID(instance_id: SDL_SensorID): Ptr[SDL_Sensor] = extern

  /** Get the instance ID of a sensor.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_sensor.h
    */
  def SDL_GetSensorID(sensor: Ptr[SDL_Sensor]): SDL_SensorID = extern

  /** Get the implementation dependent name of a sensor.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_sensor.h
    */
  def SDL_GetSensorName(sensor: Ptr[SDL_Sensor]): CString = extern

  /** Get the implementation dependent name of a sensor.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_sensor.h
    */
  def SDL_GetSensorNameForID(instance_id: SDL_SensorID): CString = extern

  /** Get the platform dependent type of a sensor.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_sensor.h
    */
  def SDL_GetSensorNonPortableType(sensor: Ptr[SDL_Sensor]): CInt = extern

  /** Get the platform dependent type of a sensor.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_sensor.h
    */
  def SDL_GetSensorNonPortableTypeForID(instance_id: SDL_SensorID): CInt =
    extern

  /** Get the properties associated with a sensor.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_sensor.h
    */
  def SDL_GetSensorProperties(sensor: Ptr[SDL_Sensor]): SDL_PropertiesID =
    extern

  /** Get the type of a sensor.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_sensor.h
    */
  def SDL_GetSensorType(sensor: Ptr[SDL_Sensor]): SDL_SensorType = extern

  /** Get the type of a sensor.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_sensor.h
    */
  def SDL_GetSensorTypeForID(instance_id: SDL_SensorID): SDL_SensorType = extern

  /** Get a list of currently connected sensors.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_sensor.h
    */
  def SDL_GetSensors(count: Ptr[CInt]): Ptr[SDL_SensorID] = extern

  /** Get the appropriate memset value for silencing an audio format.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_GetSilenceValueForFormat(format: SDL_AudioFormat): CInt = extern

  /** Query the size of a file within a storage container.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_storage.h
    */
  def SDL_GetStorageFileSize(
      storage: Ptr[SDL_Storage],
      path: CString,
      length: Ptr[Uint64]
  ): Boolean = extern

  /** Get information about a filesystem path in a storage container.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_storage.h
    */
  def SDL_GetStoragePathInfo(
      storage: Ptr[SDL_Storage],
      path: CString,
      info: Ptr[SDL_PathInfo]
  ): Boolean = extern

  /** Queries the remaining space in a storage container.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_storage.h
    */
  def SDL_GetStorageSpaceRemaining(storage: Ptr[SDL_Storage]): Uint64 = extern

  /** Get a string property from a group of properties.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_properties.h
    */
  def SDL_GetStringProperty(
      props: SDL_PropertiesID,
      name: CString,
      default_value: CString
  ): CString = extern

  /** Get the additional alpha value used in blit operations.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_GetSurfaceAlphaMod(
      surface: Ptr[SDL_Surface],
      alpha: Ptr[Uint8]
  ): Boolean = extern

  /** Get the blend mode used for blit operations.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_GetSurfaceBlendMode(
      surface: Ptr[SDL_Surface],
      blendMode: Ptr[SDL_BlendMode]
  ): Boolean = extern

  /** Get the clipping rectangle for a surface.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_GetSurfaceClipRect(
      surface: Ptr[SDL_Surface],
      rect: Ptr[SDL_Rect]
  ): Boolean = extern

  /** Get the color key (transparent pixel) for a surface.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_GetSurfaceColorKey(
      surface: Ptr[SDL_Surface],
      key: Ptr[Uint32]
  ): Boolean = extern

  /** Get the additional color value multiplied into blit operations.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_GetSurfaceColorMod(
      surface: Ptr[SDL_Surface],
      r: Ptr[Uint8],
      g: Ptr[Uint8],
      b: Ptr[Uint8]
  ): Boolean = extern

  /** Get the colorspace used by a surface.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_GetSurfaceColorspace(surface: Ptr[SDL_Surface]): SDL_Colorspace =
    extern

  /** Get an array including all versions of a surface.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_GetSurfaceImages(
      surface: Ptr[SDL_Surface],
      count: Ptr[CInt]
  ): Ptr[Ptr[SDL_Surface]] = extern

  /** Get the palette used by a surface.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_GetSurfacePalette(surface: Ptr[SDL_Surface]): Ptr[SDL_Palette] =
    extern

  /** Get the properties associated with a surface.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_GetSurfaceProperties(surface: Ptr[SDL_Surface]): SDL_PropertiesID =
    extern

  /** Get the amount of RAM configured in the system.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_cpuinfo.h
    */
  def SDL_GetSystemRAM(): CInt = extern

  /** Get the current system theme.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetSystemTheme(): SDL_SystemTheme = extern

  /** Get the current thread's value associated with a thread local storage ID.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_thread.h
    */
  def SDL_GetTLS(id: Ptr[SDL_TLSID]): Ptr[Byte] = extern

  /** Get the area used to type Unicode text input.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_keyboard.h
    */
  def SDL_GetTextInputArea(
      window: Ptr[SDL_Window],
      rect: Ptr[SDL_Rect],
      cursor: Ptr[CInt]
  ): Boolean = extern

  /** Get the additional alpha value multiplied into render copy operations.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_GetTextureAlphaMod(
      texture: Ptr[SDL_Texture],
      alpha: Ptr[Uint8]
  ): Boolean = extern

  /** Get the additional alpha value multiplied into render copy operations.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_GetTextureAlphaModFloat(
      texture: Ptr[SDL_Texture],
      alpha: Ptr[Float]
  ): Boolean = extern

  /** Get the blend mode used for texture copy operations.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_GetTextureBlendMode(
      texture: Ptr[SDL_Texture],
      blendMode: Ptr[SDL_BlendMode]
  ): Boolean = extern

  /** Get the additional color value multiplied into render copy operations.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_GetTextureColorMod(
      texture: Ptr[SDL_Texture],
      r: Ptr[Uint8],
      g: Ptr[Uint8],
      b: Ptr[Uint8]
  ): Boolean = extern

  /** Get the additional color value multiplied into render copy operations.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_GetTextureColorModFloat(
      texture: Ptr[SDL_Texture],
      r: Ptr[Float],
      g: Ptr[Float],
      b: Ptr[Float]
  ): Boolean = extern

  /** Get the properties associated with a texture.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_GetTextureProperties(texture: Ptr[SDL_Texture]): SDL_PropertiesID =
    extern

  /** Get the scale mode used for texture scale operations.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_GetTextureScaleMode(
      texture: Ptr[SDL_Texture],
      scaleMode: Ptr[SDL_ScaleMode]
  ): Boolean = extern

  /** Get the size of a texture, as floating point values.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_GetTextureSize(
      texture: Ptr[SDL_Texture],
      w: Ptr[Float],
      h: Ptr[Float]
  ): Boolean = extern

  /** Get the thread identifier for the specified thread.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_thread.h
    */
  def SDL_GetThreadID(thread: Ptr[SDL_Thread]): SDL_ThreadID = extern

  /** Get the thread name as it was specified in SDL_CreateThread().
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_thread.h
    */
  def SDL_GetThreadName(thread: Ptr[SDL_Thread]): CString = extern

  /** Get the number of milliseconds since SDL library initialization.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_timer.h
    */
  def SDL_GetTicks(): Uint64 = extern

  /** Get the number of nanoseconds since SDL library initialization.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_timer.h
    */
  def SDL_GetTicksNS(): Uint64 = extern

  /** Get the touch device name as reported from the driver.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_touch.h
    */
  def SDL_GetTouchDeviceName(touchID: SDL_TouchID): CString = extern

  /** Get the type of the given touch device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_touch.h
    */
  def SDL_GetTouchDeviceType(touchID: SDL_TouchID): SDL_TouchDeviceType = extern

  /** Get a list of registered touch devices.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_touch.h
    */
  def SDL_GetTouchDevices(count: Ptr[CInt]): Ptr[SDL_TouchID] = extern

  /** Get a list of active fingers for a given touch device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_touch.h
    */
  def SDL_GetTouchFingers(
      touchID: SDL_TouchID,
      count: Ptr[CInt]
  ): Ptr[Ptr[SDL_Finger]] = extern

  /** Finds the most suitable user folder for a specific purpose.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_filesystem.h
    */
  def SDL_GetUserFolder(folder: SDL_Folder): CString = extern

  /** Get the version of SDL that is linked against your program.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_version.h
    */
  def SDL_GetVersion(): CInt = extern

  /** Get the name of a built in video driver.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetVideoDriver(index: CInt): CString = extern

  /** Get the size of a window's client area.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetWindowAspectRatio(
      window: Ptr[SDL_Window],
      min_aspect: Ptr[Float],
      max_aspect: Ptr[Float]
  ): Boolean = extern

  /** Get the size of a window's borders (decorations) around the client area.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetWindowBordersSize(
      window: Ptr[SDL_Window],
      top: Ptr[CInt],
      left: Ptr[CInt],
      bottom: Ptr[CInt],
      right: Ptr[CInt]
  ): Boolean = extern

  /** Get the content display scale relative to a window's pixel size.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetWindowDisplayScale(window: Ptr[SDL_Window]): Float = extern

  /** Get the window flags.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetWindowFlags(window: Ptr[SDL_Window]): SDL_WindowFlags = extern

  /** Get window associated with an event.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  def SDL_GetWindowFromEvent(event: Ptr[SDL_Event]): Ptr[SDL_Window] = extern

  /** Get a window from a stored ID.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetWindowFromID(id: SDL_WindowID): Ptr[SDL_Window] = extern

  /** Query the display mode to use when a window is visible at fullscreen.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetWindowFullscreenMode(
      window: Ptr[SDL_Window]
  ): Ptr[SDL_DisplayMode] = extern

  /** Get the raw ICC profile data for the screen the window is currently on.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetWindowICCProfile(
      window: Ptr[SDL_Window],
      size: Ptr[size_t]
  ): Ptr[Byte] = extern

  /** Get the numeric ID of a window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetWindowID(window: Ptr[SDL_Window]): SDL_WindowID = extern

  /** Get a window's keyboard grab mode.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetWindowKeyboardGrab(window: Ptr[SDL_Window]): Boolean = extern

  /** Get the maximum size of a window's client area.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetWindowMaximumSize(
      window: Ptr[SDL_Window],
      w: Ptr[CInt],
      h: Ptr[CInt]
  ): Boolean = extern

  /** Get the minimum size of a window's client area.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetWindowMinimumSize(
      window: Ptr[SDL_Window],
      w: Ptr[CInt],
      h: Ptr[CInt]
  ): Boolean = extern

  /** Get a window's mouse grab mode.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetWindowMouseGrab(window: Ptr[SDL_Window]): Boolean = extern

  /** Get the mouse confinement rectangle of a window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetWindowMouseRect(window: Ptr[SDL_Window]): Ptr[SDL_Rect] = extern

  /** Get the opacity of a window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetWindowOpacity(window: Ptr[SDL_Window]): Float = extern

  /** Get parent of a window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetWindowParent(window: Ptr[SDL_Window]): Ptr[SDL_Window] = extern

  /** Get the pixel density of a window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetWindowPixelDensity(window: Ptr[SDL_Window]): Float = extern

  /** Get the pixel format associated with the window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetWindowPixelFormat(window: Ptr[SDL_Window]): SDL_PixelFormat =
    extern

  /** Get the position of a window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetWindowPosition(
      window: Ptr[SDL_Window],
      x: Ptr[CInt],
      y: Ptr[CInt]
  ): Boolean = extern

  /** Get the properties associated with a window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetWindowProperties(window: Ptr[SDL_Window]): SDL_PropertiesID =
    extern

  /** Query whether relative mouse mode is enabled for a window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mouse.h
    */
  def SDL_GetWindowRelativeMouseMode(window: Ptr[SDL_Window]): Boolean = extern

  /** Get the safe area for this window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetWindowSafeArea(
      window: Ptr[SDL_Window],
      rect: Ptr[SDL_Rect]
  ): Boolean = extern

  /** Get the size of a window's client area.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetWindowSize(
      window: Ptr[SDL_Window],
      w: Ptr[CInt],
      h: Ptr[CInt]
  ): Boolean = extern

  /** Get the size of a window's client area, in pixels.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetWindowSizeInPixels(
      window: Ptr[SDL_Window],
      w: Ptr[CInt],
      h: Ptr[CInt]
  ): Boolean = extern

  /** Get the SDL surface associated with the window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetWindowSurface(window: Ptr[SDL_Window]): Ptr[SDL_Surface] = extern

  /** Get VSync for the window surface.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetWindowSurfaceVSync(
      window: Ptr[SDL_Window],
      vsync: Ptr[CInt]
  ): Boolean = extern

  /** Get the title of a window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetWindowTitle(window: Ptr[SDL_Window]): CString = extern

  /** Get a list of valid windows.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_GetWindows(count: Ptr[CInt]): Ptr[Ptr[SDL_Window]] = extern

  /** Enumerate a directory tree, filtered by pattern, and return a list.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_filesystem.h
    */
  def SDL_GlobDirectory(
      path: CString,
      pattern: CString,
      flags: SDL_GlobFlags,
      count: Ptr[CInt]
  ): Ptr[CString] = extern

  /** Enumerate a directory tree, filtered by pattern, and return a list.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_storage.h
    */
  def SDL_GlobStorageDirectory(
      storage: Ptr[SDL_Storage],
      path: CString,
      pattern: CString,
      flags: SDL_GlobFlags,
      count: Ptr[CInt]
  ): Ptr[CString] = extern

  /** Check to see if an effect is supported by a haptic device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  def SDL_HapticEffectSupported(
      haptic: Ptr[SDL_Haptic],
      effect: Ptr[SDL_HapticEffect]
  ): Boolean = extern

  /** Check whether rumble is supported on a haptic device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  def SDL_HapticRumbleSupported(haptic: Ptr[SDL_Haptic]): Boolean = extern

  /** Determine whether the CPU has ARM SIMD (ARMv6) features.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_cpuinfo.h
    */
  def SDL_HasARMSIMD(): Boolean = extern

  /** Determine whether the CPU has AVX features.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_cpuinfo.h
    */
  def SDL_HasAVX(): Boolean = extern

  /** Determine whether the CPU has AVX2 features.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_cpuinfo.h
    */
  def SDL_HasAVX2(): Boolean = extern

  /** Determine whether the CPU has AVX-512F (foundation) features.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_cpuinfo.h
    */
  def SDL_HasAVX512F(): Boolean = extern

  /** Determine whether the CPU has AltiVec features.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_cpuinfo.h
    */
  def SDL_HasAltiVec(): Boolean = extern

  /** Query whether there is data in the clipboard for the provided mime type.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_clipboard.h
    */
  def SDL_HasClipboardData(mime_type: CString): Boolean = extern

  /** Query whether the clipboard exists and contains a non-empty text string.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_clipboard.h
    */
  def SDL_HasClipboardText(): Boolean = extern

  /** Check for the existence of a certain event type in the event queue.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  def SDL_HasEvent(`type`: Uint32): Boolean = extern

  /** Check for the existence of certain event types in the event queue.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  def SDL_HasEvents(minType: Uint32, maxType: Uint32): Boolean = extern

  /** Determine if a unsigned 32-bit value has exactly one bit set.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_bits.h
    */
  def SDL_HasExactlyOneBitSet32(x: Uint32): Boolean = extern

  /** Return whether a gamepad is currently connected.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_HasGamepad(): Boolean = extern

  /** Return whether a joystick is currently connected.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_HasJoystick(): Boolean = extern

  /** Return whether a keyboard is currently connected.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_keyboard.h
    */
  def SDL_HasKeyboard(): Boolean = extern

  /** Determine whether the CPU has LASX (LOONGARCH SIMD) features.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_cpuinfo.h
    */
  def SDL_HasLASX(): Boolean = extern

  /** Determine whether the CPU has LSX (LOONGARCH SIMD) features.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_cpuinfo.h
    */
  def SDL_HasLSX(): Boolean = extern

  /** Determine whether the CPU has MMX features.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_cpuinfo.h
    */
  def SDL_HasMMX(): Boolean = extern

  /** Return whether a mouse is currently connected.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mouse.h
    */
  def SDL_HasMouse(): Boolean = extern

  /** Determine whether the CPU has NEON (ARM SIMD) features.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_cpuinfo.h
    */
  def SDL_HasNEON(): Boolean = extern

  /** Query whether the primary selection exists and contains a non-empty text
    * string.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_clipboard.h
    */
  def SDL_HasPrimarySelectionText(): Boolean = extern

  /** Return whether a property exists in a group of properties.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_properties.h
    */
  def SDL_HasProperty(props: SDL_PropertiesID, name: CString): Boolean = extern

  /** Determine whether two rectangles intersect.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_rect.h
    */
  def SDL_HasRectIntersection(A: Ptr[SDL_Rect], B: Ptr[SDL_Rect]): Boolean =
    extern

  /** Determine whether two rectangles intersect with float precision.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_rect.h
    */
  def SDL_HasRectIntersectionFloat(
      A: Ptr[SDL_FRect],
      B: Ptr[SDL_FRect]
  ): Boolean = extern

  /** Determine whether the CPU has SSE features.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_cpuinfo.h
    */
  def SDL_HasSSE(): Boolean = extern

  /** Determine whether the CPU has SSE2 features.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_cpuinfo.h
    */
  def SDL_HasSSE2(): Boolean = extern

  /** Determine whether the CPU has SSE3 features.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_cpuinfo.h
    */
  def SDL_HasSSE3(): Boolean = extern

  /** Determine whether the CPU has SSE4.1 features.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_cpuinfo.h
    */
  def SDL_HasSSE41(): Boolean = extern

  /** Determine whether the CPU has SSE4.2 features.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_cpuinfo.h
    */
  def SDL_HasSSE42(): Boolean = extern

  /** Check whether the platform has screen keyboard support.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_keyboard.h
    */
  def SDL_HasScreenKeyboardSupport(): Boolean = extern

  /** Hide the cursor.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mouse.h
    */
  def SDL_HideCursor(): Boolean = extern

  /** Hide a window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_HideWindow(window: Ptr[SDL_Window]): Boolean = extern

  /** Use this function to prepare a read-only memory buffer for use with
    * SDL_IOStream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_IOFromConstMem(mem: Ptr[Byte], size: size_t): Ptr[SDL_IOStream] =
    extern

  /** Use this function to create an SDL_IOStream that is backed by dynamically
    * allocated memory.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_IOFromDynamicMem(): Ptr[SDL_IOStream] = extern

  /** Use this function to create a new SDL_IOStream structure for reading from
    * and/or writing to a named file.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_IOFromFile(file: CString, mode: CString): Ptr[SDL_IOStream] = extern

  /** Use this function to prepare a read-write memory buffer for use with
    * SDL_IOStream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_IOFromMem(mem: Ptr[Byte], size: size_t): Ptr[SDL_IOStream] = extern

  /** Print to an SDL_IOStream data stream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_IOprintf(
      context: Ptr[SDL_IOStream],
      fmt: CString,
      rest: Any*
  ): size_t = extern

  /** Print to an SDL_IOStream data stream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_IOvprintf(
      context: Ptr[SDL_IOStream],
      fmt: CString,
      ap: va_list
  ): size_t = extern

  /** Initialize the SDL library.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_init.h
    */
  def SDL_Init(flags: SDL_InitFlags): Boolean = extern

  /** Initialize a haptic device for simple rumble playback.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  def SDL_InitHapticRumble(haptic: Ptr[SDL_Haptic]): Boolean = extern

  /** Compatibility function to initialize the SDL library.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_init.h
    */
  def SDL_InitSubSystem(flags: SDL_InitFlags): Boolean = extern

  /** Inserts an arbitrary string label into the command buffer callstream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_InsertGPUDebugLabel(
      command_buffer: Ptr[SDL_GPUCommandBuffer],
      text: CString
  ): Unit = extern

  /** Check if the given joystick is supported by the gamepad interface.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_IsGamepad(instance_id: SDL_JoystickID): Boolean = extern

  /** Query if a joystick has haptic features.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  def SDL_IsJoystickHaptic(joystick: Ptr[SDL_Joystick]): Boolean = extern

  /** Query whether or not a joystick is virtual.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_IsJoystickVirtual(instance_id: SDL_JoystickID): Boolean = extern

  /** Query whether or not the current mouse has haptic capabilities.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  def SDL_IsMouseHaptic(): Boolean = extern

  /** Query if the current device is a TV.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_system.h
    */
  def SDL_IsTV(): Boolean = extern

  /** Query if the current device is a tablet.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_system.h
    */
  def SDL_IsTablet(): Boolean = extern

  /** Get the status of a specified joystick.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_JoystickConnected(joystick: Ptr[SDL_Joystick]): Boolean = extern

  /** Query the state of joystick event processing.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_JoystickEventsEnabled(): Boolean = extern

  /** Stop a process.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_process.h
    */
  def SDL_KillProcess(process: Ptr[SDL_Process], force: Boolean): Boolean =
    extern

  /** Load a BMP image from a file.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_LoadBMP(file: CString): Ptr[SDL_Surface] = extern

  /** Load a BMP image from a seekable SDL data stream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_LoadBMP_IO(
      src: Ptr[SDL_IOStream],
      closeio: Boolean
  ): Ptr[SDL_Surface] = extern

  /** Load all the data from a file path.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_LoadFile(file: CString, datasize: Ptr[size_t]): Ptr[Byte] = extern

  /** Load all the data from an SDL data stream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_LoadFile_IO(
      src: Ptr[SDL_IOStream],
      datasize: Ptr[size_t],
      closeio: Boolean
  ): Ptr[Byte] = extern

  /** Look up the address of the named function in a shared object.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_loadso.h
    */
  def SDL_LoadFunction(
      handle: Ptr[SDL_SharedObject],
      name: CString
  ): SDL_FunctionPointer = extern

  /** Dynamically load a shared object.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_loadso.h
    */
  def SDL_LoadObject(sofile: CString): Ptr[SDL_SharedObject] = extern

  /** Loads a WAV from a file path.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_LoadWAV(
      path: CString,
      spec: Ptr[SDL_AudioSpec],
      audio_buf: Ptr[Ptr[Uint8]],
      audio_len: Ptr[Uint32]
  ): Boolean = extern

  /** Load the audio data of a WAVE file into memory.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_LoadWAV_IO(
      src: Ptr[SDL_IOStream],
      closeio: Boolean,
      spec: Ptr[SDL_AudioSpec],
      audio_buf: Ptr[Ptr[Uint8]],
      audio_len: Ptr[Uint32]
  ): Boolean = extern

  /** Lock an audio stream for serialized access.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_LockAudioStream(stream: Ptr[SDL_AudioStream]): Boolean = extern

  /** Locking for atomic access to the joystick API.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_LockJoysticks(): Unit = extern

  /** Lock the mutex.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mutex.h
    */
  def SDL_LockMutex(mutex: Ptr[SDL_Mutex]): Unit = extern

  /** Lock a group of properties.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_properties.h
    */
  def SDL_LockProperties(props: SDL_PropertiesID): Boolean = extern

  /** Lock the read/write lock for _read only_ operations.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mutex.h
    */
  def SDL_LockRWLockForReading(rwlock: Ptr[SDL_RWLock]): Unit = extern

  /** Lock the read/write lock for _write_ operations.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mutex.h
    */
  def SDL_LockRWLockForWriting(rwlock: Ptr[SDL_RWLock]): Unit = extern

  /** Lock a spin lock by setting it to a non-zero value.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_atomic.h
    */
  def SDL_LockSpinlock(lock: Ptr[SDL_SpinLock]): Unit = extern

  /** Set up a surface for directly accessing the pixels.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_LockSurface(surface: Ptr[SDL_Surface]): Boolean = extern

  /** Lock a portion of the texture for **write-only** pixel access.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_LockTexture(
      texture: Ptr[SDL_Texture],
      rect: Ptr[SDL_Rect],
      pixels: Ptr[Ptr[Byte]],
      pitch: Ptr[CInt]
  ): Boolean = extern

  /** Lock a portion of the texture for **write-only** pixel access, and expose
    * it as a SDL surface.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_LockTextureToSurface(
      texture: Ptr[SDL_Texture],
      rect: Ptr[SDL_Rect],
      surface: Ptr[Ptr[SDL_Surface]]
  ): Boolean = extern

  /** Log a message with SDL_LOG_CATEGORY_APPLICATION and SDL_LOG_PRIORITY_INFO.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_log.h
    */
  def SDL_Log(fmt: CString, rest: Any*): Unit = extern

  /** Log a message with SDL_LOG_PRIORITY_CRITICAL.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_log.h
    */
  def SDL_LogCritical(category: CInt, fmt: CString, rest: Any*): Unit = extern

  /** Log a message with SDL_LOG_PRIORITY_DEBUG.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_log.h
    */
  def SDL_LogDebug(category: CInt, fmt: CString, rest: Any*): Unit = extern

  /** Log a message with SDL_LOG_PRIORITY_ERROR.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_log.h
    */
  def SDL_LogError(category: CInt, fmt: CString, rest: Any*): Unit = extern

  /** Log a message with SDL_LOG_PRIORITY_INFO.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_log.h
    */
  def SDL_LogInfo(category: CInt, fmt: CString, rest: Any*): Unit = extern

  /** Log a message with the specified category and priority.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_log.h
    */
  def SDL_LogMessage(
      category: CInt,
      priority: SDL_LogPriority,
      fmt: CString,
      rest: Any*
  ): Unit = extern

  /** Log a message with the specified category and priority.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_log.h
    */
  def SDL_LogMessageV(
      category: CInt,
      priority: SDL_LogPriority,
      fmt: CString,
      ap: va_list
  ): Unit = extern

  /** Log a message with SDL_LOG_PRIORITY_TRACE.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_log.h
    */
  def SDL_LogTrace(category: CInt, fmt: CString, rest: Any*): Unit = extern

  /** Log a message with SDL_LOG_PRIORITY_VERBOSE.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_log.h
    */
  def SDL_LogVerbose(category: CInt, fmt: CString, rest: Any*): Unit = extern

  /** Log a message with SDL_LOG_PRIORITY_WARN.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_log.h
    */
  def SDL_LogWarn(category: CInt, fmt: CString, rest: Any*): Unit = extern

  /** Maps a transfer buffer into application address space.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_MapGPUTransferBuffer(
      device: Ptr[SDL_GPUDevice],
      transfer_buffer: Ptr[SDL_GPUTransferBuffer],
      cycle: Boolean
  ): Ptr[Byte] = extern

  /** Map an RGB triple to an opaque pixel value for a given pixel format.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_pixels.h
    */
  def SDL_MapRGB(
      format: Ptr[SDL_PixelFormatDetails],
      palette: Ptr[SDL_Palette],
      r: Uint8,
      g: Uint8,
      b: Uint8
  ): Uint32 = extern

  /** Map an RGBA quadruple to a pixel value for a given pixel format.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_pixels.h
    */
  def SDL_MapRGBA(
      format: Ptr[SDL_PixelFormatDetails],
      palette: Ptr[SDL_Palette],
      r: Uint8,
      g: Uint8,
      b: Uint8,
      a: Uint8
  ): Uint32 = extern

  /** Map an RGB triple to an opaque pixel value for a surface.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_MapSurfaceRGB(
      surface: Ptr[SDL_Surface],
      r: Uint8,
      g: Uint8,
      b: Uint8
  ): Uint32 = extern

  /** Map an RGBA quadruple to a pixel value for a surface.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_MapSurfaceRGBA(
      surface: Ptr[SDL_Surface],
      r: Uint8,
      g: Uint8,
      b: Uint8,
      a: Uint8
  ): Uint32 = extern

  /** Request that the window be made as large as possible.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_MaximizeWindow(window: Ptr[SDL_Window]): Boolean = extern

  /** Insert a memory acquire barrier.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_atomic.h
    */
  def SDL_MemoryBarrierAcquireFunction(): Unit = extern

  /** Insert a memory release barrier.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_atomic.h
    */
  def SDL_MemoryBarrierReleaseFunction(): Unit = extern

  /** Create a CAMetalLayer-backed NSView/UIView and attach it to the specified
    * window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_metal.h
    */
  def SDL_Metal_CreateView(window: Ptr[SDL_Window]): SDL_MetalView = extern

  /** Destroy an existing SDL_MetalView object.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_metal.h
    */
  def SDL_Metal_DestroyView(view: SDL_MetalView): Unit = extern

  /** Get a pointer to the backing CAMetalLayer for the given view.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_metal.h
    */
  def SDL_Metal_GetLayer(view: SDL_MetalView): Ptr[Byte] = extern

  /** Request that the window be minimized to an iconic representation.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_MinimizeWindow(window: Ptr[SDL_Window]): Boolean = extern

  /** Mix audio data in a specified format.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_MixAudio(
      dst: Ptr[Uint8],
      src: Ptr[Uint8],
      format: SDL_AudioFormat,
      len: Uint32,
      volume: Float
  ): Boolean = extern

  /** Get the index of the most significant (set) bit in a 32-bit number.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_bits.h
    */
  def SDL_MostSignificantBitIndex32(x: Uint32): CInt = extern

  /** Let iOS apps with external event handling report
    * onApplicationDidEnterBackground.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_system.h
    */
  def SDL_OnApplicationDidEnterBackground(): Unit = extern

  /** Let iOS apps with external event handling report
    * onApplicationDidBecomeActive.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_system.h
    */
  def SDL_OnApplicationDidEnterForeground(): Unit = extern

  /** Let iOS apps with external event handling report
    * onApplicationDidReceiveMemoryWarning.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_system.h
    */
  def SDL_OnApplicationDidReceiveMemoryWarning(): Unit = extern

  /** Let iOS apps with external event handling report
    * onApplicationWillResignActive.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_system.h
    */
  def SDL_OnApplicationWillEnterBackground(): Unit = extern

  /** Let iOS apps with external event handling report
    * onApplicationWillEnterForeground.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_system.h
    */
  def SDL_OnApplicationWillEnterForeground(): Unit = extern

  /** Let iOS apps with external event handling report
    * onApplicationWillTerminate.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_system.h
    */
  def SDL_OnApplicationWillTerminate(): Unit = extern

  /** Open a specific audio device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_OpenAudioDevice(
      devid: SDL_AudioDeviceID,
      spec: Ptr[SDL_AudioSpec]
  ): SDL_AudioDeviceID = extern

  /** Convenience function for straightforward audio init for the common case.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_OpenAudioDeviceStream(
      devid: SDL_AudioDeviceID,
      spec: Ptr[SDL_AudioSpec],
      callback: SDL_AudioStreamCallback,
      userdata: Ptr[Byte]
  ): Ptr[SDL_AudioStream] = extern

  /** Open a video recording device (a "camera").
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_camera.h
    */
  def SDL_OpenCamera(
      instance_id: SDL_CameraID,
      spec: Ptr[SDL_CameraSpec]
  ): Ptr[SDL_Camera] = extern

  /** Opens up a container for local filesystem storage.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_storage.h
    */
  def SDL_OpenFileStorage(path: CString): Ptr[SDL_Storage] = extern

  /** Open a gamepad for use.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_OpenGamepad(instance_id: SDL_JoystickID): Ptr[SDL_Gamepad] = extern

  /** Open a haptic device for use.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  def SDL_OpenHaptic(instance_id: SDL_HapticID): Ptr[SDL_Haptic] = extern

  /** Open a haptic device for use from a joystick device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  def SDL_OpenHapticFromJoystick(joystick: Ptr[SDL_Joystick]): Ptr[SDL_Haptic] =
    extern

  /** Try to open a haptic device from the current mouse.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  def SDL_OpenHapticFromMouse(): Ptr[SDL_Haptic] = extern

  /** Create a custom SDL_IOStream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_OpenIO(
      iface: Ptr[SDL_IOStreamInterface],
      userdata: Ptr[Byte]
  ): Ptr[SDL_IOStream] = extern

  /** Open a joystick for use.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_OpenJoystick(instance_id: SDL_JoystickID): Ptr[SDL_Joystick] = extern

  /** Open a sensor for use.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_sensor.h
    */
  def SDL_OpenSensor(instance_id: SDL_SensorID): Ptr[SDL_Sensor] = extern

  /** Opens up a container using a client-provided storage interface.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_storage.h
    */
  def SDL_OpenStorage(
      iface: Ptr[SDL_StorageInterface],
      userdata: Ptr[Byte]
  ): Ptr[SDL_Storage] = extern

  /** Opens up a read-only container for the application's filesystem.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_storage.h
    */
  def SDL_OpenTitleStorage(
      `override`: CString,
      props: SDL_PropertiesID
  ): Ptr[SDL_Storage] = extern

  /** Open a URL/URI in the browser or other appropriate external application.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_misc.h
    */
  def SDL_OpenURL(url: CString): Boolean = extern

  /** Opens up a container for a user's unique read/write filesystem.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_storage.h
    */
  def SDL_OpenUserStorage(
      org: CString,
      app: CString,
      props: SDL_PropertiesID
  ): Ptr[SDL_Storage] = extern

  /** Set an error indicating that memory allocation failed.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_error.h
    */
  def SDL_OutOfMemory(): Boolean = extern

  /** Use this function to pause audio playback on a specified device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_PauseAudioDevice(dev: SDL_AudioDeviceID): Boolean = extern

  /** Use this function to pause audio playback on the audio device associated
    * with an audio stream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_PauseAudioStreamDevice(stream: Ptr[SDL_AudioStream]): Boolean = extern

  /** Pause a haptic device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  def SDL_PauseHaptic(haptic: Ptr[SDL_Haptic]): Boolean = extern

  /** Check the event queue for messages and optionally return them.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  def SDL_PeepEvents(
      events: Ptr[SDL_Event],
      numevents: CInt,
      action: SDL_EventAction,
      minType: Uint32,
      maxType: Uint32
  ): CInt = extern

  /** Run a simple rumble effect on a haptic device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  def SDL_PlayHapticRumble(
      haptic: Ptr[SDL_Haptic],
      strength: Float,
      length: Uint32
  ): Boolean = extern

  /** Determine whether a point resides inside a rectangle.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_rect.h
    */
  def SDL_PointInRect(p: Ptr[SDL_Point], r: Ptr[SDL_Rect]): Boolean = extern

  /** Determine whether a point resides inside a floating point rectangle.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_rect.h
    */
  def SDL_PointInRectFloat(p: Ptr[SDL_FPoint], r: Ptr[SDL_FRect]): Boolean =
    extern

  /** Poll for currently pending events.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  def SDL_PollEvent(event: Ptr[SDL_Event]): Boolean = extern

  /** Ends the most-recently pushed debug group.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_PopGPUDebugGroup(command_buffer: Ptr[SDL_GPUCommandBuffer]): Unit =
    extern

  /** Premultiply the alpha on a block of pixels.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_PremultiplyAlpha(
      width: CInt,
      height: CInt,
      src_format: SDL_PixelFormat,
      src: Ptr[Byte],
      src_pitch: CInt,
      dst_format: SDL_PixelFormat,
      dst: Ptr[Byte],
      dst_pitch: CInt,
      linear: Boolean
  ): Boolean = extern

  /** Premultiply the alpha in a surface.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_PremultiplySurfaceAlpha(
      surface: Ptr[SDL_Surface],
      linear: Boolean
  ): Boolean = extern

  /** Pump the event loop, gathering events from the input devices.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  def SDL_PumpEvents(): Unit = extern

  /** Add an event to the event queue.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  def SDL_PushEvent(event: Ptr[SDL_Event]): Boolean = extern

  /** Pushes data to a uniform slot on the command buffer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_PushGPUComputeUniformData(
      command_buffer: Ptr[SDL_GPUCommandBuffer],
      slot_index: Uint32,
      data: Ptr[Byte],
      length: Uint32
  ): Unit = extern

  /** Begins a debug group with an arbitary name.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_PushGPUDebugGroup(
      command_buffer: Ptr[SDL_GPUCommandBuffer],
      name: CString
  ): Unit = extern

  /** Pushes data to a fragment uniform slot on the command buffer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_PushGPUFragmentUniformData(
      command_buffer: Ptr[SDL_GPUCommandBuffer],
      slot_index: Uint32,
      data: Ptr[Byte],
      length: Uint32
  ): Unit = extern

  /** Pushes data to a vertex uniform slot on the command buffer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_PushGPUVertexUniformData(
      command_buffer: Ptr[SDL_GPUCommandBuffer],
      slot_index: Uint32,
      data: Ptr[Byte],
      length: Uint32
  ): Unit = extern

  /** Add data to the stream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_PutAudioStreamData(
      stream: Ptr[SDL_AudioStream],
      buf: Ptr[Byte],
      len: CInt
  ): Boolean = extern

  /** Checks the status of a fence.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_QueryGPUFence(
      device: Ptr[SDL_GPUDevice],
      fence: Ptr[SDL_GPUFence]
  ): Boolean = extern

  /** Clean up all initialized subsystems.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_init.h
    */
  def SDL_Quit(): Unit = extern

  /** Shut down specific SDL subsystems.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_init.h
    */
  def SDL_QuitSubSystem(flags: SDL_InitFlags): Unit = extern

  /** Request that a window be raised above other windows and gain the input
    * focus.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_RaiseWindow(window: Ptr[SDL_Window]): Boolean = extern

  /** Read from a data source.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_ReadIO(
      context: Ptr[SDL_IOStream],
      ptr: Ptr[Byte],
      size: size_t
  ): size_t = extern

  /** Read all the output from a process.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_process.h
    */
  def SDL_ReadProcess(
      process: Ptr[SDL_Process],
      datasize: Ptr[size_t],
      exitcode: Ptr[CInt]
  ): Ptr[Byte] = extern

  /** Use this function to read 16 bits of big-endian data from an SDL_IOStream
    * and return in native format.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_ReadS16BE(src: Ptr[SDL_IOStream], value: Ptr[Sint16]): Boolean =
    extern

  /** Use this function to read 16 bits of little-endian data from an
    * SDL_IOStream and return in native format.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_ReadS16LE(src: Ptr[SDL_IOStream], value: Ptr[Sint16]): Boolean =
    extern

  /** Use this function to read 32 bits of big-endian data from an SDL_IOStream
    * and return in native format.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_ReadS32BE(src: Ptr[SDL_IOStream], value: Ptr[Sint32]): Boolean =
    extern

  /** Use this function to read 32 bits of little-endian data from an
    * SDL_IOStream and return in native format.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_ReadS32LE(src: Ptr[SDL_IOStream], value: Ptr[Sint32]): Boolean =
    extern

  /** Use this function to read 64 bits of big-endian data from an SDL_IOStream
    * and return in native format.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_ReadS64BE(src: Ptr[SDL_IOStream], value: Ptr[Sint64]): Boolean =
    extern

  /** Use this function to read 64 bits of little-endian data from an
    * SDL_IOStream and return in native format.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_ReadS64LE(src: Ptr[SDL_IOStream], value: Ptr[Sint64]): Boolean =
    extern

  /** Use this function to read a signed byte from an SDL_IOStream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_ReadS8(src: Ptr[SDL_IOStream], value: Ptr[Sint8]): Boolean = extern

  /** Synchronously read a file from a storage container into a client-provided
    * buffer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_storage.h
    */
  def SDL_ReadStorageFile(
      storage: Ptr[SDL_Storage],
      path: CString,
      destination: Ptr[Byte],
      length: Uint64
  ): Boolean = extern

  /** Retrieves a single pixel from a surface.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_ReadSurfacePixel(
      surface: Ptr[SDL_Surface],
      x: CInt,
      y: CInt,
      r: Ptr[Uint8],
      g: Ptr[Uint8],
      b: Ptr[Uint8],
      a: Ptr[Uint8]
  ): Boolean = extern

  /** Retrieves a single pixel from a surface.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_ReadSurfacePixelFloat(
      surface: Ptr[SDL_Surface],
      x: CInt,
      y: CInt,
      r: Ptr[Float],
      g: Ptr[Float],
      b: Ptr[Float],
      a: Ptr[Float]
  ): Boolean = extern

  /** Use this function to read 16 bits of big-endian data from an SDL_IOStream
    * and return in native format.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_ReadU16BE(src: Ptr[SDL_IOStream], value: Ptr[Uint16]): Boolean =
    extern

  /** Use this function to read 16 bits of little-endian data from an
    * SDL_IOStream and return in native format.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_ReadU16LE(src: Ptr[SDL_IOStream], value: Ptr[Uint16]): Boolean =
    extern

  /** Use this function to read 32 bits of big-endian data from an SDL_IOStream
    * and return in native format.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_ReadU32BE(src: Ptr[SDL_IOStream], value: Ptr[Uint32]): Boolean =
    extern

  /** Use this function to read 32 bits of little-endian data from an
    * SDL_IOStream and return in native format.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_ReadU32LE(src: Ptr[SDL_IOStream], value: Ptr[Uint32]): Boolean =
    extern

  /** Use this function to read 64 bits of big-endian data from an SDL_IOStream
    * and return in native format.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_ReadU64BE(src: Ptr[SDL_IOStream], value: Ptr[Uint64]): Boolean =
    extern

  /** Use this function to read 64 bits of little-endian data from an
    * SDL_IOStream and return in native format.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_ReadU64LE(src: Ptr[SDL_IOStream], value: Ptr[Uint64]): Boolean =
    extern

  /** Use this function to read a byte from an SDL_IOStream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_ReadU8(src: Ptr[SDL_IOStream], value: Ptr[Uint8]): Boolean = extern

  /** Determine whether a rectangle has no area.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_rect.h
    */
  def SDL_RectEmpty(r: Ptr[SDL_Rect]): Boolean = extern

  /** Determine whether a floating point rectangle can contain any point.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_rect.h
    */
  def SDL_RectEmptyFloat(r: Ptr[SDL_FRect]): Boolean = extern

  /** Convert an SDL_Rect to SDL_FRect
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_rect.h
    */
  def SDL_RectToFRect(rect: Ptr[SDL_Rect], frect: Ptr[SDL_FRect]): Unit = extern

  /** Determine whether two rectangles are equal.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_rect.h
    */
  def SDL_RectsEqual(a: Ptr[SDL_Rect], b: Ptr[SDL_Rect]): Boolean = extern

  /** Determine whether two floating point rectangles are equal, within some
    * given epsilon.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_rect.h
    */
  def SDL_RectsEqualEpsilon(
      a: Ptr[SDL_FRect],
      b: Ptr[SDL_FRect],
      epsilon: Float
  ): Boolean = extern

  /** Determine whether two floating point rectangles are equal, within a
    * default epsilon.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_rect.h
    */
  def SDL_RectsEqualFloat(a: Ptr[SDL_FRect], b: Ptr[SDL_FRect]): Boolean =
    extern

  /** Allocate a set of user-defined events, and return the beginning event
    * number for that set of events.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  def SDL_RegisterEvents(numevents: CInt): Uint32 = extern

  /** Release a frame of video acquired from a camera.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_camera.h
    */
  def SDL_ReleaseCameraFrame(
      camera: Ptr[SDL_Camera],
      frame: Ptr[SDL_Surface]
  ): Unit = extern

  /** Frees the given buffer as soon as it is safe to do so.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_ReleaseGPUBuffer(
      device: Ptr[SDL_GPUDevice],
      buffer: Ptr[SDL_GPUBuffer]
  ): Unit = extern

  /** Frees the given compute pipeline as soon as it is safe to do so.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_ReleaseGPUComputePipeline(
      device: Ptr[SDL_GPUDevice],
      compute_pipeline: Ptr[SDL_GPUComputePipeline]
  ): Unit = extern

  /** Releases a fence obtained from SDL_SubmitGPUCommandBufferAndAcquireFence.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_ReleaseGPUFence(
      device: Ptr[SDL_GPUDevice],
      fence: Ptr[SDL_GPUFence]
  ): Unit = extern

  /** Frees the given graphics pipeline as soon as it is safe to do so.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_ReleaseGPUGraphicsPipeline(
      device: Ptr[SDL_GPUDevice],
      graphics_pipeline: Ptr[SDL_GPUGraphicsPipeline]
  ): Unit = extern

  /** Frees the given sampler as soon as it is safe to do so.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_ReleaseGPUSampler(
      device: Ptr[SDL_GPUDevice],
      sampler: Ptr[SDL_GPUSampler]
  ): Unit = extern

  /** Frees the given shader as soon as it is safe to do so.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_ReleaseGPUShader(
      device: Ptr[SDL_GPUDevice],
      shader: Ptr[SDL_GPUShader]
  ): Unit = extern

  /** Frees the given texture as soon as it is safe to do so.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_ReleaseGPUTexture(
      device: Ptr[SDL_GPUDevice],
      texture: Ptr[SDL_GPUTexture]
  ): Unit = extern

  /** Frees the given transfer buffer as soon as it is safe to do so.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_ReleaseGPUTransferBuffer(
      device: Ptr[SDL_GPUDevice],
      transfer_buffer: Ptr[SDL_GPUTransferBuffer]
  ): Unit = extern

  /** Unclaims a window, destroying its swapchain structure.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_ReleaseWindowFromGPUDevice(
      device: Ptr[SDL_GPUDevice],
      window: Ptr[SDL_Window]
  ): Unit = extern

  /** Reinitialize the SDL mapping database to its initial state.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_ReloadGamepadMappings(): Boolean = extern

  /** Remove an event watch callback added with SDL_AddEventWatch().
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  def SDL_RemoveEventWatch(filter: SDL_EventFilter, userdata: Ptr[Byte]): Unit =
    extern

  /** Remove a function watching a particular hint.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_hints.h
    */
  def SDL_RemoveHintCallback(
      name: CString,
      callback: SDL_HintCallback,
      userdata: Ptr[Byte]
  ): Unit = extern

  /** Remove a file or an empty directory.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_filesystem.h
    */
  def SDL_RemovePath(path: CString): Boolean = extern

  /** Remove a file or an empty directory in a writable storage container.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_storage.h
    */
  def SDL_RemoveStoragePath(storage: Ptr[SDL_Storage], path: CString): Boolean =
    extern

  /** Remove all alternate versions of a surface.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_RemoveSurfaceAlternateImages(surface: Ptr[SDL_Surface]): Unit = extern

  /** Remove a timer created with SDL_AddTimer().
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_timer.h
    */
  def SDL_RemoveTimer(id: SDL_TimerID): Boolean = extern

  /** Rename a file or directory.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_filesystem.h
    */
  def SDL_RenamePath(oldpath: CString, newpath: CString): Boolean = extern

  /** Rename a file or directory in a writable storage container.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_storage.h
    */
  def SDL_RenameStoragePath(
      storage: Ptr[SDL_Storage],
      oldpath: CString,
      newpath: CString
  ): Boolean = extern

  /** Clear the current rendering target with the drawing color.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_RenderClear(renderer: Ptr[SDL_Renderer]): Boolean = extern

  /** Get whether clipping is enabled on the given renderer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_RenderClipEnabled(renderer: Ptr[SDL_Renderer]): Boolean = extern

  /** Get a point in render coordinates when given a point in window
    * coordinates.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_RenderCoordinatesFromWindow(
      renderer: Ptr[SDL_Renderer],
      window_x: Float,
      window_y: Float,
      x: Ptr[Float],
      y: Ptr[Float]
  ): Boolean = extern

  /** Get a point in window coordinates when given a point in render
    * coordinates.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_RenderCoordinatesToWindow(
      renderer: Ptr[SDL_Renderer],
      x: Float,
      y: Float,
      window_x: Ptr[Float],
      window_y: Ptr[Float]
  ): Boolean = extern

  /** Draw debug text to an SDL_Renderer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_RenderDebugText(
      renderer: Ptr[SDL_Renderer],
      x: Float,
      y: Float,
      str: CString
  ): Boolean = extern

  /** Fill a rectangle on the current rendering target with the drawing color at
    * subpixel precision.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_RenderFillRect(
      renderer: Ptr[SDL_Renderer],
      rect: Ptr[SDL_FRect]
  ): Boolean = extern

  /** Fill some number of rectangles on the current rendering target with the
    * drawing color at subpixel precision.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_RenderFillRects(
      renderer: Ptr[SDL_Renderer],
      rects: Ptr[SDL_FRect],
      count: CInt
  ): Boolean = extern

  /** Render a list of triangles, optionally using a texture and indices into
    * the vertex array Color and alpha modulation is done per vertex
    * (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_RenderGeometry(
      renderer: Ptr[SDL_Renderer],
      texture: Ptr[SDL_Texture],
      vertices: Ptr[SDL_Vertex],
      num_vertices: CInt,
      indices: Ptr[CInt],
      num_indices: CInt
  ): Boolean = extern

  /** Render a list of triangles, optionally using a texture and indices into
    * the vertex arrays Color and alpha modulation is done per vertex
    * (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_RenderGeometryRaw(
      renderer: Ptr[SDL_Renderer],
      texture: Ptr[SDL_Texture],
      xy: Ptr[Float],
      xy_stride: CInt,
      color: Ptr[SDL_FColor],
      color_stride: CInt,
      uv: Ptr[Float],
      uv_stride: CInt,
      num_vertices: CInt,
      indices: Ptr[Byte],
      num_indices: CInt,
      size_indices: CInt
  ): Boolean = extern

  /** Draw a line on the current rendering target at subpixel precision.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_RenderLine(
      renderer: Ptr[SDL_Renderer],
      x1: Float,
      y1: Float,
      x2: Float,
      y2: Float
  ): Boolean = extern

  /** Draw a series of connected lines on the current rendering target at
    * subpixel precision.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_RenderLines(
      renderer: Ptr[SDL_Renderer],
      points: Ptr[SDL_FPoint],
      count: CInt
  ): Boolean = extern

  /** Draw a point on the current rendering target at subpixel precision.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_RenderPoint(
      renderer: Ptr[SDL_Renderer],
      x: Float,
      y: Float
  ): Boolean = extern

  /** Draw multiple points on the current rendering target at subpixel
    * precision.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_RenderPoints(
      renderer: Ptr[SDL_Renderer],
      points: Ptr[SDL_FPoint],
      count: CInt
  ): Boolean = extern

  /** Update the screen with any rendering performed since the previous call.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_RenderPresent(renderer: Ptr[SDL_Renderer]): Boolean = extern

  /** Read pixels from the current rendering target.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_RenderReadPixels(
      renderer: Ptr[SDL_Renderer],
      rect: Ptr[SDL_Rect]
  ): Ptr[SDL_Surface] = extern

  /** Draw a rectangle on the current rendering target at subpixel precision.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_RenderRect(
      renderer: Ptr[SDL_Renderer],
      rect: Ptr[SDL_FRect]
  ): Boolean = extern

  /** Draw some number of rectangles on the current rendering target at subpixel
    * precision.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_RenderRects(
      renderer: Ptr[SDL_Renderer],
      rects: Ptr[SDL_FRect],
      count: CInt
  ): Boolean = extern

  /** Copy a portion of the texture to the current rendering target at subpixel
    * precision.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_RenderTexture(
      renderer: Ptr[SDL_Renderer],
      texture: Ptr[SDL_Texture],
      srcrect: Ptr[SDL_FRect],
      dstrect: Ptr[SDL_FRect]
  ): Boolean = extern

  /** Perform a scaled copy using the 9-grid algorithm to the current rendering
    * target at subpixel precision.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_RenderTexture9Grid(
      renderer: Ptr[SDL_Renderer],
      texture: Ptr[SDL_Texture],
      srcrect: Ptr[SDL_FRect],
      left_width: Float,
      right_width: Float,
      top_height: Float,
      bottom_height: Float,
      scale: Float,
      dstrect: Ptr[SDL_FRect]
  ): Boolean = extern

  /** Copy a portion of the source texture to the current rendering target, with
    * rotation and flipping, at subpixel precision.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_RenderTextureRotated(
      renderer: Ptr[SDL_Renderer],
      texture: Ptr[SDL_Texture],
      srcrect: Ptr[SDL_FRect],
      dstrect: Ptr[SDL_FRect],
      angle: Double,
      center: Ptr[SDL_FPoint],
      flip: SDL_FlipMode
  ): Boolean = extern

  /** Tile a portion of the texture to the current rendering target at subpixel
    * precision.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_RenderTextureTiled(
      renderer: Ptr[SDL_Renderer],
      texture: Ptr[SDL_Texture],
      srcrect: Ptr[SDL_FRect],
      scale: Float,
      dstrect: Ptr[SDL_FRect]
  ): Boolean = extern

  /** Return whether an explicit rectangle was set as the viewport.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_RenderViewportSet(renderer: Ptr[SDL_Renderer]): Boolean = extern

  /** Never call this directly.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_assert.h
    */
  def SDL_ReportAssertion(
      data: Ptr[SDL_AssertData],
      func: CString,
      file: CString,
      line: CInt
  ): SDL_AssertState = extern

  /** Clear the list of all assertion failures.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_assert.h
    */
  def SDL_ResetAssertionReport(): Unit = extern

  /** Reset a hint to the default value.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_hints.h
    */
  def SDL_ResetHint(name: CString): Boolean = extern

  /** Reset all hints to the default values.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_hints.h
    */
  def SDL_ResetHints(): Unit = extern

  /** Clear the state of the keyboard.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_keyboard.h
    */
  def SDL_ResetKeyboard(): Unit = extern

  /** Reset all priorities to default.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_log.h
    */
  def SDL_ResetLogPriorities(): Unit = extern

  /** Request that the size and position of a minimized or maximized window be
    * restored.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_RestoreWindow(window: Ptr[SDL_Window]): Boolean = extern

  /** Use this function to unpause audio playback on a specified device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_ResumeAudioDevice(dev: SDL_AudioDeviceID): Boolean = extern

  /** Use this function to unpause audio playback on the audio device associated
    * with an audio stream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_ResumeAudioStreamDevice(stream: Ptr[SDL_AudioStream]): Boolean =
    extern

  /** Resume a haptic device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  def SDL_ResumeHaptic(haptic: Ptr[SDL_Haptic]): Boolean = extern

  /** Start a rumble effect on a gamepad.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_RumbleGamepad(
      gamepad: Ptr[SDL_Gamepad],
      low_frequency_rumble: Uint16,
      high_frequency_rumble: Uint16,
      duration_ms: Uint32
  ): Boolean = extern

  /** Start a rumble effect in the gamepad's triggers.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_RumbleGamepadTriggers(
      gamepad: Ptr[SDL_Gamepad],
      left_rumble: Uint16,
      right_rumble: Uint16,
      duration_ms: Uint32
  ): Boolean = extern

  /** Start a rumble effect.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_RumbleJoystick(
      joystick: Ptr[SDL_Joystick],
      low_frequency_rumble: Uint16,
      high_frequency_rumble: Uint16,
      duration_ms: Uint32
  ): Boolean = extern

  /** Start a rumble effect in the joystick's triggers.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_RumbleJoystickTriggers(
      joystick: Ptr[SDL_Joystick],
      left_rumble: Uint16,
      right_rumble: Uint16,
      duration_ms: Uint32
  ): Boolean = extern

  /** Run the haptic effect on its associated haptic device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  def SDL_RunHapticEffect(
      haptic: Ptr[SDL_Haptic],
      effect: CInt,
      iterations: Uint32
  ): Boolean = extern

  /** Save a surface to a file.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_SaveBMP(surface: Ptr[SDL_Surface], file: CString): Boolean = extern

  /** Save a surface to a seekable SDL data stream in BMP format.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_SaveBMP_IO(
      surface: Ptr[SDL_Surface],
      dst: Ptr[SDL_IOStream],
      closeio: Boolean
  ): Boolean = extern

  /** Creates a new surface identical to the existing surface, scaled to the
    * desired size.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_ScaleSurface(
      surface: Ptr[SDL_Surface],
      width: CInt,
      height: CInt,
      scaleMode: SDL_ScaleMode
  ): Ptr[SDL_Surface] = extern

  /** Check whether the screen keyboard is shown for given window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_keyboard.h
    */
  def SDL_ScreenKeyboardShown(window: Ptr[SDL_Window]): Boolean = extern

  /** Check whether the screensaver is currently enabled.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_ScreenSaverEnabled(): Boolean = extern

  /** Seek within an SDL_IOStream data stream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_SeekIO(
      context: Ptr[SDL_IOStream],
      offset: Sint64,
      whence: SDL_IOWhence
  ): Sint64 = extern

  /** Send a gamepad specific effect packet.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_SendGamepadEffect(
      gamepad: Ptr[SDL_Gamepad],
      data: Ptr[Byte],
      size: CInt
  ): Boolean = extern

  /** Send a joystick specific effect packet.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_SendJoystickEffect(
      joystick: Ptr[SDL_Joystick],
      data: Ptr[Byte],
      size: CInt
  ): Boolean = extern

  /** Send a sensor update for an opened virtual joystick.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_SendJoystickVirtualSensorData(
      joystick: Ptr[SDL_Joystick],
      `type`: SDL_SensorType,
      sensor_timestamp: Uint64,
      data: Ptr[Float],
      num_values: CInt
  ): Boolean = extern

  /** Specify basic metadata about your app.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_init.h
    */
  def SDL_SetAppMetadata(
      appname: CString,
      appversion: CString,
      appidentifier: CString
  ): Boolean = extern

  /** Specify metadata about your app through a set of properties.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_init.h
    */
  def SDL_SetAppMetadataProperty(name: CString, value: CString): Boolean =
    extern

  /** Set an application-defined assertion handler.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_assert.h
    */
  def SDL_SetAssertionHandler(
      handler: SDL_AssertionHandler,
      userdata: Ptr[Byte]
  ): Unit = extern

  /** Set an atomic variable to a value.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_atomic.h
    */
  def SDL_SetAtomicInt(a: Ptr[SDL_AtomicInt], v: CInt): CInt = extern

  /** Set a pointer to a value atomically.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_atomic.h
    */
  def SDL_SetAtomicPointer(a: Ptr[Ptr[Byte]], v: Ptr[Byte]): Ptr[Byte] = extern

  /** Set an atomic variable to a value.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_atomic.h
    */
  def SDL_SetAtomicU32(a: Ptr[SDL_AtomicU32], v: Uint32): Uint32 = extern

  /** Change the gain of an audio device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_SetAudioDeviceGain(devid: SDL_AudioDeviceID, gain: Float): Boolean =
    extern

  /** Set a callback that fires when data is about to be fed to an audio device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_SetAudioPostmixCallback(
      devid: SDL_AudioDeviceID,
      callback: SDL_AudioPostmixCallback,
      userdata: Ptr[Byte]
  ): Boolean = extern

  /** Change the input and output formats of an audio stream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_SetAudioStreamFormat(
      stream: Ptr[SDL_AudioStream],
      src_spec: Ptr[SDL_AudioSpec],
      dst_spec: Ptr[SDL_AudioSpec]
  ): Boolean = extern

  /** Change the frequency ratio of an audio stream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_SetAudioStreamFrequencyRatio(
      stream: Ptr[SDL_AudioStream],
      ratio: Float
  ): Boolean = extern

  /** Change the gain of an audio stream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_SetAudioStreamGain(
      stream: Ptr[SDL_AudioStream],
      gain: Float
  ): Boolean = extern

  /** Set a callback that runs when data is requested from an audio stream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_SetAudioStreamGetCallback(
      stream: Ptr[SDL_AudioStream],
      callback: SDL_AudioStreamCallback,
      userdata: Ptr[Byte]
  ): Boolean = extern

  /** Set the current input channel map of an audio stream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_SetAudioStreamInputChannelMap(
      stream: Ptr[SDL_AudioStream],
      chmap: Ptr[CInt],
      count: CInt
  ): Boolean = extern

  /** Set the current output channel map of an audio stream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_SetAudioStreamOutputChannelMap(
      stream: Ptr[SDL_AudioStream],
      chmap: Ptr[CInt],
      count: CInt
  ): Boolean = extern

  /** Set a callback that runs when data is added to an audio stream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_SetAudioStreamPutCallback(
      stream: Ptr[SDL_AudioStream],
      callback: SDL_AudioStreamCallback,
      userdata: Ptr[Byte]
  ): Boolean = extern

  /** Set a boolean property in a group of properties.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_properties.h
    */
  def SDL_SetBooleanProperty(
      props: SDL_PropertiesID,
      name: CString,
      value: Boolean
  ): Boolean = extern

  /** Offer clipboard data to the OS.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_clipboard.h
    */
  def SDL_SetClipboardData(
      callback: SDL_ClipboardDataCallback,
      cleanup: SDL_ClipboardCleanupCallback,
      userdata: Ptr[Byte],
      mime_types: Ptr[CString],
      num_mime_types: size_t
  ): Boolean = extern

  /** Put UTF-8 text into the clipboard.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_clipboard.h
    */
  def SDL_SetClipboardText(text: CString): Boolean = extern

  /** Set the priority for the current thread.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_thread.h
    */
  def SDL_SetCurrentThreadPriority(priority: SDL_ThreadPriority): Boolean =
    extern

  /** Set the active cursor.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mouse.h
    */
  def SDL_SetCursor(cursor: Ptr[SDL_Cursor]): Boolean = extern

  /** Set the value of a variable in the environment.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_SetEnvironmentVariable(
      env: Ptr[SDL_Environment],
      name: CString,
      value: CString,
      overwrite: Boolean
  ): Boolean = extern

  /** Set the SDL error message for the current thread.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_error.h
    */
  def SDL_SetError(fmt: CString, rest: Any*): Boolean = extern

  /** Set the SDL error message for the current thread.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_error.h
    */
  def SDL_SetErrorV(fmt: CString, ap: va_list): Boolean = extern

  /** Set the state of processing events by type.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  def SDL_SetEventEnabled(`type`: Uint32, enabled: Boolean): Unit = extern

  /** Set up a filter to process all events before they change internal state
    * and are posted to the internal event queue.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  def SDL_SetEventFilter(filter: SDL_EventFilter, userdata: Ptr[Byte]): Unit =
    extern

  /** Set a floating point property in a group of properties.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_properties.h
    */
  def SDL_SetFloatProperty(
      props: SDL_PropertiesID,
      name: CString,
      value: Float
  ): Boolean = extern

  /** Sets an arbitrary string constant to label a buffer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_SetGPUBufferName(
      device: Ptr[SDL_GPUDevice],
      buffer: Ptr[SDL_GPUBuffer],
      text: CString
  ): Unit = extern

  /** Sets the current scissor state on a command buffer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_SetGPUScissor(
      render_pass: Ptr[SDL_GPURenderPass],
      scissor: Ptr[SDL_Rect]
  ): Unit = extern

  /** Sets the current stencil reference value on a command buffer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_SetGPUStencilReference(
      render_pass: Ptr[SDL_GPURenderPass],
      reference: Uint8
  ): Unit = extern

  /** Changes the swapchain parameters for the given claimed window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_SetGPUSwapchainParameters(
      device: Ptr[SDL_GPUDevice],
      window: Ptr[SDL_Window],
      swapchain_composition: SDL_GPUSwapchainComposition,
      present_mode: SDL_GPUPresentMode
  ): Boolean = extern

  /** Sets an arbitrary string constant to label a texture.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_SetGPUTextureName(
      device: Ptr[SDL_GPUDevice],
      texture: Ptr[SDL_GPUTexture],
      text: CString
  ): Unit = extern

  /** Sets the current viewport state on a command buffer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_SetGPUViewport(
      render_pass: Ptr[SDL_GPURenderPass],
      viewport: Ptr[SDL_GPUViewport]
  ): Unit = extern

  /** Set the state of gamepad event processing.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_SetGamepadEventsEnabled(enabled: Boolean): Unit = extern

  /** Update a gamepad's LED color.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_SetGamepadLED(
      gamepad: Ptr[SDL_Gamepad],
      red: Uint8,
      green: Uint8,
      blue: Uint8
  ): Boolean = extern

  /** Set the current mapping of a joystick or gamepad.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_SetGamepadMapping(
      instance_id: SDL_JoystickID,
      mapping: CString
  ): Boolean = extern

  /** Set the player index of an opened gamepad.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_SetGamepadPlayerIndex(
      gamepad: Ptr[SDL_Gamepad],
      player_index: CInt
  ): Boolean = extern

  /** Set whether data reporting for a gamepad sensor is enabled.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_SetGamepadSensorEnabled(
      gamepad: Ptr[SDL_Gamepad],
      `type`: SDL_SensorType,
      enabled: Boolean
  ): Boolean = extern

  /** Set the global autocenter of the device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  def SDL_SetHapticAutocenter(
      haptic: Ptr[SDL_Haptic],
      autocenter: CInt
  ): Boolean = extern

  /** Set the global gain of the specified haptic device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  def SDL_SetHapticGain(haptic: Ptr[SDL_Haptic], gain: CInt): Boolean = extern

  /** Set a hint with normal priority.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_hints.h
    */
  def SDL_SetHint(name: CString, value: CString): Boolean = extern

  /** Set a hint with a specific priority.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_hints.h
    */
  def SDL_SetHintWithPriority(
      name: CString,
      value: CString,
      priority: SDL_HintPriority
  ): Boolean = extern

  /** Finish an initialization state transition.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mutex.h
    */
  def SDL_SetInitialized(
      state: Ptr[SDL_InitState],
      initialized: Boolean
  ): Unit = extern

  /** Set the state of joystick event processing.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_SetJoystickEventsEnabled(enabled: Boolean): Unit = extern

  /** Update a joystick's LED color.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_SetJoystickLED(
      joystick: Ptr[SDL_Joystick],
      red: Uint8,
      green: Uint8,
      blue: Uint8
  ): Boolean = extern

  /** Set the player index of an opened joystick.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_SetJoystickPlayerIndex(
      joystick: Ptr[SDL_Joystick],
      player_index: CInt
  ): Boolean = extern

  /** Set the state of an axis on an opened virtual joystick.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_SetJoystickVirtualAxis(
      joystick: Ptr[SDL_Joystick],
      axis: CInt,
      value: Sint16
  ): Boolean = extern

  /** Generate ball motion on an opened virtual joystick.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_SetJoystickVirtualBall(
      joystick: Ptr[SDL_Joystick],
      ball: CInt,
      xrel: Sint16,
      yrel: Sint16
  ): Boolean = extern

  /** Set the state of a button on an opened virtual joystick.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_SetJoystickVirtualButton(
      joystick: Ptr[SDL_Joystick],
      button: CInt,
      down: Boolean
  ): Boolean = extern

  /** Set the state of a hat on an opened virtual joystick.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_SetJoystickVirtualHat(
      joystick: Ptr[SDL_Joystick],
      hat: CInt,
      value: Uint8
  ): Boolean = extern

  /** Set touchpad finger state on an opened virtual joystick.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_SetJoystickVirtualTouchpad(
      joystick: Ptr[SDL_Joystick],
      touchpad: CInt,
      finger: CInt,
      down: Boolean,
      x: Float,
      y: Float,
      pressure: Float
  ): Boolean = extern

  /** Replace the default log output function with one of your own.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_log.h
    */
  def SDL_SetLogOutputFunction(
      callback: SDL_LogOutputFunction,
      userdata: Ptr[Byte]
  ): Unit = extern

  /** Set the priority of all log categories.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_log.h
    */
  def SDL_SetLogPriorities(priority: SDL_LogPriority): Unit = extern

  /** Set the priority of a particular log category.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_log.h
    */
  def SDL_SetLogPriority(category: CInt, priority: SDL_LogPriority): Unit =
    extern

  /** Set the text prepended to log messages of a given priority.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_log.h
    */
  def SDL_SetLogPriorityPrefix(
      priority: SDL_LogPriority,
      prefix: CString
  ): Boolean = extern

  /** Replace SDL's memory allocation functions with a custom set.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_SetMemoryFunctions(
      malloc_func: SDL_malloc_func,
      calloc_func: SDL_calloc_func,
      realloc_func: SDL_realloc_func,
      free_func: SDL_free_func
  ): Boolean = extern

  /** Set the current key modifier state for the keyboard.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_keyboard.h
    */
  def SDL_SetModState(modstate: SDL_Keymod): Unit = extern

  /** Set an integer property in a group of properties.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_properties.h
    */
  def SDL_SetNumberProperty(
      props: SDL_PropertiesID,
      name: CString,
      value: Sint64
  ): Boolean = extern

  /** Set a range of colors in a palette.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_pixels.h
    */
  def SDL_SetPaletteColors(
      palette: Ptr[SDL_Palette],
      colors: Ptr[SDL_Color],
      firstcolor: CInt,
      ncolors: CInt
  ): Boolean = extern

  /** Set a pointer property in a group of properties.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_properties.h
    */
  def SDL_SetPointerProperty(
      props: SDL_PropertiesID,
      name: CString,
      value: Ptr[Byte]
  ): Boolean = extern

  /** Set a pointer property in a group of properties with a cleanup function
    * that is called when the property is deleted.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_properties.h
    */
  def SDL_SetPointerPropertyWithCleanup(
      props: SDL_PropertiesID,
      name: CString,
      value: Ptr[Byte],
      cleanup: SDL_CleanupPropertyCallback,
      userdata: Ptr[Byte]
  ): Boolean = extern

  /** Put UTF-8 text into the primary selection.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_clipboard.h
    */
  def SDL_SetPrimarySelectionText(text: CString): Boolean = extern

  /** Set the clip rectangle for rendering on the specified target.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_SetRenderClipRect(
      renderer: Ptr[SDL_Renderer],
      rect: Ptr[SDL_Rect]
  ): Boolean = extern

  /** Set the color scale used for render operations.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_SetRenderColorScale(
      renderer: Ptr[SDL_Renderer],
      scale: Float
  ): Boolean = extern

  /** Set the blend mode used for drawing operations (Fill and Line).
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_SetRenderDrawBlendMode(
      renderer: Ptr[SDL_Renderer],
      blendMode: SDL_BlendMode
  ): Boolean = extern

  /** Set the color used for drawing operations.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_SetRenderDrawColor(
      renderer: Ptr[SDL_Renderer],
      r: Uint8,
      g: Uint8,
      b: Uint8,
      a: Uint8
  ): Boolean = extern

  /** Set the color used for drawing operations (Rect, Line and Clear).
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_SetRenderDrawColorFloat(
      renderer: Ptr[SDL_Renderer],
      r: Float,
      g: Float,
      b: Float,
      a: Float
  ): Boolean = extern

  /** Set a device independent resolution and presentation mode for rendering.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_SetRenderLogicalPresentation(
      renderer: Ptr[SDL_Renderer],
      w: CInt,
      h: CInt,
      mode: SDL_RendererLogicalPresentation
  ): Boolean = extern

  /** Set the drawing scale for rendering on the current target.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_SetRenderScale(
      renderer: Ptr[SDL_Renderer],
      scaleX: Float,
      scaleY: Float
  ): Boolean = extern

  /** Set a texture as the current rendering target.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_SetRenderTarget(
      renderer: Ptr[SDL_Renderer],
      texture: Ptr[SDL_Texture]
  ): Boolean = extern

  /** Toggle VSync of the given renderer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_SetRenderVSync(renderer: Ptr[SDL_Renderer], vsync: CInt): Boolean =
    extern

  /** Set the drawing area for rendering on the current target.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_SetRenderViewport(
      renderer: Ptr[SDL_Renderer],
      rect: Ptr[SDL_Rect]
  ): Boolean = extern

  /** Set a human-readable name for a scancode.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_keyboard.h
    */
  def SDL_SetScancodeName(scancode: SDL_Scancode, name: CString): Boolean =
    extern

  /** Set a string property in a group of properties.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_properties.h
    */
  def SDL_SetStringProperty(
      props: SDL_PropertiesID,
      name: CString,
      value: CString
  ): Boolean = extern

  /** Set an additional alpha value used in blit operations.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_SetSurfaceAlphaMod(surface: Ptr[SDL_Surface], alpha: Uint8): Boolean =
    extern

  /** Set the blend mode used for blit operations.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_SetSurfaceBlendMode(
      surface: Ptr[SDL_Surface],
      blendMode: SDL_BlendMode
  ): Boolean = extern

  /** Set the clipping rectangle for a surface.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_SetSurfaceClipRect(
      surface: Ptr[SDL_Surface],
      rect: Ptr[SDL_Rect]
  ): Boolean = extern

  /** Set the color key (transparent pixel) in a surface.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_SetSurfaceColorKey(
      surface: Ptr[SDL_Surface],
      enabled: Boolean,
      key: Uint32
  ): Boolean = extern

  /** Set an additional color value multiplied into blit operations.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_SetSurfaceColorMod(
      surface: Ptr[SDL_Surface],
      r: Uint8,
      g: Uint8,
      b: Uint8
  ): Boolean = extern

  /** Set the colorspace used by a surface.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_SetSurfaceColorspace(
      surface: Ptr[SDL_Surface],
      colorspace: SDL_Colorspace
  ): Boolean = extern

  /** Set the palette used by a surface.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_SetSurfacePalette(
      surface: Ptr[SDL_Surface],
      palette: Ptr[SDL_Palette]
  ): Boolean = extern

  /** Set the RLE acceleration hint for a surface.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_SetSurfaceRLE(surface: Ptr[SDL_Surface], enabled: Boolean): Boolean =
    extern

  /** Set the current thread's value associated with a thread local storage ID.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_thread.h
    */
  def SDL_SetTLS(
      id: Ptr[SDL_TLSID],
      value: Ptr[Byte],
      destructor: SDL_TLSDestructorCallback
  ): Boolean = extern

  /** Set the area used to type Unicode text input.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_keyboard.h
    */
  def SDL_SetTextInputArea(
      window: Ptr[SDL_Window],
      rect: Ptr[SDL_Rect],
      cursor: CInt
  ): Boolean = extern

  /** Set an additional alpha value multiplied into render copy operations.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_SetTextureAlphaMod(texture: Ptr[SDL_Texture], alpha: Uint8): Boolean =
    extern

  /** Set an additional alpha value multiplied into render copy operations.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_SetTextureAlphaModFloat(
      texture: Ptr[SDL_Texture],
      alpha: Float
  ): Boolean = extern

  /** Set the blend mode for a texture, used by SDL_RenderTexture().
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_SetTextureBlendMode(
      texture: Ptr[SDL_Texture],
      blendMode: SDL_BlendMode
  ): Boolean = extern

  /** Set an additional color value multiplied into render copy operations.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_SetTextureColorMod(
      texture: Ptr[SDL_Texture],
      r: Uint8,
      g: Uint8,
      b: Uint8
  ): Boolean = extern

  /** Set an additional color value multiplied into render copy operations.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_SetTextureColorModFloat(
      texture: Ptr[SDL_Texture],
      r: Float,
      g: Float,
      b: Float
  ): Boolean = extern

  /** Set the scale mode used for texture scale operations.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_SetTextureScaleMode(
      texture: Ptr[SDL_Texture],
      scaleMode: SDL_ScaleMode
  ): Boolean = extern

  /** Set the window to always be above the others.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_SetWindowAlwaysOnTop(
      window: Ptr[SDL_Window],
      on_top: Boolean
  ): Boolean = extern

  /** Request that the aspect ratio of a window's client area be set.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_SetWindowAspectRatio(
      window: Ptr[SDL_Window],
      min_aspect: Float,
      max_aspect: Float
  ): Boolean = extern

  /** Set the border state of a window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_SetWindowBordered(
      window: Ptr[SDL_Window],
      bordered: Boolean
  ): Boolean = extern

  /** Set whether the window may have input focus.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_SetWindowFocusable(
      window: Ptr[SDL_Window],
      focusable: Boolean
  ): Boolean = extern

  /** Request that the window's fullscreen state be changed.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_SetWindowFullscreen(
      window: Ptr[SDL_Window],
      fullscreen: Boolean
  ): Boolean = extern

  /** Set the display mode to use when a window is visible and fullscreen.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_SetWindowFullscreenMode(
      window: Ptr[SDL_Window],
      mode: Ptr[SDL_DisplayMode]
  ): Boolean = extern

  /** Provide a callback that decides if a window region has special properties.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_SetWindowHitTest(
      window: Ptr[SDL_Window],
      callback: SDL_HitTest,
      callback_data: Ptr[Byte]
  ): Boolean = extern

  /** Set the icon for a window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_SetWindowIcon(
      window: Ptr[SDL_Window],
      icon: Ptr[SDL_Surface]
  ): Boolean = extern

  /** Set a window's keyboard grab mode.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_SetWindowKeyboardGrab(
      window: Ptr[SDL_Window],
      grabbed: Boolean
  ): Boolean = extern

  /** Set the maximum size of a window's client area.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_SetWindowMaximumSize(
      window: Ptr[SDL_Window],
      max_w: CInt,
      max_h: CInt
  ): Boolean = extern

  /** Set the minimum size of a window's client area.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_SetWindowMinimumSize(
      window: Ptr[SDL_Window],
      min_w: CInt,
      min_h: CInt
  ): Boolean = extern

  /** Toggle the state of the window as modal.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_SetWindowModal(window: Ptr[SDL_Window], modal: Boolean): Boolean =
    extern

  /** Set a window's mouse grab mode.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_SetWindowMouseGrab(
      window: Ptr[SDL_Window],
      grabbed: Boolean
  ): Boolean = extern

  /** Confines the cursor to the specified area of a window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_SetWindowMouseRect(
      window: Ptr[SDL_Window],
      rect: Ptr[SDL_Rect]
  ): Boolean = extern

  /** Set the opacity for a window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_SetWindowOpacity(window: Ptr[SDL_Window], opacity: Float): Boolean =
    extern

  /** Set the window as a child of a parent window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_SetWindowParent(
      window: Ptr[SDL_Window],
      parent: Ptr[SDL_Window]
  ): Boolean = extern

  /** Request that the window's position be set.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_SetWindowPosition(
      window: Ptr[SDL_Window],
      x: CInt,
      y: CInt
  ): Boolean = extern

  /** Set relative mouse mode for a window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mouse.h
    */
  def SDL_SetWindowRelativeMouseMode(
      window: Ptr[SDL_Window],
      enabled: Boolean
  ): Boolean = extern

  /** Set the user-resizable state of a window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_SetWindowResizable(
      window: Ptr[SDL_Window],
      resizable: Boolean
  ): Boolean = extern

  /** Set the shape of a transparent window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_SetWindowShape(
      window: Ptr[SDL_Window],
      shape: Ptr[SDL_Surface]
  ): Boolean = extern

  /** Request that the size of a window's client area be set.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_SetWindowSize(window: Ptr[SDL_Window], w: CInt, h: CInt): Boolean =
    extern

  /** Toggle VSync for the window surface.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_SetWindowSurfaceVSync(window: Ptr[SDL_Window], vsync: CInt): Boolean =
    extern

  /** Set the title of a window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_SetWindowTitle(window: Ptr[SDL_Window], title: CString): Boolean =
    extern

  /** Set a callback for every X11 event.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_system.h
    */
  def SDL_SetX11EventHook(
      callback: SDL_X11EventHook,
      userdata: Ptr[Byte]
  ): Unit = extern

  /** Return whether initialization should be done.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mutex.h
    */
  def SDL_ShouldInit(state: Ptr[SDL_InitState]): Boolean = extern

  /** Return whether cleanup should be done.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mutex.h
    */
  def SDL_ShouldQuit(state: Ptr[SDL_InitState]): Boolean = extern

  /** Show the cursor.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mouse.h
    */
  def SDL_ShowCursor(): Boolean = extern

  /** Create a modal message box.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_messagebox.h
    */
  def SDL_ShowMessageBox(
      messageboxdata: Ptr[SDL_MessageBoxData],
      buttonid: Ptr[CInt]
  ): Boolean = extern

  /** Displays a dialog that lets the user select a file on their filesystem.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_dialog.h
    */
  def SDL_ShowOpenFileDialog(
      callback: SDL_DialogFileCallback,
      userdata: Ptr[Byte],
      window: Ptr[SDL_Window],
      filters: Ptr[SDL_DialogFileFilter],
      nfilters: CInt,
      default_location: CString,
      allow_many: Boolean
  ): Unit = extern

  /** Displays a dialog that lets the user select a folder on their filesystem.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_dialog.h
    */
  def SDL_ShowOpenFolderDialog(
      callback: SDL_DialogFileCallback,
      userdata: Ptr[Byte],
      window: Ptr[SDL_Window],
      default_location: CString,
      allow_many: Boolean
  ): Unit = extern

  /** Displays a dialog that lets the user choose a new or existing file on
    * their filesystem.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_dialog.h
    */
  def SDL_ShowSaveFileDialog(
      callback: SDL_DialogFileCallback,
      userdata: Ptr[Byte],
      window: Ptr[SDL_Window],
      filters: Ptr[SDL_DialogFileFilter],
      nfilters: CInt,
      default_location: CString
  ): Unit = extern

  /** Display a simple modal message box.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_messagebox.h
    */
  def SDL_ShowSimpleMessageBox(
      flags: SDL_MessageBoxFlags,
      title: CString,
      message: CString,
      window: Ptr[SDL_Window]
  ): Boolean = extern

  /** Show a window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_ShowWindow(window: Ptr[SDL_Window]): Boolean = extern

  /** Display the system-level window menu.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_ShowWindowSystemMenu(
      window: Ptr[SDL_Window],
      x: CInt,
      y: CInt
  ): Boolean = extern

  /** Restart one of the threads that are waiting on the condition variable.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mutex.h
    */
  def SDL_SignalCondition(cond: Ptr[SDL_Condition]): Unit = extern

  /** Atomically increment a semaphore's value and wake waiting threads.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mutex.h
    */
  def SDL_SignalSemaphore(sem: Ptr[SDL_Semaphore]): Unit = extern

  /** Start accepting Unicode text input events in a window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_keyboard.h
    */
  def SDL_StartTextInput(window: Ptr[SDL_Window]): Boolean = extern

  /** Start accepting Unicode text input events in a window, with properties
    * describing the input.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_keyboard.h
    */
  def SDL_StartTextInputWithProperties(
      window: Ptr[SDL_Window],
      props: SDL_PropertiesID
  ): Boolean = extern

  /** Decode a UTF-8 string in reverse, one Unicode codepoint at a time.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_StepBackUTF8(start: CString, pstr: Ptr[CString]): Uint32 = extern

  /** Decode a UTF-8 string, one Unicode codepoint at a time.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_StepUTF8(pstr: Ptr[CString], pslen: Ptr[size_t]): Uint32 = extern

  /** Stop the haptic effect on its associated haptic device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  def SDL_StopHapticEffect(haptic: Ptr[SDL_Haptic], effect: CInt): Boolean =
    extern

  /** Stop all the currently playing effects on a haptic device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  def SDL_StopHapticEffects(haptic: Ptr[SDL_Haptic]): Boolean = extern

  /** Stop the simple rumble on a haptic device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  def SDL_StopHapticRumble(haptic: Ptr[SDL_Haptic]): Boolean = extern

  /** Stop receiving any text input events in a window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_keyboard.h
    */
  def SDL_StopTextInput(window: Ptr[SDL_Window]): Boolean = extern

  /** Checks if the storage container is ready to use.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_storage.h
    */
  def SDL_StorageReady(storage: Ptr[SDL_Storage]): Boolean = extern

  /** Submits a command buffer so its commands can be processed on the GPU.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_SubmitGPUCommandBuffer(
      command_buffer: Ptr[SDL_GPUCommandBuffer]
  ): Boolean = extern

  /** Submits a command buffer so its commands can be processed on the GPU, and
    * acquires a fence associated with the command buffer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_SubmitGPUCommandBufferAndAcquireFence(
      command_buffer: Ptr[SDL_GPUCommandBuffer]
  ): Ptr[SDL_GPUFence] = extern

  /** Return whether a surface has alternate versions available.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_SurfaceHasAlternateImages(surface: Ptr[SDL_Surface]): Boolean = extern

  /** Returns whether the surface has a color key.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_SurfaceHasColorKey(surface: Ptr[SDL_Surface]): Boolean = extern

  /** Returns whether the surface is RLE enabled.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_SurfaceHasRLE(surface: Ptr[SDL_Surface]): Boolean = extern

  /** Byte-swap a floating point number.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_endian.h
    */
  def SDL_SwapFloat(x: Float): Float = extern

  /** Block until any pending window state is finalized.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_SyncWindow(window: Ptr[SDL_Window]): Boolean = extern

  /** Determine the current read/write offset in an SDL_IOStream data stream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_TellIO(context: Ptr[SDL_IOStream]): Sint64 = extern

  /** Check whether or not Unicode text input events are enabled for a window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_keyboard.h
    */
  def SDL_TextInputActive(window: Ptr[SDL_Window]): Boolean = extern

  /** Converts a Windows FILETIME (100-nanosecond intervals since January 1,
    * 1601) to an SDL time.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_time.h
    */
  def SDL_TimeFromWindows(
      dwLowDateTime: Uint32,
      dwHighDateTime: Uint32
  ): SDL_Time = extern

  /** Converts an SDL_Time in nanoseconds since the epoch to a calendar time in
    * the SDL_DateTime format.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_time.h
    */
  def SDL_TimeToDateTime(
      ticks: SDL_Time,
      dt: Ptr[SDL_DateTime],
      localTime: Boolean
  ): Boolean = extern

  /** Converts an SDL time into a Windows FILETIME (100-nanosecond intervals
    * since January 1, 1601).
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_time.h
    */
  def SDL_TimeToWindows(
      ticks: SDL_Time,
      dwLowDateTime: Ptr[Uint32],
      dwHighDateTime: Ptr[Uint32]
  ): Unit = extern

  /** Try to lock a mutex without blocking.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mutex.h
    */
  def SDL_TryLockMutex(mutex: Ptr[SDL_Mutex]): Boolean = extern

  /** Try to lock a read/write lock _for reading_ without blocking.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mutex.h
    */
  def SDL_TryLockRWLockForReading(rwlock: Ptr[SDL_RWLock]): Boolean = extern

  /** Try to lock a read/write lock _for writing_ without blocking.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mutex.h
    */
  def SDL_TryLockRWLockForWriting(rwlock: Ptr[SDL_RWLock]): Boolean = extern

  /** Try to lock a spin lock by setting it to a non-zero value.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_atomic.h
    */
  def SDL_TryLockSpinlock(lock: Ptr[SDL_SpinLock]): Boolean = extern

  /** See if a semaphore has a positive value and decrement it if it does.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mutex.h
    */
  def SDL_TryWaitSemaphore(sem: Ptr[SDL_Semaphore]): Boolean = extern

  /** Convert a single Unicode codepoint to UTF-8.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_UCS4ToUTF8(codepoint: Uint32, dst: CString): CString = extern

  /** Unbind a single audio stream from its audio device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_UnbindAudioStream(stream: Ptr[SDL_AudioStream]): Unit = extern

  /** Unbind a list of audio streams from their audio devices.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_UnbindAudioStreams(
      streams: Ptr[Ptr[SDL_AudioStream]],
      num_streams: CInt
  ): Unit = extern

  /** Unload a shared object from memory.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_loadso.h
    */
  def SDL_UnloadObject(handle: Ptr[SDL_SharedObject]): Unit = extern

  /** Unlock an audio stream for serialized access.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_audio.h
    */
  def SDL_UnlockAudioStream(stream: Ptr[SDL_AudioStream]): Boolean = extern

  /** Unlocking for atomic access to the joystick API.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_UnlockJoysticks(): Unit = extern

  /** Unlock the mutex.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mutex.h
    */
  def SDL_UnlockMutex(mutex: Ptr[SDL_Mutex]): Unit = extern

  /** Unlock a group of properties.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_properties.h
    */
  def SDL_UnlockProperties(props: SDL_PropertiesID): Unit = extern

  /** Unlock the read/write lock.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mutex.h
    */
  def SDL_UnlockRWLock(rwlock: Ptr[SDL_RWLock]): Unit = extern

  /** Unlock a spin lock by setting it to 0.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_atomic.h
    */
  def SDL_UnlockSpinlock(lock: Ptr[SDL_SpinLock]): Unit = extern

  /** Release a surface after directly accessing the pixels.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_UnlockSurface(surface: Ptr[SDL_Surface]): Unit = extern

  /** Unlock a texture, uploading the changes to video memory, if needed.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_UnlockTexture(texture: Ptr[SDL_Texture]): Unit = extern

  /** Unmaps a previously mapped transfer buffer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_UnmapGPUTransferBuffer(
      device: Ptr[SDL_GPUDevice],
      transfer_buffer: Ptr[SDL_GPUTransferBuffer]
  ): Unit = extern

  /** Clear a variable from the environment.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_UnsetEnvironmentVariable(
      env: Ptr[SDL_Environment],
      name: CString
  ): Boolean = extern

  /** Manually pump gamepad updates if not using the loop.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_UpdateGamepads(): Unit = extern

  /** Update the properties of an effect.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_haptic.h
    */
  def SDL_UpdateHapticEffect(
      haptic: Ptr[SDL_Haptic],
      effect: CInt,
      data: Ptr[SDL_HapticEffect]
  ): Boolean = extern

  /** Update the current state of the open joysticks.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_UpdateJoysticks(): Unit = extern

  /** Update a rectangle within a planar NV12 or NV21 texture with new pixels.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_UpdateNVTexture(
      texture: Ptr[SDL_Texture],
      rect: Ptr[SDL_Rect],
      Yplane: Ptr[Uint8],
      Ypitch: CInt,
      UVplane: Ptr[Uint8],
      UVpitch: CInt
  ): Boolean = extern

  /** Update the current state of the open sensors.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_sensor.h
    */
  def SDL_UpdateSensors(): Unit = extern

  /** Update the given texture rectangle with new pixel data.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_UpdateTexture(
      texture: Ptr[SDL_Texture],
      rect: Ptr[SDL_Rect],
      pixels: Ptr[Byte],
      pitch: CInt
  ): Boolean = extern

  /** Copy the window surface to the screen.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_UpdateWindowSurface(window: Ptr[SDL_Window]): Boolean = extern

  /** Copy areas of the window surface to the screen.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_UpdateWindowSurfaceRects(
      window: Ptr[SDL_Window],
      rects: Ptr[SDL_Rect],
      numrects: CInt
  ): Boolean = extern

  /** Update a rectangle within a planar YV12 or IYUV texture with new pixel
    * data.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_render.h
    */
  def SDL_UpdateYUVTexture(
      texture: Ptr[SDL_Texture],
      rect: Ptr[SDL_Rect],
      Yplane: Ptr[Uint8],
      Ypitch: CInt,
      Uplane: Ptr[Uint8],
      Upitch: CInt,
      Vplane: Ptr[Uint8],
      Vpitch: CInt
  ): Boolean = extern

  /** Uploads data from a transfer buffer to a buffer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_UploadToGPUBuffer(
      copy_pass: Ptr[SDL_GPUCopyPass],
      source: Ptr[SDL_GPUTransferBufferLocation],
      destination: Ptr[SDL_GPUBufferRegion],
      cycle: Boolean
  ): Unit = extern

  /** Uploads data from a transfer buffer to a texture.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_UploadToGPUTexture(
      copy_pass: Ptr[SDL_GPUCopyPass],
      source: Ptr[SDL_GPUTextureTransferInfo],
      destination: Ptr[SDL_GPUTextureRegion],
      cycle: Boolean
  ): Unit = extern

  /** Wait until a condition variable is signaled.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mutex.h
    */
  def SDL_WaitCondition(cond: Ptr[SDL_Condition], mutex: Ptr[SDL_Mutex]): Unit =
    extern

  /** Wait until a condition variable is signaled or a certain time has passed.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mutex.h
    */
  def SDL_WaitConditionTimeout(
      cond: Ptr[SDL_Condition],
      mutex: Ptr[SDL_Mutex],
      timeoutMS: Sint32
  ): Boolean = extern

  /** Wait indefinitely for the next available event.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  def SDL_WaitEvent(event: Ptr[SDL_Event]): Boolean = extern

  /** Wait until the specified timeout (in milliseconds) for the next available
    * event.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_events.h
    */
  def SDL_WaitEventTimeout(event: Ptr[SDL_Event], timeoutMS: Sint32): Boolean =
    extern

  /** Blocks the thread until the given fences are signaled.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_WaitForGPUFences(
      device: Ptr[SDL_GPUDevice],
      wait_all: Boolean,
      fences: Ptr[Ptr[SDL_GPUFence]],
      num_fences: Uint32
  ): Boolean = extern

  /** Blocks the thread until the GPU is completely idle.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_WaitForGPUIdle(device: Ptr[SDL_GPUDevice]): Boolean = extern

  /** Wait for a process to finish.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_process.h
    */
  def SDL_WaitProcess(
      process: Ptr[SDL_Process],
      block: Boolean,
      exitcode: Ptr[CInt]
  ): Boolean = extern

  /** Wait until a semaphore has a positive value and then decrements it.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mutex.h
    */
  def SDL_WaitSemaphore(sem: Ptr[SDL_Semaphore]): Unit = extern

  /** Wait until a semaphore has a positive value and then decrements it.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mutex.h
    */
  def SDL_WaitSemaphoreTimeout(
      sem: Ptr[SDL_Semaphore],
      timeoutMS: Sint32
  ): Boolean = extern

  /** Wait for a thread to finish.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_thread.h
    */
  def SDL_WaitThread(thread: Ptr[SDL_Thread], status: Ptr[CInt]): Unit = extern

  /** Move the mouse to the given position in global screen space.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mouse.h
    */
  def SDL_WarpMouseGlobal(x: Float, y: Float): Boolean = extern

  /** Move the mouse cursor to the given position within the window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_mouse.h
    */
  def SDL_WarpMouseInWindow(window: Ptr[SDL_Window], x: Float, y: Float): Unit =
    extern

  /** Get a mask of the specified subsystems which are currently initialized.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_init.h
    */
  def SDL_WasInit(flags: SDL_InitFlags): SDL_InitFlags = extern

  /** Return whether the window has a surface associated with it.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_video.h
    */
  def SDL_WindowHasSurface(window: Ptr[SDL_Window]): Boolean = extern

  /** Determines whether a presentation mode is supported by the window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_WindowSupportsGPUPresentMode(
      device: Ptr[SDL_GPUDevice],
      window: Ptr[SDL_Window],
      present_mode: SDL_GPUPresentMode
  ): Boolean = extern

  /** Determines whether a swapchain composition is supported by the window.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_WindowSupportsGPUSwapchainComposition(
      device: Ptr[SDL_GPUDevice],
      window: Ptr[SDL_Window],
      swapchain_composition: SDL_GPUSwapchainComposition
  ): Boolean = extern

  /** Write to an SDL_IOStream data stream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_WriteIO(
      context: Ptr[SDL_IOStream],
      ptr: Ptr[Byte],
      size: size_t
  ): size_t = extern

  /** Use this function to write 16 bits in native format to an SDL_IOStream as
    * big-endian data.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_WriteS16BE(dst: Ptr[SDL_IOStream], value: Sint16): Boolean = extern

  /** Use this function to write 16 bits in native format to an SDL_IOStream as
    * little-endian data.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_WriteS16LE(dst: Ptr[SDL_IOStream], value: Sint16): Boolean = extern

  /** Use this function to write 32 bits in native format to an SDL_IOStream as
    * big-endian data.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_WriteS32BE(dst: Ptr[SDL_IOStream], value: Sint32): Boolean = extern

  /** Use this function to write 32 bits in native format to an SDL_IOStream as
    * little-endian data.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_WriteS32LE(dst: Ptr[SDL_IOStream], value: Sint32): Boolean = extern

  /** Use this function to write 64 bits in native format to an SDL_IOStream as
    * big-endian data.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_WriteS64BE(dst: Ptr[SDL_IOStream], value: Sint64): Boolean = extern

  /** Use this function to write 64 bits in native format to an SDL_IOStream as
    * little-endian data.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_WriteS64LE(dst: Ptr[SDL_IOStream], value: Sint64): Boolean = extern

  /** Use this function to write a signed byte to an SDL_IOStream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_WriteS8(dst: Ptr[SDL_IOStream], value: Sint8): Boolean = extern

  /** Synchronously write a file from client memory into a storage container.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_storage.h
    */
  def SDL_WriteStorageFile(
      storage: Ptr[SDL_Storage],
      path: CString,
      source: Ptr[Byte],
      length: Uint64
  ): Boolean = extern

  /** Writes a single pixel to a surface.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_WriteSurfacePixel(
      surface: Ptr[SDL_Surface],
      x: CInt,
      y: CInt,
      r: Uint8,
      g: Uint8,
      b: Uint8,
      a: Uint8
  ): Boolean = extern

  /** Writes a single pixel to a surface.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_surface.h
    */
  def SDL_WriteSurfacePixelFloat(
      surface: Ptr[SDL_Surface],
      x: CInt,
      y: CInt,
      r: Float,
      g: Float,
      b: Float,
      a: Float
  ): Boolean = extern

  /** Use this function to write 16 bits in native format to an SDL_IOStream as
    * big-endian data.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_WriteU16BE(dst: Ptr[SDL_IOStream], value: Uint16): Boolean = extern

  /** Use this function to write 16 bits in native format to an SDL_IOStream as
    * little-endian data.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_WriteU16LE(dst: Ptr[SDL_IOStream], value: Uint16): Boolean = extern

  /** Use this function to write 32 bits in native format to an SDL_IOStream as
    * big-endian data.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_WriteU32BE(dst: Ptr[SDL_IOStream], value: Uint32): Boolean = extern

  /** Use this function to write 32 bits in native format to an SDL_IOStream as
    * little-endian data.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_WriteU32LE(dst: Ptr[SDL_IOStream], value: Uint32): Boolean = extern

  /** Use this function to write 64 bits in native format to an SDL_IOStream as
    * big-endian data.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_WriteU64BE(dst: Ptr[SDL_IOStream], value: Uint64): Boolean = extern

  /** Use this function to write 64 bits in native format to an SDL_IOStream as
    * little-endian data.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_WriteU64LE(dst: Ptr[SDL_IOStream], value: Uint64): Boolean = extern

  /** Use this function to write a byte to an SDL_IOStream.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_iostream.h
    */
  def SDL_WriteU8(dst: Ptr[SDL_IOStream], value: Uint8): Boolean = extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_abs(x: CInt): CInt = extern

  /** Compute the arc cosine of `x`.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_acos(x: Double): Double = extern

  /** Compute the arc cosine of `x`.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_acosf(x: Float): Float = extern

  /** Allocate memory aligned to a specific alignment.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_aligned_alloc(alignment: size_t, size: size_t): Ptr[Byte] = extern

  /** Free memory allocated by SDL_aligned_alloc().
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_aligned_free(mem: Ptr[Byte]): Unit = extern

  /** Compute the arc sine of `x`.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_asin(x: Double): Double = extern

  /** Compute the arc sine of `x`.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_asinf(x: Float): Float = extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_asprintf(strp: Ptr[CString], fmt: CString, rest: Any*): CInt = extern

  /** Compute the arc tangent of `x`.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_atan(x: Double): Double = extern

  /** Compute the arc tangent of `y / x`, using the signs of x and y to adjust
    * the result's quadrant.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_atan2(y: Double, x: Double): Double = extern

  /** Compute the arc tangent of `y / x`, using the signs of x and y to adjust
    * the result's quadrant.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_atan2f(y: Float, x: Float): Float = extern

  /** Compute the arc tangent of `x`.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_atanf(x: Float): Float = extern

  /** Parse a `double` from a string.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_atof(str: CString): Double = extern

  /** Parse an `int` from a string.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_atoi(str: CString): CInt = extern

  /** Perform a binary search on a previously sorted array.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_bsearch(
      key: Ptr[Byte],
      base: Ptr[Byte],
      nmemb: size_t,
      size: size_t,
      compare: SDL_CompareCallback
  ): Ptr[Byte] = extern

  /** Perform a binary search on a previously sorted array, passing a userdata
    * pointer to the compare function.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_bsearch_r(
      key: Ptr[Byte],
      base: Ptr[Byte],
      nmemb: size_t,
      size: size_t,
      compare: SDL_CompareCallback_r,
      userdata: Ptr[Byte]
  ): Ptr[Byte] = extern

  /** Allocate a zero-initialized array.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_calloc(nmemb: size_t, size: size_t): Ptr[Byte] = extern

  /** Compute the ceiling of `x`.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_ceil(x: Double): Double = extern

  /** Compute the ceiling of `x`.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_ceilf(x: Float): Float = extern

  /** Copy the sign of one floating-point value to another.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_copysign(x: Double, y: Double): Double = extern

  /** Copy the sign of one floating-point value to another.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_copysignf(x: Float, y: Float): Float = extern

  /** Compute the cosine of `x`.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_cos(x: Double): Double = extern

  /** Compute the cosine of `x`.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_cosf(x: Float): Float = extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_crc16(crc: Uint16, data: Ptr[Byte], len: size_t): Uint16 = extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_crc32(crc: Uint32, data: Ptr[Byte], len: size_t): Uint32 = extern

  /** Compute the exponential of `x`.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_exp(x: Double): Double = extern

  /** Compute the exponential of `x`.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_expf(x: Float): Float = extern

  /** Compute the absolute value of `x`
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_fabs(x: Double): Double = extern

  /** Compute the absolute value of `x`
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_fabsf(x: Float): Float = extern

  /** Compute the floor of `x`.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_floor(x: Double): Double = extern

  /** Compute the floor of `x`.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_floorf(x: Float): Float = extern

  /** Return the floating-point remainder of `x / y`
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_fmod(x: Double, y: Double): Double = extern

  /** Return the floating-point remainder of `x / y`
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_fmodf(x: Float, y: Float): Float = extern

  /** Free allocated memory.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_free(mem: Ptr[Byte]): Unit = extern

  /** Get the value of a variable in the environment.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_getenv(name: CString): CString = extern

  /** Get the value of a variable in the environment.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_getenv_unsafe(name: CString): CString = extern

  /** Start or stop a BLE scan on iOS and tvOS to pair Steam Controllers.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_hidapi.h
    */
  def SDL_hid_ble_scan(active: Boolean): Unit = extern

  /** Close a HID device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_hidapi.h
    */
  def SDL_hid_close(dev: Ptr[SDL_hid_device]): CInt = extern

  /** Check to see if devices may have been added or removed.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_hidapi.h
    */
  def SDL_hid_device_change_count(): Uint32 = extern

  /** Enumerate the HID Devices.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_hidapi.h
    */
  def SDL_hid_enumerate(
      vendor_id: CUnsignedShort,
      product_id: CUnsignedShort
  ): Ptr[SDL_hid_device_info] = extern

  /** Finalize the HIDAPI library.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_hidapi.h
    */
  def SDL_hid_exit(): CInt = extern

  /** Free an enumeration linked list.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_hidapi.h
    */
  def SDL_hid_free_enumeration(devs: Ptr[SDL_hid_device_info]): Unit = extern

  /** Get the device info from a HID device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_hidapi.h
    */
  def SDL_hid_get_device_info(
      dev: Ptr[SDL_hid_device]
  ): Ptr[SDL_hid_device_info] = extern

  /** Get a feature report from a HID device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_hidapi.h
    */
  def SDL_hid_get_feature_report(
      dev: Ptr[SDL_hid_device],
      data: Ptr[CUnsignedChar],
      length: size_t
  ): CInt = extern

  /** Get a string from a HID device, based on its string index.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_hidapi.h
    */
  def SDL_hid_get_indexed_string(
      dev: Ptr[SDL_hid_device],
      string_index: CInt,
      string: Ptr[wchar_t],
      maxlen: size_t
  ): CInt = extern

  /** Get an input report from a HID device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_hidapi.h
    */
  def SDL_hid_get_input_report(
      dev: Ptr[SDL_hid_device],
      data: Ptr[CUnsignedChar],
      length: size_t
  ): CInt = extern

  /** Get The Manufacturer String from a HID device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_hidapi.h
    */
  def SDL_hid_get_manufacturer_string(
      dev: Ptr[SDL_hid_device],
      string: Ptr[wchar_t],
      maxlen: size_t
  ): CInt = extern

  /** Get The Product String from a HID device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_hidapi.h
    */
  def SDL_hid_get_product_string(
      dev: Ptr[SDL_hid_device],
      string: Ptr[wchar_t],
      maxlen: size_t
  ): CInt = extern

  /** Get a report descriptor from a HID device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_hidapi.h
    */
  def SDL_hid_get_report_descriptor(
      dev: Ptr[SDL_hid_device],
      buf: Ptr[CUnsignedChar],
      buf_size: size_t
  ): CInt = extern

  /** Get The Serial Number String from a HID device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_hidapi.h
    */
  def SDL_hid_get_serial_number_string(
      dev: Ptr[SDL_hid_device],
      string: Ptr[wchar_t],
      maxlen: size_t
  ): CInt = extern

  /** Initialize the HIDAPI library.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_hidapi.h
    */
  def SDL_hid_init(): CInt = extern

  /** Open a HID device using a Vendor ID (VID), Product ID (PID) and optionally
    * a serial number.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_hidapi.h
    */
  def SDL_hid_open(
      vendor_id: CUnsignedShort,
      product_id: CUnsignedShort,
      serial_number: Ptr[wchar_t]
  ): Ptr[SDL_hid_device] = extern

  /** Open a HID device by its path name.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_hidapi.h
    */
  def SDL_hid_open_path(path: CString): Ptr[SDL_hid_device] = extern

  /** Read an Input report from a HID device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_hidapi.h
    */
  def SDL_hid_read(
      dev: Ptr[SDL_hid_device],
      data: Ptr[CUnsignedChar],
      length: size_t
  ): CInt = extern

  /** Read an Input report from a HID device with timeout.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_hidapi.h
    */
  def SDL_hid_read_timeout(
      dev: Ptr[SDL_hid_device],
      data: Ptr[CUnsignedChar],
      length: size_t,
      milliseconds: CInt
  ): CInt = extern

  /** Send a Feature report to the device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_hidapi.h
    */
  def SDL_hid_send_feature_report(
      dev: Ptr[SDL_hid_device],
      data: Ptr[CUnsignedChar],
      length: size_t
  ): CInt = extern

  /** Set the device handle to be non-blocking.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_hidapi.h
    */
  def SDL_hid_set_nonblocking(dev: Ptr[SDL_hid_device], nonblock: CInt): CInt =
    extern

  /** Write an Output report to a HID device.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_hidapi.h
    */
  def SDL_hid_write(
      dev: Ptr[SDL_hid_device],
      data: Ptr[CUnsignedChar],
      length: size_t
  ): CInt = extern

  /** This function converts text between encodings, reading from and writing to
    * a buffer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_iconv(
      cd: SDL_iconv_t,
      inbuf: Ptr[CString],
      inbytesleft: Ptr[size_t],
      outbuf: Ptr[CString],
      outbytesleft: Ptr[size_t]
  ): size_t = extern

  /** This function frees a context used for character set conversion.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_iconv_close(cd: SDL_iconv_t): CInt = extern

  /** This function allocates a context for the specified character set
    * conversion.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_iconv_open(tocode: CString, fromcode: CString): SDL_iconv_t = extern

  /** Helper function to convert a string's encoding in one call.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_iconv_string(
      tocode: CString,
      fromcode: CString,
      inbuf: CString,
      inbytesleft: size_t
  ): CString = extern

  /** Query if a character is alphabetic (a letter) or a number.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_isalnum(x: CInt): CInt = extern

  /** Query if a character is alphabetic (a letter).
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_isalpha(x: CInt): CInt = extern

  /** Report if a character is blank (a space or tab).
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_isblank(x: CInt): CInt = extern

  /** Report if a character is a control character.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_iscntrl(x: CInt): CInt = extern

  /** Report if a character is a numeric digit.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_isdigit(x: CInt): CInt = extern

  /** Report if a character is any "printable" except space.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_isgraph(x: CInt): CInt = extern

  /** Return whether the value is infinity.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_isinf(x: Double): CInt = extern

  /** Return whether the value is infinity.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_isinff(x: Float): CInt = extern

  /** Report if a character is lower case.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_islower(x: CInt): CInt = extern

  /** Return whether the value is NaN.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_isnan(x: Double): CInt = extern

  /** Return whether the value is NaN.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_isnanf(x: Float): CInt = extern

  /** Report if a character is "printable".
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_isprint(x: CInt): CInt = extern

  /** Report if a character is a punctuation mark.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_ispunct(x: CInt): CInt = extern

  /** Report if a character is whitespace.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_isspace(x: CInt): CInt = extern

  /** Report if a character is upper case.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_isupper(x: CInt): CInt = extern

  /** Report if a character is a hexadecimal digit.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_isxdigit(x: CInt): CInt = extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_itoa(value: CInt, str: CString, radix: CInt): CString = extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_lltoa(value: CLongLong, str: CString, radix: CInt): CString = extern

  /** Compute the natural logarithm of `x`.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_log(x: Double): Double = extern

  /** Compute the base-10 logarithm of `x`.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_log10(x: Double): Double = extern

  /** Compute the base-10 logarithm of `x`.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_log10f(x: Float): Float = extern

  /** Compute the natural logarithm of `x`.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_logf(x: Float): Float = extern

  /** Round `x` to the nearest integer representable as a long
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_lround(x: Double): CLongInt = extern

  /** Round `x` to the nearest integer representable as a long
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_lroundf(x: Float): CLongInt = extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_ltoa(value: CLongInt, str: CString, radix: CInt): CString = extern

  /** Allocate uninitialized memory.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_malloc(size: size_t): Ptr[Byte] = extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_memcmp(s1: Ptr[Byte], s2: Ptr[Byte], len: size_t): CInt = extern

  /** Copy non-overlapping memory.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_memcpy(dst: Ptr[Byte], src: Ptr[Byte], len: size_t): Ptr[Byte] =
    extern

  /** Copy memory.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_memmove(dst: Ptr[Byte], src: Ptr[Byte], len: size_t): Ptr[Byte] =
    extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_memset(dst: Ptr[Byte], c: CInt, len: size_t): Ptr[Byte] = extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_memset4(dst: Ptr[Byte], `val`: Uint32, dwords: size_t): Ptr[Byte] =
    extern

  /** Split `x` into integer and fractional parts
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_modf(x: Double, y: Ptr[Double]): Double = extern

  /** Split `x` into integer and fractional parts
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_modff(x: Float, y: Ptr[Float]): Float = extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_murmur3_32(data: Ptr[Byte], len: size_t, seed: Uint32): Uint32 =
    extern

  /** Raise `x` to the power `y`
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_pow(x: Double, y: Double): Double = extern

  /** Raise `x` to the power `y`
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_powf(x: Float, y: Float): Float = extern

  /** Sort an array.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_qsort(
      base: Ptr[Byte],
      nmemb: size_t,
      size: size_t,
      compare: SDL_CompareCallback
  ): Unit = extern

  /** Sort an array, passing a userdata pointer to the compare function.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_qsort_r(
      base: Ptr[Byte],
      nmemb: size_t,
      size: size_t,
      compare: SDL_CompareCallback_r,
      userdata: Ptr[Byte]
  ): Unit = extern

  /** Generate a pseudo-random number less than n for positive n
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_rand(n: Sint32): Sint32 = extern

  /** Generate 32 pseudo-random bits.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_rand_bits(): Uint32 = extern

  /** Generate 32 pseudo-random bits.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_rand_bits_r(state: Ptr[Uint64]): Uint32 = extern

  /** Generate a pseudo-random number less than n for positive n
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_rand_r(state: Ptr[Uint64], n: Sint32): Sint32 = extern

  /** Generate a uniform pseudo-random floating point number less than 1.0
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_randf(): Float = extern

  /** Generate a uniform pseudo-random floating point number less than 1.0
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_randf_r(state: Ptr[Uint64]): Float = extern

  /** Change the size of allocated memory.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_realloc(mem: Ptr[Byte], size: size_t): Ptr[Byte] = extern

  /** Round `x` to the nearest integer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_round(x: Double): Double = extern

  /** Round `x` to the nearest integer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_roundf(x: Float): Float = extern

  /** Scale `x` by an integer power of two.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_scalbn(x: Double, n: CInt): Double = extern

  /** Scale `x` by an integer power of two.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_scalbnf(x: Float, n: CInt): Float = extern

  /** Set the value of a variable in the environment.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_setenv_unsafe(name: CString, value: CString, overwrite: CInt): CInt =
    extern

  /** Compute the sine of `x`.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_sin(x: Double): Double = extern

  /** Compute the sine of `x`.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_sinf(x: Float): Float = extern

  /** Add two integers, checking for overflow.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_size_add_check_overflow(
      a: size_t,
      b: size_t,
      ret: Ptr[size_t]
  ): Boolean = extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_size_add_check_overflow_builtin(
      a: size_t,
      b: size_t,
      ret: Ptr[size_t]
  ): Boolean = extern

  /** Multiply two integers, checking for overflow.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_size_mul_check_overflow(
      a: size_t,
      b: size_t,
      ret: Ptr[size_t]
  ): Boolean = extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_size_mul_check_overflow_builtin(
      a: size_t,
      b: size_t,
      ret: Ptr[size_t]
  ): Boolean = extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_snprintf(
      text: CString,
      maxlen: size_t,
      fmt: CString,
      rest: Any*
  ): CInt = extern

  /** Compute the square root of `x`.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_sqrt(x: Double): Double = extern

  /** Compute the square root of `x`.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_sqrtf(x: Float): Float = extern

  /** Seeds the pseudo-random number generator.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_srand(seed: Uint64): Unit = extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_sscanf(text: CString, fmt: CString, rest: Any*): CInt = extern

  /** Compare two null-terminated UTF-8 strings, case-insensitively.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_strcasecmp(str1: CString, str2: CString): CInt = extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_strcasestr(haystack: CString, needle: CString): CString = extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_strchr(str: CString, c: CInt): CString = extern

  /** Compare two null-terminated UTF-8 strings.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_strcmp(str1: CString, str2: CString): CInt = extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_strdup(str: CString): CString = extern

  /** Concatenate strings.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_strlcat(dst: CString, src: CString, maxlen: size_t): size_t = extern

  /** Copy a string.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_strlcpy(dst: CString, src: CString, maxlen: size_t): size_t = extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_strlen(str: CString): size_t = extern

  /** Convert a string to lowercase.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_strlwr(str: CString): CString = extern

  /** Compare two UTF-8 strings, case-insensitively, up to a number of bytes.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_strncasecmp(str1: CString, str2: CString, maxlen: size_t): CInt =
    extern

  /** Compare two UTF-8 strings up to a number of bytes.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_strncmp(str1: CString, str2: CString, maxlen: size_t): CInt = extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_strndup(str: CString, maxlen: size_t): CString = extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_strnlen(str: CString, maxlen: size_t): size_t = extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_strnstr(haystack: CString, needle: CString, maxlen: size_t): CString =
    extern

  /** Searches a string for the first occurence of any character contained in a
    * breakset, and returns a pointer from the string to that character.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_strpbrk(str: CString, breakset: CString): CString = extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_strrchr(str: CString, c: CInt): CString = extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_strrev(str: CString): CString = extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_strstr(haystack: CString, needle: CString): CString = extern

  /** Parse a `double` from a string.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_strtod(str: CString, endp: Ptr[CString]): Double = extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_strtok_r(s1: CString, s2: CString, saveptr: Ptr[CString]): CString =
    extern

  /** Parse a `long` from a string.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_strtol(str: CString, endp: Ptr[CString], base: CInt): CLongInt =
    extern

  /** Parse a `long long` from a string.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_strtoll(str: CString, endp: Ptr[CString], base: CInt): CLongLong =
    extern

  /** Parse an `unsigned long` from a string.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_strtoul(
      str: CString,
      endp: Ptr[CString],
      base: CInt
  ): CUnsignedLongInt = extern

  /** Parse an `unsigned long long` from a string.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_strtoull(
      str: CString,
      endp: Ptr[CString],
      base: CInt
  ): CUnsignedLongLong = extern

  /** Convert a string to uppercase.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_strupr(str: CString): CString = extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_swprintf(
      text: Ptr[wchar_t],
      maxlen: size_t,
      fmt: Ptr[wchar_t],
      rest: Any*
  ): CInt = extern

  /** Compute the tangent of `x`.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_tan(x: Double): Double = extern

  /** Compute the tangent of `x`.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_tanf(x: Float): Float = extern

  /** Convert low-ASCII English letters to lowercase.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_tolower(x: CInt): CInt = extern

  /** Convert low-ASCII English letters to uppercase.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_toupper(x: CInt): CInt = extern

  /** Truncate `x` to an integer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_trunc(x: Double): Double = extern

  /** Truncate `x` to an integer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_truncf(x: Float): Float = extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_uitoa(value: CUnsignedInt, str: CString, radix: CInt): CString =
    extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_ulltoa(value: CUnsignedLongLong, str: CString, radix: CInt): CString =
    extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_ultoa(value: CUnsignedLongInt, str: CString, radix: CInt): CString =
    extern

  /** Clear a variable from the environment.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_unsetenv_unsafe(name: CString): CInt = extern

  /** Copy an UTF-8 string.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_utf8strlcpy(dst: CString, src: CString, dst_bytes: size_t): size_t =
    extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_utf8strlen(str: CString): size_t = extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_utf8strnlen(str: CString, bytes: size_t): size_t = extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_vasprintf(strp: Ptr[CString], fmt: CString, ap: va_list): CInt =
    extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_vsnprintf(
      text: CString,
      maxlen: size_t,
      fmt: CString,
      ap: va_list
  ): CInt = extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_vsscanf(text: CString, fmt: CString, ap: va_list): CInt = extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_vswprintf(
      text: Ptr[wchar_t],
      maxlen: size_t,
      fmt: Ptr[wchar_t],
      ap: va_list
  ): CInt = extern

  /** Compare two null-terminated wide strings, case-insensitively.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_wcscasecmp(str1: Ptr[wchar_t], str2: Ptr[wchar_t]): CInt = extern

  /** Compare two null-terminated wide strings.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_wcscmp(str1: Ptr[wchar_t], str2: Ptr[wchar_t]): CInt = extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_wcsdup(wstr: Ptr[wchar_t]): Ptr[wchar_t] = extern

  /** Concatenate wide strings.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_wcslcat(
      dst: Ptr[wchar_t],
      src: Ptr[wchar_t],
      maxlen: size_t
  ): size_t = extern

  /** Copy a wide string.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_wcslcpy(
      dst: Ptr[wchar_t],
      src: Ptr[wchar_t],
      maxlen: size_t
  ): size_t = extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_wcslen(wstr: Ptr[wchar_t]): size_t = extern

  /** Compare two wide strings, case-insensitively, up to a number of wchar_t.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_wcsncasecmp(
      str1: Ptr[wchar_t],
      str2: Ptr[wchar_t],
      maxlen: size_t
  ): CInt = extern

  /** Compare two wide strings up to a number of wchar_t values.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_wcsncmp(
      str1: Ptr[wchar_t],
      str2: Ptr[wchar_t],
      maxlen: size_t
  ): CInt = extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_wcsnlen(wstr: Ptr[wchar_t], maxlen: size_t): size_t = extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_wcsnstr(
      haystack: Ptr[wchar_t],
      needle: Ptr[wchar_t],
      maxlen: size_t
  ): Ptr[wchar_t] = extern

  /** [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_wcsstr(haystack: Ptr[wchar_t], needle: Ptr[wchar_t]): Ptr[wchar_t] =
    extern

  /** Parse a `long` from a wide string.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_stdinc.h
    */
  def SDL_wcstol(
      str: Ptr[wchar_t],
      endp: Ptr[Ptr[wchar_t]],
      base: CInt
  ): CLongInt = extern

  private[sdl3] def __sn_wrap_sdl3_SDL_GUIDToString(
      guid: Ptr[SDL_GUID],
      pszGUID: CString,
      cbGUID: CInt
  ): Unit = extern

  private[sdl3] def __sn_wrap_sdl3_SDL_GetGamepadGUIDForID(
      instance_id: SDL_JoystickID,
      __return: Ptr[SDL_GUID]
  ): Unit = extern

  private[sdl3] def __sn_wrap_sdl3_SDL_GetGamepadMappingForGUID(
      guid: Ptr[SDL_GUID]
  ): CString = extern

  private[sdl3] def __sn_wrap_sdl3_SDL_GetJoystickGUID(
      joystick: Ptr[SDL_Joystick],
      __return: Ptr[SDL_GUID]
  ): Unit = extern

  private[sdl3] def __sn_wrap_sdl3_SDL_GetJoystickGUIDForID(
      instance_id: SDL_JoystickID,
      __return: Ptr[SDL_GUID]
  ): Unit = extern

  private[sdl3] def __sn_wrap_sdl3_SDL_GetJoystickGUIDInfo(
      guid: Ptr[SDL_GUID],
      vendor: Ptr[Uint16],
      product: Ptr[Uint16],
      version: Ptr[Uint16],
      crc16: Ptr[Uint16]
  ): Unit = extern

  private[sdl3] def __sn_wrap_sdl3_SDL_SetGPUBlendConstants(
      render_pass: Ptr[SDL_GPURenderPass],
      blend_constants: Ptr[SDL_FColor]
  ): Unit = extern

  private[sdl3] def __sn_wrap_sdl3_SDL_StringToGUID(
      pchGUID: CString,
      __return: Ptr[SDL_GUID]
  ): Unit = extern
end extern_functions

object functions:
  import _root_.sdl3.enumerations.*
  import _root_.sdl3.predef.*
  import _root_.sdl3.aliases.*
  import _root_.sdl3.structs.*
  import _root_.sdl3.unions.*
  import extern_functions.*
  export extern_functions.*

  /** Get an ASCII string representation for a given SDL_GUID.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_guid.h
    */
  def SDL_GUIDToString(
      guid: Ptr[SDL_GUID],
      pszGUID: CString,
      cbGUID: CInt
  ): Unit =
    __sn_wrap_sdl3_SDL_GUIDToString(guid, pszGUID, cbGUID)

  /** Get an ASCII string representation for a given SDL_GUID.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_guid.h
    */
  def SDL_GUIDToString(guid: SDL_GUID, pszGUID: CString, cbGUID: CInt)(using
      Zone
  ): Unit =
    val __ptr_0: Ptr[SDL_GUID] = alloc[SDL_GUID](1)
    !(__ptr_0 + 0) = guid
    __sn_wrap_sdl3_SDL_GUIDToString((__ptr_0 + 0), pszGUID, cbGUID)
  end SDL_GUIDToString

  /** Get the implementation-dependent GUID of a gamepad.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadGUIDForID(instance_id: SDL_JoystickID)(
      __return: Ptr[SDL_GUID]
  ): Unit =
    __sn_wrap_sdl3_SDL_GetGamepadGUIDForID(instance_id, __return)

  /** Get the implementation-dependent GUID of a gamepad.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadGUIDForID(instance_id: SDL_JoystickID)(using
      Zone
  ): SDL_GUID =
    val __ptr_0: Ptr[SDL_GUID] = alloc[SDL_GUID](1)
    __sn_wrap_sdl3_SDL_GetGamepadGUIDForID(instance_id, (__ptr_0 + 0))
    !(__ptr_0 + 0)
  end SDL_GetGamepadGUIDForID

  /** Get the gamepad mapping string for a given GUID.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadMappingForGUID(guid: Ptr[SDL_GUID]): CString =
    __sn_wrap_sdl3_SDL_GetGamepadMappingForGUID(guid)

  /** Get the gamepad mapping string for a given GUID.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gamepad.h
    */
  def SDL_GetGamepadMappingForGUID(guid: SDL_GUID)(using Zone): CString =
    val __ptr_0: Ptr[SDL_GUID] = alloc[SDL_GUID](1)
    !(__ptr_0 + 0) = guid
    __sn_wrap_sdl3_SDL_GetGamepadMappingForGUID((__ptr_0 + 0))

  /** Get the implementation-dependent GUID for the joystick.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_GetJoystickGUID(joystick: Ptr[SDL_Joystick])(using Zone): SDL_GUID =
    val __ptr_0: Ptr[SDL_GUID] = alloc[SDL_GUID](1)
    __sn_wrap_sdl3_SDL_GetJoystickGUID(joystick, (__ptr_0 + 0))
    !(__ptr_0 + 0)

  /** Get the implementation-dependent GUID for the joystick.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_GetJoystickGUID(joystick: Ptr[SDL_Joystick])(
      __return: Ptr[SDL_GUID]
  ): Unit =
    __sn_wrap_sdl3_SDL_GetJoystickGUID(joystick, __return)

  /** Get the implementation-dependent GUID of a joystick.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_GetJoystickGUIDForID(instance_id: SDL_JoystickID)(
      __return: Ptr[SDL_GUID]
  ): Unit =
    __sn_wrap_sdl3_SDL_GetJoystickGUIDForID(instance_id, __return)

  /** Get the implementation-dependent GUID of a joystick.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_GetJoystickGUIDForID(instance_id: SDL_JoystickID)(using
      Zone
  ): SDL_GUID =
    val __ptr_0: Ptr[SDL_GUID] = alloc[SDL_GUID](1)
    __sn_wrap_sdl3_SDL_GetJoystickGUIDForID(instance_id, (__ptr_0 + 0))
    !(__ptr_0 + 0)
  end SDL_GetJoystickGUIDForID

  /** Get the device information encoded in a SDL_GUID structure.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_GetJoystickGUIDInfo(
      guid: Ptr[SDL_GUID],
      vendor: Ptr[Uint16],
      product: Ptr[Uint16],
      version: Ptr[Uint16],
      crc16: Ptr[Uint16]
  ): Unit =
    __sn_wrap_sdl3_SDL_GetJoystickGUIDInfo(
      guid,
      vendor,
      product,
      version,
      crc16
    )

  /** Get the device information encoded in a SDL_GUID structure.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_joystick.h
    */
  def SDL_GetJoystickGUIDInfo(
      guid: SDL_GUID,
      vendor: Ptr[Uint16],
      product: Ptr[Uint16],
      version: Ptr[Uint16],
      crc16: Ptr[Uint16]
  )(using Zone): Unit =
    val __ptr_0: Ptr[SDL_GUID] = alloc[SDL_GUID](1)
    !(__ptr_0 + 0) = guid
    __sn_wrap_sdl3_SDL_GetJoystickGUIDInfo(
      (__ptr_0 + 0),
      vendor,
      product,
      version,
      crc16
    )
  end SDL_GetJoystickGUIDInfo

  /** Sets the current blend constants on a command buffer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_SetGPUBlendConstants(
      render_pass: Ptr[SDL_GPURenderPass],
      blend_constants: SDL_FColor
  )(using Zone): Unit =
    val __ptr_0: Ptr[SDL_FColor] = alloc[SDL_FColor](1)
    !(__ptr_0 + 0) = blend_constants
    __sn_wrap_sdl3_SDL_SetGPUBlendConstants(render_pass, (__ptr_0 + 0))
  end SDL_SetGPUBlendConstants

  /** Sets the current blend constants on a command buffer.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_gpu.h
    */
  def SDL_SetGPUBlendConstants(
      render_pass: Ptr[SDL_GPURenderPass],
      blend_constants: Ptr[SDL_FColor]
  ): Unit =
    __sn_wrap_sdl3_SDL_SetGPUBlendConstants(render_pass, blend_constants)

  /** Convert a GUID string into a SDL_GUID structure.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_guid.h
    */
  def SDL_StringToGUID(pchGUID: CString)(__return: Ptr[SDL_GUID]): Unit =
    __sn_wrap_sdl3_SDL_StringToGUID(pchGUID, __return)

  /** Convert a GUID string into a SDL_GUID structure.
    *
    * [bindgen] header:
    * /Users/velvetbaldmime/Library/Caches/sbt-vcpkg/vcpkg-install/arm64-osx/lib/pkgconfig/../../include/SDL3/SDL_guid.h
    */
  def SDL_StringToGUID(pchGUID: CString)(using Zone): SDL_GUID =
    val __ptr_0: Ptr[SDL_GUID] = alloc[SDL_GUID](1)
    __sn_wrap_sdl3_SDL_StringToGUID(pchGUID, (__ptr_0 + 0))
    !(__ptr_0 + 0)
end functions

object types:
  export _root_.sdl3.structs.*
  export _root_.sdl3.aliases.*
  export _root_.sdl3.unions.*
  export _root_.sdl3.enumerations.*
end types

object all:
  export _root_.sdl3.enumerations.SDL_AppResult
  export _root_.sdl3.enumerations.SDL_ArrayOrder
  export _root_.sdl3.enumerations.SDL_AssertState
  export _root_.sdl3.enumerations.SDL_AudioFormat
  export _root_.sdl3.enumerations.SDL_BitmapOrder
  export _root_.sdl3.enumerations.SDL_BlendFactor
  export _root_.sdl3.enumerations.SDL_BlendOperation
  export _root_.sdl3.enumerations.SDL_CameraPosition
  export _root_.sdl3.enumerations.SDL_Capitalization
  export _root_.sdl3.enumerations.SDL_ChromaLocation
  export _root_.sdl3.enumerations.SDL_ColorPrimaries
  export _root_.sdl3.enumerations.SDL_ColorRange
  export _root_.sdl3.enumerations.SDL_ColorType
  export _root_.sdl3.enumerations.SDL_Colorspace
  export _root_.sdl3.enumerations.SDL_DUMMY_ENUM
  export _root_.sdl3.enumerations.SDL_DateFormat
  export _root_.sdl3.enumerations.SDL_DisplayOrientation
  export _root_.sdl3.enumerations.SDL_EnumerationResult
  export _root_.sdl3.enumerations.SDL_EventAction
  export _root_.sdl3.enumerations.SDL_EventType
  export _root_.sdl3.enumerations.SDL_FlashOperation
  export _root_.sdl3.enumerations.SDL_FlipMode
  export _root_.sdl3.enumerations.SDL_Folder
  export _root_.sdl3.enumerations.SDL_GLAttr
  export _root_.sdl3.enumerations.SDL_GPUBlendFactor
  export _root_.sdl3.enumerations.SDL_GPUBlendOp
  export _root_.sdl3.enumerations.SDL_GPUCompareOp
  export _root_.sdl3.enumerations.SDL_GPUCubeMapFace
  export _root_.sdl3.enumerations.SDL_GPUCullMode
  export _root_.sdl3.enumerations.SDL_GPUFillMode
  export _root_.sdl3.enumerations.SDL_GPUFilter
  export _root_.sdl3.enumerations.SDL_GPUFrontFace
  export _root_.sdl3.enumerations.SDL_GPUIndexElementSize
  export _root_.sdl3.enumerations.SDL_GPULoadOp
  export _root_.sdl3.enumerations.SDL_GPUPresentMode
  export _root_.sdl3.enumerations.SDL_GPUPrimitiveType
  export _root_.sdl3.enumerations.SDL_GPUSampleCount
  export _root_.sdl3.enumerations.SDL_GPUSamplerAddressMode
  export _root_.sdl3.enumerations.SDL_GPUSamplerMipmapMode
  export _root_.sdl3.enumerations.SDL_GPUShaderStage
  export _root_.sdl3.enumerations.SDL_GPUStencilOp
  export _root_.sdl3.enumerations.SDL_GPUStoreOp
  export _root_.sdl3.enumerations.SDL_GPUSwapchainComposition
  export _root_.sdl3.enumerations.SDL_GPUTextureFormat
  export _root_.sdl3.enumerations.SDL_GPUTextureType
  export _root_.sdl3.enumerations.SDL_GPUTransferBufferUsage
  export _root_.sdl3.enumerations.SDL_GPUVertexElementFormat
  export _root_.sdl3.enumerations.SDL_GPUVertexInputRate
  export _root_.sdl3.enumerations.SDL_GamepadAxis
  export _root_.sdl3.enumerations.SDL_GamepadBindingType
  export _root_.sdl3.enumerations.SDL_GamepadButton
  export _root_.sdl3.enumerations.SDL_GamepadButtonLabel
  export _root_.sdl3.enumerations.SDL_GamepadType
  export _root_.sdl3.enumerations.SDL_HintPriority
  export _root_.sdl3.enumerations.SDL_HitTestResult
  export _root_.sdl3.enumerations.SDL_IOStatus
  export _root_.sdl3.enumerations.SDL_IOWhence
  export _root_.sdl3.enumerations.SDL_InitStatus
  export _root_.sdl3.enumerations.SDL_JoystickConnectionState
  export _root_.sdl3.enumerations.SDL_JoystickType
  export _root_.sdl3.enumerations.SDL_LogCategory
  export _root_.sdl3.enumerations.SDL_LogPriority
  export _root_.sdl3.enumerations.SDL_MatrixCoefficients
  export _root_.sdl3.enumerations.SDL_MessageBoxColorType
  export _root_.sdl3.enumerations.SDL_MouseWheelDirection
  export _root_.sdl3.enumerations.SDL_PackedLayout
  export _root_.sdl3.enumerations.SDL_PackedOrder
  export _root_.sdl3.enumerations.SDL_PathType
  export _root_.sdl3.enumerations.SDL_PenAxis
  export _root_.sdl3.enumerations.SDL_PixelFormat
  export _root_.sdl3.enumerations.SDL_PixelType
  export _root_.sdl3.enumerations.SDL_PowerState
  export _root_.sdl3.enumerations.SDL_ProcessIO
  export _root_.sdl3.enumerations.SDL_PropertyType
  export _root_.sdl3.enumerations.SDL_RendererLogicalPresentation
  export _root_.sdl3.enumerations.SDL_Sandbox
  export _root_.sdl3.enumerations.SDL_ScaleMode
  export _root_.sdl3.enumerations.SDL_Scancode
  export _root_.sdl3.enumerations.SDL_SensorType
  export _root_.sdl3.enumerations.SDL_SystemCursor
  export _root_.sdl3.enumerations.SDL_SystemTheme
  export _root_.sdl3.enumerations.SDL_TextInputType
  export _root_.sdl3.enumerations.SDL_TextureAccess
  export _root_.sdl3.enumerations.SDL_ThreadPriority
  export _root_.sdl3.enumerations.SDL_TimeFormat
  export _root_.sdl3.enumerations.SDL_TouchDeviceType
  export _root_.sdl3.enumerations.SDL_TransferCharacteristics
  export _root_.sdl3.enumerations.SDL_hid_bus_type
  export _root_.sdl3.aliases.SDL_AppEvent_func
  export _root_.sdl3.aliases.SDL_AppInit_func
  export _root_.sdl3.aliases.SDL_AppIterate_func
  export _root_.sdl3.aliases.SDL_AppQuit_func
  export _root_.sdl3.aliases.SDL_AssertionHandler
  export _root_.sdl3.aliases.SDL_AudioDeviceID
  export _root_.sdl3.aliases.SDL_AudioPostmixCallback
  export _root_.sdl3.aliases.SDL_AudioStreamCallback
  export _root_.sdl3.aliases.SDL_BlendMode
  export _root_.sdl3.aliases.SDL_CameraID
  export _root_.sdl3.aliases.SDL_CleanupPropertyCallback
  export _root_.sdl3.aliases.SDL_ClipboardCleanupCallback
  export _root_.sdl3.aliases.SDL_ClipboardDataCallback
  export _root_.sdl3.aliases.SDL_CompareCallback
  export _root_.sdl3.aliases.SDL_CompareCallback_r
  export _root_.sdl3.aliases.SDL_DialogFileCallback
  export _root_.sdl3.aliases.SDL_DisplayID
  export _root_.sdl3.aliases.SDL_EGLAttrib
  export _root_.sdl3.aliases.SDL_EGLAttribArrayCallback
  export _root_.sdl3.aliases.SDL_EGLConfig
  export _root_.sdl3.aliases.SDL_EGLDisplay
  export _root_.sdl3.aliases.SDL_EGLIntArrayCallback
  export _root_.sdl3.aliases.SDL_EGLSurface
  export _root_.sdl3.aliases.SDL_EGLint
  export _root_.sdl3.aliases.SDL_EnumerateDirectoryCallback
  export _root_.sdl3.aliases.SDL_EnumeratePropertiesCallback
  export _root_.sdl3.aliases.SDL_EventFilter
  export _root_.sdl3.aliases.SDL_FingerID
  export _root_.sdl3.aliases.SDL_FunctionPointer
  export _root_.sdl3.aliases.SDL_GLContext
  export _root_.sdl3.aliases.SDL_GLContextFlag
  export _root_.sdl3.aliases.SDL_GLContextReleaseFlag
  export _root_.sdl3.aliases.SDL_GLContextResetNotification
  export _root_.sdl3.aliases.SDL_GLProfile
  export _root_.sdl3.aliases.SDL_GPUBufferUsageFlags
  export _root_.sdl3.aliases.SDL_GPUColorComponentFlags
  export _root_.sdl3.aliases.SDL_GPUShaderFormat
  export _root_.sdl3.aliases.SDL_GPUTextureUsageFlags
  export _root_.sdl3.aliases.SDL_GlobFlags
  export _root_.sdl3.aliases.SDL_HapticID
  export _root_.sdl3.aliases.SDL_HintCallback
  export _root_.sdl3.aliases.SDL_HitTest
  export _root_.sdl3.aliases.SDL_InitFlags
  export _root_.sdl3.aliases.SDL_JoystickID
  export _root_.sdl3.aliases.SDL_KeyboardID
  export _root_.sdl3.aliases.SDL_Keycode
  export _root_.sdl3.aliases.SDL_Keymod
  export _root_.sdl3.aliases.SDL_LogOutputFunction
  export _root_.sdl3.aliases.SDL_MessageBoxButtonFlags
  export _root_.sdl3.aliases.SDL_MessageBoxFlags
  export _root_.sdl3.aliases.SDL_MetalView
  export _root_.sdl3.aliases.SDL_MouseButtonFlags
  export _root_.sdl3.aliases.SDL_MouseID
  export _root_.sdl3.aliases.SDL_NSTimerCallback
  export _root_.sdl3.aliases.SDL_PenID
  export _root_.sdl3.aliases.SDL_PenInputFlags
  export _root_.sdl3.aliases.SDL_PropertiesID
  export _root_.sdl3.aliases.SDL_SensorID
  export _root_.sdl3.aliases.SDL_SpinLock
  export _root_.sdl3.aliases.SDL_SurfaceFlags
  export _root_.sdl3.aliases.SDL_TLSDestructorCallback
  export _root_.sdl3.aliases.SDL_TLSID
  export _root_.sdl3.aliases.SDL_ThreadFunction
  export _root_.sdl3.aliases.SDL_ThreadID
  export _root_.sdl3.aliases.SDL_Time
  export _root_.sdl3.aliases.SDL_TimerCallback
  export _root_.sdl3.aliases.SDL_TimerID
  export _root_.sdl3.aliases.SDL_TouchID
  export _root_.sdl3.aliases.SDL_WindowFlags
  export _root_.sdl3.aliases.SDL_WindowID
  export _root_.sdl3.aliases.SDL_X11EventHook
  export _root_.sdl3.aliases.SDL_calloc_func
  export _root_.sdl3.aliases.SDL_free_func
  export _root_.sdl3.aliases.SDL_iconv_t
  export _root_.sdl3.aliases.SDL_malloc_func
  export _root_.sdl3.aliases.SDL_realloc_func
  export _root_.sdl3.aliases.Sint16
  export _root_.sdl3.aliases.Sint32
  export _root_.sdl3.aliases.Sint64
  export _root_.sdl3.aliases.Sint8
  export _root_.sdl3.aliases.Uint16
  export _root_.sdl3.aliases.Uint32
  export _root_.sdl3.aliases.Uint64
  export _root_.sdl3.aliases.Uint8
  export _root_.sdl3.aliases.__darwin_intptr_t
  export _root_.sdl3.aliases.int16_t
  export _root_.sdl3.aliases.int32_t
  export _root_.sdl3.aliases.int64_t
  export _root_.sdl3.aliases.int8_t
  export _root_.sdl3.aliases.intptr_t
  export _root_.sdl3.aliases.size_t
  export _root_.sdl3.aliases.uint16_t
  export _root_.sdl3.aliases.uint32_t
  export _root_.sdl3.aliases.uint64_t
  export _root_.sdl3.aliases.uint8_t
  export _root_.sdl3.aliases.va_list
  export _root_.sdl3.aliases.wchar_t
  export _root_.sdl3.structs.SDL_AssertData
  export _root_.sdl3.structs.SDL_AtomicInt
  export _root_.sdl3.structs.SDL_AtomicU32
  export _root_.sdl3.structs.SDL_AudioDeviceEvent
  export _root_.sdl3.structs.SDL_AudioSpec
  export _root_.sdl3.structs.SDL_AudioStream
  export _root_.sdl3.structs.SDL_Camera
  export _root_.sdl3.structs.SDL_CameraDeviceEvent
  export _root_.sdl3.structs.SDL_CameraSpec
  export _root_.sdl3.structs.SDL_ClipboardEvent
  export _root_.sdl3.structs.SDL_Color
  export _root_.sdl3.structs.SDL_CommonEvent
  export _root_.sdl3.structs.SDL_Condition
  export _root_.sdl3.structs.SDL_Cursor
  export _root_.sdl3.structs.SDL_DateTime
  export _root_.sdl3.structs.SDL_DialogFileFilter
  export _root_.sdl3.structs.SDL_DisplayEvent
  export _root_.sdl3.structs.SDL_DisplayMode
  export _root_.sdl3.structs.SDL_DisplayModeData
  export _root_.sdl3.structs.SDL_DropEvent
  export _root_.sdl3.structs.SDL_Environment
  export _root_.sdl3.structs.SDL_FColor
  export _root_.sdl3.structs.SDL_FPoint
  export _root_.sdl3.structs.SDL_FRect
  export _root_.sdl3.structs.SDL_Finger
  export _root_.sdl3.structs.SDL_GLContextState
  export _root_.sdl3.structs.SDL_GPUBlitInfo
  export _root_.sdl3.structs.SDL_GPUBlitRegion
  export _root_.sdl3.structs.SDL_GPUBuffer
  export _root_.sdl3.structs.SDL_GPUBufferBinding
  export _root_.sdl3.structs.SDL_GPUBufferCreateInfo
  export _root_.sdl3.structs.SDL_GPUBufferLocation
  export _root_.sdl3.structs.SDL_GPUBufferRegion
  export _root_.sdl3.structs.SDL_GPUColorTargetBlendState
  export _root_.sdl3.structs.SDL_GPUColorTargetDescription
  export _root_.sdl3.structs.SDL_GPUColorTargetInfo
  export _root_.sdl3.structs.SDL_GPUCommandBuffer
  export _root_.sdl3.structs.SDL_GPUComputePass
  export _root_.sdl3.structs.SDL_GPUComputePipeline
  export _root_.sdl3.structs.SDL_GPUComputePipelineCreateInfo
  export _root_.sdl3.structs.SDL_GPUCopyPass
  export _root_.sdl3.structs.SDL_GPUDepthStencilState
  export _root_.sdl3.structs.SDL_GPUDepthStencilTargetInfo
  export _root_.sdl3.structs.SDL_GPUDevice
  export _root_.sdl3.structs.SDL_GPUFence
  export _root_.sdl3.structs.SDL_GPUGraphicsPipeline
  export _root_.sdl3.structs.SDL_GPUGraphicsPipelineCreateInfo
  export _root_.sdl3.structs.SDL_GPUGraphicsPipelineTargetInfo
  export _root_.sdl3.structs.SDL_GPUIndexedIndirectDrawCommand
  export _root_.sdl3.structs.SDL_GPUIndirectDispatchCommand
  export _root_.sdl3.structs.SDL_GPUIndirectDrawCommand
  export _root_.sdl3.structs.SDL_GPUMultisampleState
  export _root_.sdl3.structs.SDL_GPURasterizerState
  export _root_.sdl3.structs.SDL_GPURenderPass
  export _root_.sdl3.structs.SDL_GPUSampler
  export _root_.sdl3.structs.SDL_GPUSamplerCreateInfo
  export _root_.sdl3.structs.SDL_GPUShader
  export _root_.sdl3.structs.SDL_GPUShaderCreateInfo
  export _root_.sdl3.structs.SDL_GPUStencilOpState
  export _root_.sdl3.structs.SDL_GPUStorageBufferReadWriteBinding
  export _root_.sdl3.structs.SDL_GPUStorageTextureReadWriteBinding
  export _root_.sdl3.structs.SDL_GPUTexture
  export _root_.sdl3.structs.SDL_GPUTextureCreateInfo
  export _root_.sdl3.structs.SDL_GPUTextureLocation
  export _root_.sdl3.structs.SDL_GPUTextureRegion
  export _root_.sdl3.structs.SDL_GPUTextureSamplerBinding
  export _root_.sdl3.structs.SDL_GPUTextureTransferInfo
  export _root_.sdl3.structs.SDL_GPUTransferBuffer
  export _root_.sdl3.structs.SDL_GPUTransferBufferCreateInfo
  export _root_.sdl3.structs.SDL_GPUTransferBufferLocation
  export _root_.sdl3.structs.SDL_GPUVertexAttribute
  export _root_.sdl3.structs.SDL_GPUVertexBufferDescription
  export _root_.sdl3.structs.SDL_GPUVertexInputState
  export _root_.sdl3.structs.SDL_GPUViewport
  export _root_.sdl3.structs.SDL_GUID
  export _root_.sdl3.structs.SDL_Gamepad
  export _root_.sdl3.structs.SDL_GamepadAxisEvent
  export _root_.sdl3.structs.SDL_GamepadBinding
  export _root_.sdl3.structs.SDL_GamepadButtonEvent
  export _root_.sdl3.structs.SDL_GamepadDeviceEvent
  export _root_.sdl3.structs.SDL_GamepadSensorEvent
  export _root_.sdl3.structs.SDL_GamepadTouchpadEvent
  export _root_.sdl3.structs.SDL_Haptic
  export _root_.sdl3.structs.SDL_HapticCondition
  export _root_.sdl3.structs.SDL_HapticConstant
  export _root_.sdl3.structs.SDL_HapticCustom
  export _root_.sdl3.structs.SDL_HapticDirection
  export _root_.sdl3.structs.SDL_HapticLeftRight
  export _root_.sdl3.structs.SDL_HapticPeriodic
  export _root_.sdl3.structs.SDL_HapticRamp
  export _root_.sdl3.structs.SDL_IOStream
  export _root_.sdl3.structs.SDL_IOStreamInterface
  export _root_.sdl3.structs.SDL_InitState
  export _root_.sdl3.structs.SDL_JoyAxisEvent
  export _root_.sdl3.structs.SDL_JoyBallEvent
  export _root_.sdl3.structs.SDL_JoyBatteryEvent
  export _root_.sdl3.structs.SDL_JoyButtonEvent
  export _root_.sdl3.structs.SDL_JoyDeviceEvent
  export _root_.sdl3.structs.SDL_JoyHatEvent
  export _root_.sdl3.structs.SDL_Joystick
  export _root_.sdl3.structs.SDL_KeyboardDeviceEvent
  export _root_.sdl3.structs.SDL_KeyboardEvent
  export _root_.sdl3.structs.SDL_Locale
  export _root_.sdl3.structs.SDL_MessageBoxButtonData
  export _root_.sdl3.structs.SDL_MessageBoxColor
  export _root_.sdl3.structs.SDL_MessageBoxColorScheme
  export _root_.sdl3.structs.SDL_MessageBoxData
  export _root_.sdl3.structs.SDL_MouseButtonEvent
  export _root_.sdl3.structs.SDL_MouseDeviceEvent
  export _root_.sdl3.structs.SDL_MouseMotionEvent
  export _root_.sdl3.structs.SDL_MouseWheelEvent
  export _root_.sdl3.structs.SDL_Mutex
  export _root_.sdl3.structs.SDL_Palette
  export _root_.sdl3.structs.SDL_PathInfo
  export _root_.sdl3.structs.SDL_PenAxisEvent
  export _root_.sdl3.structs.SDL_PenButtonEvent
  export _root_.sdl3.structs.SDL_PenMotionEvent
  export _root_.sdl3.structs.SDL_PenProximityEvent
  export _root_.sdl3.structs.SDL_PenTouchEvent
  export _root_.sdl3.structs.SDL_PixelFormatDetails
  export _root_.sdl3.structs.SDL_Point
  export _root_.sdl3.structs.SDL_Process
  export _root_.sdl3.structs.SDL_QuitEvent
  export _root_.sdl3.structs.SDL_RWLock
  export _root_.sdl3.structs.SDL_Rect
  export _root_.sdl3.structs.SDL_Renderer
  export _root_.sdl3.structs.SDL_Semaphore
  export _root_.sdl3.structs.SDL_Sensor
  export _root_.sdl3.structs.SDL_SensorEvent
  export _root_.sdl3.structs.SDL_SharedObject
  export _root_.sdl3.structs.SDL_Storage
  export _root_.sdl3.structs.SDL_StorageInterface
  export _root_.sdl3.structs.SDL_Surface
  export _root_.sdl3.structs.SDL_TextEditingCandidatesEvent
  export _root_.sdl3.structs.SDL_TextEditingEvent
  export _root_.sdl3.structs.SDL_TextInputEvent
  export _root_.sdl3.structs.SDL_Texture
  export _root_.sdl3.structs.SDL_Thread
  export _root_.sdl3.structs.SDL_TouchFingerEvent
  export _root_.sdl3.structs.SDL_UserEvent
  export _root_.sdl3.structs.SDL_Vertex
  export _root_.sdl3.structs.SDL_VirtualJoystickDesc
  export _root_.sdl3.structs.SDL_VirtualJoystickSensorDesc
  export _root_.sdl3.structs.SDL_VirtualJoystickTouchpadDesc
  export _root_.sdl3.structs.SDL_Window
  export _root_.sdl3.structs.SDL_WindowEvent
  export _root_.sdl3.structs.SDL_alignment_test
  export _root_.sdl3.structs.SDL_hid_device
  export _root_.sdl3.structs.SDL_hid_device_info
  export _root_.sdl3.structs.SDL_iconv_data_t
  export _root_.sdl3.unions.SDL_Event
  export _root_.sdl3.unions.SDL_HapticEffect
  export _root_.sdl3.unions.XEvent
  export _root_.sdl3.unions._XEvent
  export _root_.sdl3.functions.SDL_AcquireCameraFrame
  export _root_.sdl3.functions.SDL_AcquireGPUCommandBuffer
  export _root_.sdl3.functions.SDL_AcquireGPUSwapchainTexture
  export _root_.sdl3.functions.SDL_AddAtomicInt
  export _root_.sdl3.functions.SDL_AddEventWatch
  export _root_.sdl3.functions.SDL_AddGamepadMapping
  export _root_.sdl3.functions.SDL_AddGamepadMappingsFromFile
  export _root_.sdl3.functions.SDL_AddGamepadMappingsFromIO
  export _root_.sdl3.functions.SDL_AddHintCallback
  export _root_.sdl3.functions.SDL_AddSurfaceAlternateImage
  export _root_.sdl3.functions.SDL_AddTimer
  export _root_.sdl3.functions.SDL_AddTimerNS
  export _root_.sdl3.functions.SDL_AddVulkanRenderSemaphores
  export _root_.sdl3.functions.SDL_AttachVirtualJoystick
  export _root_.sdl3.functions.SDL_AudioDevicePaused
  export _root_.sdl3.functions.SDL_BeginGPUComputePass
  export _root_.sdl3.functions.SDL_BeginGPUCopyPass
  export _root_.sdl3.functions.SDL_BeginGPURenderPass
  export _root_.sdl3.functions.SDL_BindAudioStream
  export _root_.sdl3.functions.SDL_BindAudioStreams
  export _root_.sdl3.functions.SDL_BindGPUComputePipeline
  export _root_.sdl3.functions.SDL_BindGPUComputeSamplers
  export _root_.sdl3.functions.SDL_BindGPUComputeStorageBuffers
  export _root_.sdl3.functions.SDL_BindGPUComputeStorageTextures
  export _root_.sdl3.functions.SDL_BindGPUFragmentSamplers
  export _root_.sdl3.functions.SDL_BindGPUFragmentStorageBuffers
  export _root_.sdl3.functions.SDL_BindGPUFragmentStorageTextures
  export _root_.sdl3.functions.SDL_BindGPUGraphicsPipeline
  export _root_.sdl3.functions.SDL_BindGPUIndexBuffer
  export _root_.sdl3.functions.SDL_BindGPUVertexBuffers
  export _root_.sdl3.functions.SDL_BindGPUVertexSamplers
  export _root_.sdl3.functions.SDL_BindGPUVertexStorageBuffers
  export _root_.sdl3.functions.SDL_BindGPUVertexStorageTextures
  export _root_.sdl3.functions.SDL_BlitGPUTexture
  export _root_.sdl3.functions.SDL_BlitSurface
  export _root_.sdl3.functions.SDL_BlitSurface9Grid
  export _root_.sdl3.functions.SDL_BlitSurfaceScaled
  export _root_.sdl3.functions.SDL_BlitSurfaceTiled
  export _root_.sdl3.functions.SDL_BlitSurfaceTiledWithScale
  export _root_.sdl3.functions.SDL_BlitSurfaceUnchecked
  export _root_.sdl3.functions.SDL_BlitSurfaceUncheckedScaled
  export _root_.sdl3.functions.SDL_BroadcastCondition
  export _root_.sdl3.functions.SDL_CalculateGPUTextureFormatSize
  export _root_.sdl3.functions.SDL_CancelGPUCommandBuffer
  export _root_.sdl3.functions.SDL_CaptureMouse
  export _root_.sdl3.functions.SDL_ClaimWindowForGPUDevice
  export _root_.sdl3.functions.SDL_CleanupTLS
  export _root_.sdl3.functions.SDL_ClearAudioStream
  export _root_.sdl3.functions.SDL_ClearClipboardData
  export _root_.sdl3.functions.SDL_ClearComposition
  export _root_.sdl3.functions.SDL_ClearError
  export _root_.sdl3.functions.SDL_ClearProperty
  export _root_.sdl3.functions.SDL_ClearSurface
  export _root_.sdl3.functions.SDL_CloseAudioDevice
  export _root_.sdl3.functions.SDL_CloseCamera
  export _root_.sdl3.functions.SDL_CloseGamepad
  export _root_.sdl3.functions.SDL_CloseHaptic
  export _root_.sdl3.functions.SDL_CloseIO
  export _root_.sdl3.functions.SDL_CloseJoystick
  export _root_.sdl3.functions.SDL_CloseSensor
  export _root_.sdl3.functions.SDL_CloseStorage
  export _root_.sdl3.functions.SDL_CompareAndSwapAtomicInt
  export _root_.sdl3.functions.SDL_CompareAndSwapAtomicPointer
  export _root_.sdl3.functions.SDL_CompareAndSwapAtomicU32
  export _root_.sdl3.functions.SDL_ComposeCustomBlendMode
  export _root_.sdl3.functions.SDL_ConvertAudioSamples
  export _root_.sdl3.functions.SDL_ConvertEventToRenderCoordinates
  export _root_.sdl3.functions.SDL_ConvertPixels
  export _root_.sdl3.functions.SDL_ConvertPixelsAndColorspace
  export _root_.sdl3.functions.SDL_ConvertSurface
  export _root_.sdl3.functions.SDL_ConvertSurfaceAndColorspace
  export _root_.sdl3.functions.SDL_CopyFile
  export _root_.sdl3.functions.SDL_CopyGPUBufferToBuffer
  export _root_.sdl3.functions.SDL_CopyGPUTextureToTexture
  export _root_.sdl3.functions.SDL_CopyProperties
  export _root_.sdl3.functions.SDL_CopyStorageFile
  export _root_.sdl3.functions.SDL_CreateAudioStream
  export _root_.sdl3.functions.SDL_CreateColorCursor
  export _root_.sdl3.functions.SDL_CreateCondition
  export _root_.sdl3.functions.SDL_CreateCursor
  export _root_.sdl3.functions.SDL_CreateDirectory
  export _root_.sdl3.functions.SDL_CreateEnvironment
  export _root_.sdl3.functions.SDL_CreateGPUBuffer
  export _root_.sdl3.functions.SDL_CreateGPUComputePipeline
  export _root_.sdl3.functions.SDL_CreateGPUDevice
  export _root_.sdl3.functions.SDL_CreateGPUDeviceWithProperties
  export _root_.sdl3.functions.SDL_CreateGPUGraphicsPipeline
  export _root_.sdl3.functions.SDL_CreateGPUSampler
  export _root_.sdl3.functions.SDL_CreateGPUShader
  export _root_.sdl3.functions.SDL_CreateGPUTexture
  export _root_.sdl3.functions.SDL_CreateGPUTransferBuffer
  export _root_.sdl3.functions.SDL_CreateHapticEffect
  export _root_.sdl3.functions.SDL_CreateMutex
  export _root_.sdl3.functions.SDL_CreatePalette
  export _root_.sdl3.functions.SDL_CreatePopupWindow
  export _root_.sdl3.functions.SDL_CreateProcess
  export _root_.sdl3.functions.SDL_CreateProcessWithProperties
  export _root_.sdl3.functions.SDL_CreateProperties
  export _root_.sdl3.functions.SDL_CreateRWLock
  export _root_.sdl3.functions.SDL_CreateRenderer
  export _root_.sdl3.functions.SDL_CreateRendererWithProperties
  export _root_.sdl3.functions.SDL_CreateSemaphore
  export _root_.sdl3.functions.SDL_CreateSoftwareRenderer
  export _root_.sdl3.functions.SDL_CreateStorageDirectory
  export _root_.sdl3.functions.SDL_CreateSurface
  export _root_.sdl3.functions.SDL_CreateSurfaceFrom
  export _root_.sdl3.functions.SDL_CreateSurfacePalette
  export _root_.sdl3.functions.SDL_CreateSystemCursor
  export _root_.sdl3.functions.SDL_CreateTexture
  export _root_.sdl3.functions.SDL_CreateTextureFromSurface
  export _root_.sdl3.functions.SDL_CreateTextureWithProperties
  export _root_.sdl3.functions.SDL_CreateThreadRuntime
  export _root_.sdl3.functions.SDL_CreateThreadWithPropertiesRuntime
  export _root_.sdl3.functions.SDL_CreateWindow
  export _root_.sdl3.functions.SDL_CreateWindowAndRenderer
  export _root_.sdl3.functions.SDL_CreateWindowWithProperties
  export _root_.sdl3.functions.SDL_CursorVisible
  export _root_.sdl3.functions.SDL_DateTimeToTime
  export _root_.sdl3.functions.SDL_Delay
  export _root_.sdl3.functions.SDL_DelayNS
  export _root_.sdl3.functions.SDL_DelayPrecise
  export _root_.sdl3.functions.SDL_DestroyAudioStream
  export _root_.sdl3.functions.SDL_DestroyCondition
  export _root_.sdl3.functions.SDL_DestroyCursor
  export _root_.sdl3.functions.SDL_DestroyEnvironment
  export _root_.sdl3.functions.SDL_DestroyGPUDevice
  export _root_.sdl3.functions.SDL_DestroyHapticEffect
  export _root_.sdl3.functions.SDL_DestroyMutex
  export _root_.sdl3.functions.SDL_DestroyPalette
  export _root_.sdl3.functions.SDL_DestroyProcess
  export _root_.sdl3.functions.SDL_DestroyProperties
  export _root_.sdl3.functions.SDL_DestroyRWLock
  export _root_.sdl3.functions.SDL_DestroyRenderer
  export _root_.sdl3.functions.SDL_DestroySemaphore
  export _root_.sdl3.functions.SDL_DestroySurface
  export _root_.sdl3.functions.SDL_DestroyTexture
  export _root_.sdl3.functions.SDL_DestroyWindow
  export _root_.sdl3.functions.SDL_DestroyWindowSurface
  export _root_.sdl3.functions.SDL_DetachThread
  export _root_.sdl3.functions.SDL_DetachVirtualJoystick
  export _root_.sdl3.functions.SDL_DisableScreenSaver
  export _root_.sdl3.functions.SDL_DispatchGPUCompute
  export _root_.sdl3.functions.SDL_DispatchGPUComputeIndirect
  export _root_.sdl3.functions.SDL_DownloadFromGPUBuffer
  export _root_.sdl3.functions.SDL_DownloadFromGPUTexture
  export _root_.sdl3.functions.SDL_DrawGPUIndexedPrimitives
  export _root_.sdl3.functions.SDL_DrawGPUIndexedPrimitivesIndirect
  export _root_.sdl3.functions.SDL_DrawGPUPrimitives
  export _root_.sdl3.functions.SDL_DrawGPUPrimitivesIndirect
  export _root_.sdl3.functions.SDL_DuplicateSurface
  export _root_.sdl3.functions.SDL_EGL_GetCurrentConfig
  export _root_.sdl3.functions.SDL_EGL_GetCurrentDisplay
  export _root_.sdl3.functions.SDL_EGL_GetProcAddress
  export _root_.sdl3.functions.SDL_EGL_GetWindowSurface
  export _root_.sdl3.functions.SDL_EGL_SetAttributeCallbacks
  export _root_.sdl3.functions.SDL_EnableScreenSaver
  export _root_.sdl3.functions.SDL_EndGPUComputePass
  export _root_.sdl3.functions.SDL_EndGPUCopyPass
  export _root_.sdl3.functions.SDL_EndGPURenderPass
  export _root_.sdl3.functions.SDL_EnumerateDirectory
  export _root_.sdl3.functions.SDL_EnumerateProperties
  export _root_.sdl3.functions.SDL_EnumerateStorageDirectory
  export _root_.sdl3.functions.SDL_EventEnabled
  export _root_.sdl3.functions.SDL_FillSurfaceRect
  export _root_.sdl3.functions.SDL_FillSurfaceRects
  export _root_.sdl3.functions.SDL_FilterEvents
  export _root_.sdl3.functions.SDL_FlashWindow
  export _root_.sdl3.functions.SDL_FlipSurface
  export _root_.sdl3.functions.SDL_FlushAudioStream
  export _root_.sdl3.functions.SDL_FlushEvent
  export _root_.sdl3.functions.SDL_FlushEvents
  export _root_.sdl3.functions.SDL_FlushIO
  export _root_.sdl3.functions.SDL_FlushRenderer
  export _root_.sdl3.functions.SDL_GL_CreateContext
  export _root_.sdl3.functions.SDL_GL_DestroyContext
  export _root_.sdl3.functions.SDL_GL_ExtensionSupported
  export _root_.sdl3.functions.SDL_GL_GetAttribute
  export _root_.sdl3.functions.SDL_GL_GetCurrentContext
  export _root_.sdl3.functions.SDL_GL_GetCurrentWindow
  export _root_.sdl3.functions.SDL_GL_GetProcAddress
  export _root_.sdl3.functions.SDL_GL_GetSwapInterval
  export _root_.sdl3.functions.SDL_GL_LoadLibrary
  export _root_.sdl3.functions.SDL_GL_MakeCurrent
  export _root_.sdl3.functions.SDL_GL_ResetAttributes
  export _root_.sdl3.functions.SDL_GL_SetAttribute
  export _root_.sdl3.functions.SDL_GL_SetSwapInterval
  export _root_.sdl3.functions.SDL_GL_SwapWindow
  export _root_.sdl3.functions.SDL_GL_UnloadLibrary
  export _root_.sdl3.functions.SDL_GPUSupportsProperties
  export _root_.sdl3.functions.SDL_GPUSupportsShaderFormats
  export _root_.sdl3.functions.SDL_GPUTextureFormatTexelBlockSize
  export _root_.sdl3.functions.SDL_GPUTextureSupportsFormat
  export _root_.sdl3.functions.SDL_GPUTextureSupportsSampleCount
  export _root_.sdl3.functions.SDL_GamepadConnected
  export _root_.sdl3.functions.SDL_GamepadEventsEnabled
  export _root_.sdl3.functions.SDL_GamepadHasAxis
  export _root_.sdl3.functions.SDL_GamepadHasButton
  export _root_.sdl3.functions.SDL_GamepadHasSensor
  export _root_.sdl3.functions.SDL_GamepadSensorEnabled
  export _root_.sdl3.functions.SDL_GenerateMipmapsForGPUTexture
  export _root_.sdl3.functions.SDL_GetAppMetadataProperty
  export _root_.sdl3.functions.SDL_GetAssertionHandler
  export _root_.sdl3.functions.SDL_GetAssertionReport
  export _root_.sdl3.functions.SDL_GetAtomicInt
  export _root_.sdl3.functions.SDL_GetAtomicPointer
  export _root_.sdl3.functions.SDL_GetAtomicU32
  export _root_.sdl3.functions.SDL_GetAudioDeviceChannelMap
  export _root_.sdl3.functions.SDL_GetAudioDeviceFormat
  export _root_.sdl3.functions.SDL_GetAudioDeviceGain
  export _root_.sdl3.functions.SDL_GetAudioDeviceName
  export _root_.sdl3.functions.SDL_GetAudioDriver
  export _root_.sdl3.functions.SDL_GetAudioFormatName
  export _root_.sdl3.functions.SDL_GetAudioPlaybackDevices
  export _root_.sdl3.functions.SDL_GetAudioRecordingDevices
  export _root_.sdl3.functions.SDL_GetAudioStreamAvailable
  export _root_.sdl3.functions.SDL_GetAudioStreamData
  export _root_.sdl3.functions.SDL_GetAudioStreamDevice
  export _root_.sdl3.functions.SDL_GetAudioStreamFormat
  export _root_.sdl3.functions.SDL_GetAudioStreamFrequencyRatio
  export _root_.sdl3.functions.SDL_GetAudioStreamGain
  export _root_.sdl3.functions.SDL_GetAudioStreamInputChannelMap
  export _root_.sdl3.functions.SDL_GetAudioStreamOutputChannelMap
  export _root_.sdl3.functions.SDL_GetAudioStreamProperties
  export _root_.sdl3.functions.SDL_GetAudioStreamQueued
  export _root_.sdl3.functions.SDL_GetBasePath
  export _root_.sdl3.functions.SDL_GetBooleanProperty
  export _root_.sdl3.functions.SDL_GetCPUCacheLineSize
  export _root_.sdl3.functions.SDL_GetCameraDriver
  export _root_.sdl3.functions.SDL_GetCameraFormat
  export _root_.sdl3.functions.SDL_GetCameraID
  export _root_.sdl3.functions.SDL_GetCameraName
  export _root_.sdl3.functions.SDL_GetCameraPermissionState
  export _root_.sdl3.functions.SDL_GetCameraPosition
  export _root_.sdl3.functions.SDL_GetCameraProperties
  export _root_.sdl3.functions.SDL_GetCameraSupportedFormats
  export _root_.sdl3.functions.SDL_GetCameras
  export _root_.sdl3.functions.SDL_GetClipboardData
  export _root_.sdl3.functions.SDL_GetClipboardMimeTypes
  export _root_.sdl3.functions.SDL_GetClipboardText
  export _root_.sdl3.functions.SDL_GetClosestFullscreenDisplayMode
  export _root_.sdl3.functions.SDL_GetCurrentAudioDriver
  export _root_.sdl3.functions.SDL_GetCurrentCameraDriver
  export _root_.sdl3.functions.SDL_GetCurrentDisplayMode
  export _root_.sdl3.functions.SDL_GetCurrentDisplayOrientation
  export _root_.sdl3.functions.SDL_GetCurrentRenderOutputSize
  export _root_.sdl3.functions.SDL_GetCurrentThreadID
  export _root_.sdl3.functions.SDL_GetCurrentTime
  export _root_.sdl3.functions.SDL_GetCurrentVideoDriver
  export _root_.sdl3.functions.SDL_GetCursor
  export _root_.sdl3.functions.SDL_GetDateTimeLocalePreferences
  export _root_.sdl3.functions.SDL_GetDayOfWeek
  export _root_.sdl3.functions.SDL_GetDayOfYear
  export _root_.sdl3.functions.SDL_GetDaysInMonth
  export _root_.sdl3.functions.SDL_GetDefaultAssertionHandler
  export _root_.sdl3.functions.SDL_GetDefaultCursor
  export _root_.sdl3.functions.SDL_GetDefaultLogOutputFunction
  export _root_.sdl3.functions.SDL_GetDesktopDisplayMode
  export _root_.sdl3.functions.SDL_GetDisplayBounds
  export _root_.sdl3.functions.SDL_GetDisplayContentScale
  export _root_.sdl3.functions.SDL_GetDisplayForPoint
  export _root_.sdl3.functions.SDL_GetDisplayForRect
  export _root_.sdl3.functions.SDL_GetDisplayForWindow
  export _root_.sdl3.functions.SDL_GetDisplayName
  export _root_.sdl3.functions.SDL_GetDisplayProperties
  export _root_.sdl3.functions.SDL_GetDisplayUsableBounds
  export _root_.sdl3.functions.SDL_GetDisplays
  export _root_.sdl3.functions.SDL_GetEnvironment
  export _root_.sdl3.functions.SDL_GetEnvironmentVariable
  export _root_.sdl3.functions.SDL_GetEnvironmentVariables
  export _root_.sdl3.functions.SDL_GetError
  export _root_.sdl3.functions.SDL_GetEventFilter
  export _root_.sdl3.functions.SDL_GetFloatProperty
  export _root_.sdl3.functions.SDL_GetFullscreenDisplayModes
  export _root_.sdl3.functions.SDL_GetGPUDeviceDriver
  export _root_.sdl3.functions.SDL_GetGPUDriver
  export _root_.sdl3.functions.SDL_GetGPUShaderFormats
  export _root_.sdl3.functions.SDL_GetGPUSwapchainTextureFormat
  export _root_.sdl3.functions.SDL_GetGamepadAppleSFSymbolsNameForAxis
  export _root_.sdl3.functions.SDL_GetGamepadAppleSFSymbolsNameForButton
  export _root_.sdl3.functions.SDL_GetGamepadAxis
  export _root_.sdl3.functions.SDL_GetGamepadAxisFromString
  export _root_.sdl3.functions.SDL_GetGamepadBindings
  export _root_.sdl3.functions.SDL_GetGamepadButton
  export _root_.sdl3.functions.SDL_GetGamepadButtonFromString
  export _root_.sdl3.functions.SDL_GetGamepadButtonLabel
  export _root_.sdl3.functions.SDL_GetGamepadButtonLabelForType
  export _root_.sdl3.functions.SDL_GetGamepadConnectionState
  export _root_.sdl3.functions.SDL_GetGamepadFirmwareVersion
  export _root_.sdl3.functions.SDL_GetGamepadFromID
  export _root_.sdl3.functions.SDL_GetGamepadFromPlayerIndex
  export _root_.sdl3.functions.SDL_GetGamepadID
  export _root_.sdl3.functions.SDL_GetGamepadJoystick
  export _root_.sdl3.functions.SDL_GetGamepadMapping
  export _root_.sdl3.functions.SDL_GetGamepadMappingForID
  export _root_.sdl3.functions.SDL_GetGamepadMappings
  export _root_.sdl3.functions.SDL_GetGamepadName
  export _root_.sdl3.functions.SDL_GetGamepadNameForID
  export _root_.sdl3.functions.SDL_GetGamepadPath
  export _root_.sdl3.functions.SDL_GetGamepadPathForID
  export _root_.sdl3.functions.SDL_GetGamepadPlayerIndex
  export _root_.sdl3.functions.SDL_GetGamepadPlayerIndexForID
  export _root_.sdl3.functions.SDL_GetGamepadPowerInfo
  export _root_.sdl3.functions.SDL_GetGamepadProduct
  export _root_.sdl3.functions.SDL_GetGamepadProductForID
  export _root_.sdl3.functions.SDL_GetGamepadProductVersion
  export _root_.sdl3.functions.SDL_GetGamepadProductVersionForID
  export _root_.sdl3.functions.SDL_GetGamepadProperties
  export _root_.sdl3.functions.SDL_GetGamepadSensorData
  export _root_.sdl3.functions.SDL_GetGamepadSensorDataRate
  export _root_.sdl3.functions.SDL_GetGamepadSerial
  export _root_.sdl3.functions.SDL_GetGamepadSteamHandle
  export _root_.sdl3.functions.SDL_GetGamepadStringForAxis
  export _root_.sdl3.functions.SDL_GetGamepadStringForButton
  export _root_.sdl3.functions.SDL_GetGamepadStringForType
  export _root_.sdl3.functions.SDL_GetGamepadTouchpadFinger
  export _root_.sdl3.functions.SDL_GetGamepadType
  export _root_.sdl3.functions.SDL_GetGamepadTypeForID
  export _root_.sdl3.functions.SDL_GetGamepadTypeFromString
  export _root_.sdl3.functions.SDL_GetGamepadVendor
  export _root_.sdl3.functions.SDL_GetGamepadVendorForID
  export _root_.sdl3.functions.SDL_GetGamepads
  export _root_.sdl3.functions.SDL_GetGlobalMouseState
  export _root_.sdl3.functions.SDL_GetGlobalProperties
  export _root_.sdl3.functions.SDL_GetGrabbedWindow
  export _root_.sdl3.functions.SDL_GetHapticEffectStatus
  export _root_.sdl3.functions.SDL_GetHapticFeatures
  export _root_.sdl3.functions.SDL_GetHapticFromID
  export _root_.sdl3.functions.SDL_GetHapticID
  export _root_.sdl3.functions.SDL_GetHapticName
  export _root_.sdl3.functions.SDL_GetHapticNameForID
  export _root_.sdl3.functions.SDL_GetHaptics
  export _root_.sdl3.functions.SDL_GetHint
  export _root_.sdl3.functions.SDL_GetHintBoolean
  export _root_.sdl3.functions.SDL_GetIOProperties
  export _root_.sdl3.functions.SDL_GetIOSize
  export _root_.sdl3.functions.SDL_GetIOStatus
  export _root_.sdl3.functions.SDL_GetJoystickAxis
  export _root_.sdl3.functions.SDL_GetJoystickAxisInitialState
  export _root_.sdl3.functions.SDL_GetJoystickBall
  export _root_.sdl3.functions.SDL_GetJoystickButton
  export _root_.sdl3.functions.SDL_GetJoystickConnectionState
  export _root_.sdl3.functions.SDL_GetJoystickFirmwareVersion
  export _root_.sdl3.functions.SDL_GetJoystickFromID
  export _root_.sdl3.functions.SDL_GetJoystickFromPlayerIndex
  export _root_.sdl3.functions.SDL_GetJoystickHat
  export _root_.sdl3.functions.SDL_GetJoystickID
  export _root_.sdl3.functions.SDL_GetJoystickName
  export _root_.sdl3.functions.SDL_GetJoystickNameForID
  export _root_.sdl3.functions.SDL_GetJoystickPath
  export _root_.sdl3.functions.SDL_GetJoystickPathForID
  export _root_.sdl3.functions.SDL_GetJoystickPlayerIndex
  export _root_.sdl3.functions.SDL_GetJoystickPlayerIndexForID
  export _root_.sdl3.functions.SDL_GetJoystickPowerInfo
  export _root_.sdl3.functions.SDL_GetJoystickProduct
  export _root_.sdl3.functions.SDL_GetJoystickProductForID
  export _root_.sdl3.functions.SDL_GetJoystickProductVersion
  export _root_.sdl3.functions.SDL_GetJoystickProductVersionForID
  export _root_.sdl3.functions.SDL_GetJoystickProperties
  export _root_.sdl3.functions.SDL_GetJoystickSerial
  export _root_.sdl3.functions.SDL_GetJoystickType
  export _root_.sdl3.functions.SDL_GetJoystickTypeForID
  export _root_.sdl3.functions.SDL_GetJoystickVendor
  export _root_.sdl3.functions.SDL_GetJoystickVendorForID
  export _root_.sdl3.functions.SDL_GetJoysticks
  export _root_.sdl3.functions.SDL_GetKeyFromName
  export _root_.sdl3.functions.SDL_GetKeyFromScancode
  export _root_.sdl3.functions.SDL_GetKeyName
  export _root_.sdl3.functions.SDL_GetKeyboardFocus
  export _root_.sdl3.functions.SDL_GetKeyboardNameForID
  export _root_.sdl3.functions.SDL_GetKeyboardState
  export _root_.sdl3.functions.SDL_GetKeyboards
  export _root_.sdl3.functions.SDL_GetLogOutputFunction
  export _root_.sdl3.functions.SDL_GetLogPriority
  export _root_.sdl3.functions.SDL_GetMasksForPixelFormat
  export _root_.sdl3.functions.SDL_GetMaxHapticEffects
  export _root_.sdl3.functions.SDL_GetMaxHapticEffectsPlaying
  export _root_.sdl3.functions.SDL_GetMemoryFunctions
  export _root_.sdl3.functions.SDL_GetMice
  export _root_.sdl3.functions.SDL_GetModState
  export _root_.sdl3.functions.SDL_GetMouseFocus
  export _root_.sdl3.functions.SDL_GetMouseNameForID
  export _root_.sdl3.functions.SDL_GetMouseState
  export _root_.sdl3.functions.SDL_GetNaturalDisplayOrientation
  export _root_.sdl3.functions.SDL_GetNumAllocations
  export _root_.sdl3.functions.SDL_GetNumAudioDrivers
  export _root_.sdl3.functions.SDL_GetNumCameraDrivers
  export _root_.sdl3.functions.SDL_GetNumGPUDrivers
  export _root_.sdl3.functions.SDL_GetNumGamepadTouchpadFingers
  export _root_.sdl3.functions.SDL_GetNumGamepadTouchpads
  export _root_.sdl3.functions.SDL_GetNumHapticAxes
  export _root_.sdl3.functions.SDL_GetNumJoystickAxes
  export _root_.sdl3.functions.SDL_GetNumJoystickBalls
  export _root_.sdl3.functions.SDL_GetNumJoystickButtons
  export _root_.sdl3.functions.SDL_GetNumJoystickHats
  export _root_.sdl3.functions.SDL_GetNumLogicalCPUCores
  export _root_.sdl3.functions.SDL_GetNumRenderDrivers
  export _root_.sdl3.functions.SDL_GetNumVideoDrivers
  export _root_.sdl3.functions.SDL_GetNumberProperty
  export _root_.sdl3.functions.SDL_GetOriginalMemoryFunctions
  export _root_.sdl3.functions.SDL_GetPathInfo
  export _root_.sdl3.functions.SDL_GetPerformanceCounter
  export _root_.sdl3.functions.SDL_GetPerformanceFrequency
  export _root_.sdl3.functions.SDL_GetPixelFormatDetails
  export _root_.sdl3.functions.SDL_GetPixelFormatForMasks
  export _root_.sdl3.functions.SDL_GetPixelFormatName
  export _root_.sdl3.functions.SDL_GetPlatform
  export _root_.sdl3.functions.SDL_GetPointerProperty
  export _root_.sdl3.functions.SDL_GetPowerInfo
  export _root_.sdl3.functions.SDL_GetPrefPath
  export _root_.sdl3.functions.SDL_GetPreferredLocales
  export _root_.sdl3.functions.SDL_GetPrimaryDisplay
  export _root_.sdl3.functions.SDL_GetPrimarySelectionText
  export _root_.sdl3.functions.SDL_GetProcessInput
  export _root_.sdl3.functions.SDL_GetProcessOutput
  export _root_.sdl3.functions.SDL_GetProcessProperties
  export _root_.sdl3.functions.SDL_GetPropertyType
  export _root_.sdl3.functions.SDL_GetRGB
  export _root_.sdl3.functions.SDL_GetRGBA
  export _root_.sdl3.functions.SDL_GetRealGamepadType
  export _root_.sdl3.functions.SDL_GetRealGamepadTypeForID
  export _root_.sdl3.functions.SDL_GetRectAndLineIntersection
  export _root_.sdl3.functions.SDL_GetRectAndLineIntersectionFloat
  export _root_.sdl3.functions.SDL_GetRectEnclosingPoints
  export _root_.sdl3.functions.SDL_GetRectEnclosingPointsFloat
  export _root_.sdl3.functions.SDL_GetRectIntersection
  export _root_.sdl3.functions.SDL_GetRectIntersectionFloat
  export _root_.sdl3.functions.SDL_GetRectUnion
  export _root_.sdl3.functions.SDL_GetRectUnionFloat
  export _root_.sdl3.functions.SDL_GetRelativeMouseState
  export _root_.sdl3.functions.SDL_GetRenderClipRect
  export _root_.sdl3.functions.SDL_GetRenderColorScale
  export _root_.sdl3.functions.SDL_GetRenderDrawBlendMode
  export _root_.sdl3.functions.SDL_GetRenderDrawColor
  export _root_.sdl3.functions.SDL_GetRenderDrawColorFloat
  export _root_.sdl3.functions.SDL_GetRenderDriver
  export _root_.sdl3.functions.SDL_GetRenderLogicalPresentation
  export _root_.sdl3.functions.SDL_GetRenderLogicalPresentationRect
  export _root_.sdl3.functions.SDL_GetRenderMetalCommandEncoder
  export _root_.sdl3.functions.SDL_GetRenderMetalLayer
  export _root_.sdl3.functions.SDL_GetRenderOutputSize
  export _root_.sdl3.functions.SDL_GetRenderSafeArea
  export _root_.sdl3.functions.SDL_GetRenderScale
  export _root_.sdl3.functions.SDL_GetRenderTarget
  export _root_.sdl3.functions.SDL_GetRenderVSync
  export _root_.sdl3.functions.SDL_GetRenderViewport
  export _root_.sdl3.functions.SDL_GetRenderWindow
  export _root_.sdl3.functions.SDL_GetRenderer
  export _root_.sdl3.functions.SDL_GetRendererFromTexture
  export _root_.sdl3.functions.SDL_GetRendererName
  export _root_.sdl3.functions.SDL_GetRendererProperties
  export _root_.sdl3.functions.SDL_GetRevision
  export _root_.sdl3.functions.SDL_GetSIMDAlignment
  export _root_.sdl3.functions.SDL_GetSandbox
  export _root_.sdl3.functions.SDL_GetScancodeFromKey
  export _root_.sdl3.functions.SDL_GetScancodeFromName
  export _root_.sdl3.functions.SDL_GetScancodeName
  export _root_.sdl3.functions.SDL_GetSemaphoreValue
  export _root_.sdl3.functions.SDL_GetSensorData
  export _root_.sdl3.functions.SDL_GetSensorFromID
  export _root_.sdl3.functions.SDL_GetSensorID
  export _root_.sdl3.functions.SDL_GetSensorName
  export _root_.sdl3.functions.SDL_GetSensorNameForID
  export _root_.sdl3.functions.SDL_GetSensorNonPortableType
  export _root_.sdl3.functions.SDL_GetSensorNonPortableTypeForID
  export _root_.sdl3.functions.SDL_GetSensorProperties
  export _root_.sdl3.functions.SDL_GetSensorType
  export _root_.sdl3.functions.SDL_GetSensorTypeForID
  export _root_.sdl3.functions.SDL_GetSensors
  export _root_.sdl3.functions.SDL_GetSilenceValueForFormat
  export _root_.sdl3.functions.SDL_GetStorageFileSize
  export _root_.sdl3.functions.SDL_GetStoragePathInfo
  export _root_.sdl3.functions.SDL_GetStorageSpaceRemaining
  export _root_.sdl3.functions.SDL_GetStringProperty
  export _root_.sdl3.functions.SDL_GetSurfaceAlphaMod
  export _root_.sdl3.functions.SDL_GetSurfaceBlendMode
  export _root_.sdl3.functions.SDL_GetSurfaceClipRect
  export _root_.sdl3.functions.SDL_GetSurfaceColorKey
  export _root_.sdl3.functions.SDL_GetSurfaceColorMod
  export _root_.sdl3.functions.SDL_GetSurfaceColorspace
  export _root_.sdl3.functions.SDL_GetSurfaceImages
  export _root_.sdl3.functions.SDL_GetSurfacePalette
  export _root_.sdl3.functions.SDL_GetSurfaceProperties
  export _root_.sdl3.functions.SDL_GetSystemRAM
  export _root_.sdl3.functions.SDL_GetSystemTheme
  export _root_.sdl3.functions.SDL_GetTLS
  export _root_.sdl3.functions.SDL_GetTextInputArea
  export _root_.sdl3.functions.SDL_GetTextureAlphaMod
  export _root_.sdl3.functions.SDL_GetTextureAlphaModFloat
  export _root_.sdl3.functions.SDL_GetTextureBlendMode
  export _root_.sdl3.functions.SDL_GetTextureColorMod
  export _root_.sdl3.functions.SDL_GetTextureColorModFloat
  export _root_.sdl3.functions.SDL_GetTextureProperties
  export _root_.sdl3.functions.SDL_GetTextureScaleMode
  export _root_.sdl3.functions.SDL_GetTextureSize
  export _root_.sdl3.functions.SDL_GetThreadID
  export _root_.sdl3.functions.SDL_GetThreadName
  export _root_.sdl3.functions.SDL_GetTicks
  export _root_.sdl3.functions.SDL_GetTicksNS
  export _root_.sdl3.functions.SDL_GetTouchDeviceName
  export _root_.sdl3.functions.SDL_GetTouchDeviceType
  export _root_.sdl3.functions.SDL_GetTouchDevices
  export _root_.sdl3.functions.SDL_GetTouchFingers
  export _root_.sdl3.functions.SDL_GetUserFolder
  export _root_.sdl3.functions.SDL_GetVersion
  export _root_.sdl3.functions.SDL_GetVideoDriver
  export _root_.sdl3.functions.SDL_GetWindowAspectRatio
  export _root_.sdl3.functions.SDL_GetWindowBordersSize
  export _root_.sdl3.functions.SDL_GetWindowDisplayScale
  export _root_.sdl3.functions.SDL_GetWindowFlags
  export _root_.sdl3.functions.SDL_GetWindowFromEvent
  export _root_.sdl3.functions.SDL_GetWindowFromID
  export _root_.sdl3.functions.SDL_GetWindowFullscreenMode
  export _root_.sdl3.functions.SDL_GetWindowICCProfile
  export _root_.sdl3.functions.SDL_GetWindowID
  export _root_.sdl3.functions.SDL_GetWindowKeyboardGrab
  export _root_.sdl3.functions.SDL_GetWindowMaximumSize
  export _root_.sdl3.functions.SDL_GetWindowMinimumSize
  export _root_.sdl3.functions.SDL_GetWindowMouseGrab
  export _root_.sdl3.functions.SDL_GetWindowMouseRect
  export _root_.sdl3.functions.SDL_GetWindowOpacity
  export _root_.sdl3.functions.SDL_GetWindowParent
  export _root_.sdl3.functions.SDL_GetWindowPixelDensity
  export _root_.sdl3.functions.SDL_GetWindowPixelFormat
  export _root_.sdl3.functions.SDL_GetWindowPosition
  export _root_.sdl3.functions.SDL_GetWindowProperties
  export _root_.sdl3.functions.SDL_GetWindowRelativeMouseMode
  export _root_.sdl3.functions.SDL_GetWindowSafeArea
  export _root_.sdl3.functions.SDL_GetWindowSize
  export _root_.sdl3.functions.SDL_GetWindowSizeInPixels
  export _root_.sdl3.functions.SDL_GetWindowSurface
  export _root_.sdl3.functions.SDL_GetWindowSurfaceVSync
  export _root_.sdl3.functions.SDL_GetWindowTitle
  export _root_.sdl3.functions.SDL_GetWindows
  export _root_.sdl3.functions.SDL_GlobDirectory
  export _root_.sdl3.functions.SDL_GlobStorageDirectory
  export _root_.sdl3.functions.SDL_HapticEffectSupported
  export _root_.sdl3.functions.SDL_HapticRumbleSupported
  export _root_.sdl3.functions.SDL_HasARMSIMD
  export _root_.sdl3.functions.SDL_HasAVX
  export _root_.sdl3.functions.SDL_HasAVX2
  export _root_.sdl3.functions.SDL_HasAVX512F
  export _root_.sdl3.functions.SDL_HasAltiVec
  export _root_.sdl3.functions.SDL_HasClipboardData
  export _root_.sdl3.functions.SDL_HasClipboardText
  export _root_.sdl3.functions.SDL_HasEvent
  export _root_.sdl3.functions.SDL_HasEvents
  export _root_.sdl3.functions.SDL_HasExactlyOneBitSet32
  export _root_.sdl3.functions.SDL_HasGamepad
  export _root_.sdl3.functions.SDL_HasJoystick
  export _root_.sdl3.functions.SDL_HasKeyboard
  export _root_.sdl3.functions.SDL_HasLASX
  export _root_.sdl3.functions.SDL_HasLSX
  export _root_.sdl3.functions.SDL_HasMMX
  export _root_.sdl3.functions.SDL_HasMouse
  export _root_.sdl3.functions.SDL_HasNEON
  export _root_.sdl3.functions.SDL_HasPrimarySelectionText
  export _root_.sdl3.functions.SDL_HasProperty
  export _root_.sdl3.functions.SDL_HasRectIntersection
  export _root_.sdl3.functions.SDL_HasRectIntersectionFloat
  export _root_.sdl3.functions.SDL_HasSSE
  export _root_.sdl3.functions.SDL_HasSSE2
  export _root_.sdl3.functions.SDL_HasSSE3
  export _root_.sdl3.functions.SDL_HasSSE41
  export _root_.sdl3.functions.SDL_HasSSE42
  export _root_.sdl3.functions.SDL_HasScreenKeyboardSupport
  export _root_.sdl3.functions.SDL_HideCursor
  export _root_.sdl3.functions.SDL_HideWindow
  export _root_.sdl3.functions.SDL_IOFromConstMem
  export _root_.sdl3.functions.SDL_IOFromDynamicMem
  export _root_.sdl3.functions.SDL_IOFromFile
  export _root_.sdl3.functions.SDL_IOFromMem
  export _root_.sdl3.functions.SDL_IOprintf
  export _root_.sdl3.functions.SDL_IOvprintf
  export _root_.sdl3.functions.SDL_Init
  export _root_.sdl3.functions.SDL_InitHapticRumble
  export _root_.sdl3.functions.SDL_InitSubSystem
  export _root_.sdl3.functions.SDL_InsertGPUDebugLabel
  export _root_.sdl3.functions.SDL_IsGamepad
  export _root_.sdl3.functions.SDL_IsJoystickHaptic
  export _root_.sdl3.functions.SDL_IsJoystickVirtual
  export _root_.sdl3.functions.SDL_IsMouseHaptic
  export _root_.sdl3.functions.SDL_IsTV
  export _root_.sdl3.functions.SDL_IsTablet
  export _root_.sdl3.functions.SDL_JoystickConnected
  export _root_.sdl3.functions.SDL_JoystickEventsEnabled
  export _root_.sdl3.functions.SDL_KillProcess
  export _root_.sdl3.functions.SDL_LoadBMP
  export _root_.sdl3.functions.SDL_LoadBMP_IO
  export _root_.sdl3.functions.SDL_LoadFile
  export _root_.sdl3.functions.SDL_LoadFile_IO
  export _root_.sdl3.functions.SDL_LoadFunction
  export _root_.sdl3.functions.SDL_LoadObject
  export _root_.sdl3.functions.SDL_LoadWAV
  export _root_.sdl3.functions.SDL_LoadWAV_IO
  export _root_.sdl3.functions.SDL_LockAudioStream
  export _root_.sdl3.functions.SDL_LockJoysticks
  export _root_.sdl3.functions.SDL_LockMutex
  export _root_.sdl3.functions.SDL_LockProperties
  export _root_.sdl3.functions.SDL_LockRWLockForReading
  export _root_.sdl3.functions.SDL_LockRWLockForWriting
  export _root_.sdl3.functions.SDL_LockSpinlock
  export _root_.sdl3.functions.SDL_LockSurface
  export _root_.sdl3.functions.SDL_LockTexture
  export _root_.sdl3.functions.SDL_LockTextureToSurface
  export _root_.sdl3.functions.SDL_Log
  export _root_.sdl3.functions.SDL_LogCritical
  export _root_.sdl3.functions.SDL_LogDebug
  export _root_.sdl3.functions.SDL_LogError
  export _root_.sdl3.functions.SDL_LogInfo
  export _root_.sdl3.functions.SDL_LogMessage
  export _root_.sdl3.functions.SDL_LogMessageV
  export _root_.sdl3.functions.SDL_LogTrace
  export _root_.sdl3.functions.SDL_LogVerbose
  export _root_.sdl3.functions.SDL_LogWarn
  export _root_.sdl3.functions.SDL_MapGPUTransferBuffer
  export _root_.sdl3.functions.SDL_MapRGB
  export _root_.sdl3.functions.SDL_MapRGBA
  export _root_.sdl3.functions.SDL_MapSurfaceRGB
  export _root_.sdl3.functions.SDL_MapSurfaceRGBA
  export _root_.sdl3.functions.SDL_MaximizeWindow
  export _root_.sdl3.functions.SDL_MemoryBarrierAcquireFunction
  export _root_.sdl3.functions.SDL_MemoryBarrierReleaseFunction
  export _root_.sdl3.functions.SDL_Metal_CreateView
  export _root_.sdl3.functions.SDL_Metal_DestroyView
  export _root_.sdl3.functions.SDL_Metal_GetLayer
  export _root_.sdl3.functions.SDL_MinimizeWindow
  export _root_.sdl3.functions.SDL_MixAudio
  export _root_.sdl3.functions.SDL_MostSignificantBitIndex32
  export _root_.sdl3.functions.SDL_OnApplicationDidEnterBackground
  export _root_.sdl3.functions.SDL_OnApplicationDidEnterForeground
  export _root_.sdl3.functions.SDL_OnApplicationDidReceiveMemoryWarning
  export _root_.sdl3.functions.SDL_OnApplicationWillEnterBackground
  export _root_.sdl3.functions.SDL_OnApplicationWillEnterForeground
  export _root_.sdl3.functions.SDL_OnApplicationWillTerminate
  export _root_.sdl3.functions.SDL_OpenAudioDevice
  export _root_.sdl3.functions.SDL_OpenAudioDeviceStream
  export _root_.sdl3.functions.SDL_OpenCamera
  export _root_.sdl3.functions.SDL_OpenFileStorage
  export _root_.sdl3.functions.SDL_OpenGamepad
  export _root_.sdl3.functions.SDL_OpenHaptic
  export _root_.sdl3.functions.SDL_OpenHapticFromJoystick
  export _root_.sdl3.functions.SDL_OpenHapticFromMouse
  export _root_.sdl3.functions.SDL_OpenIO
  export _root_.sdl3.functions.SDL_OpenJoystick
  export _root_.sdl3.functions.SDL_OpenSensor
  export _root_.sdl3.functions.SDL_OpenStorage
  export _root_.sdl3.functions.SDL_OpenTitleStorage
  export _root_.sdl3.functions.SDL_OpenURL
  export _root_.sdl3.functions.SDL_OpenUserStorage
  export _root_.sdl3.functions.SDL_OutOfMemory
  export _root_.sdl3.functions.SDL_PauseAudioDevice
  export _root_.sdl3.functions.SDL_PauseAudioStreamDevice
  export _root_.sdl3.functions.SDL_PauseHaptic
  export _root_.sdl3.functions.SDL_PeepEvents
  export _root_.sdl3.functions.SDL_PlayHapticRumble
  export _root_.sdl3.functions.SDL_PointInRect
  export _root_.sdl3.functions.SDL_PointInRectFloat
  export _root_.sdl3.functions.SDL_PollEvent
  export _root_.sdl3.functions.SDL_PopGPUDebugGroup
  export _root_.sdl3.functions.SDL_PremultiplyAlpha
  export _root_.sdl3.functions.SDL_PremultiplySurfaceAlpha
  export _root_.sdl3.functions.SDL_PumpEvents
  export _root_.sdl3.functions.SDL_PushEvent
  export _root_.sdl3.functions.SDL_PushGPUComputeUniformData
  export _root_.sdl3.functions.SDL_PushGPUDebugGroup
  export _root_.sdl3.functions.SDL_PushGPUFragmentUniformData
  export _root_.sdl3.functions.SDL_PushGPUVertexUniformData
  export _root_.sdl3.functions.SDL_PutAudioStreamData
  export _root_.sdl3.functions.SDL_QueryGPUFence
  export _root_.sdl3.functions.SDL_Quit
  export _root_.sdl3.functions.SDL_QuitSubSystem
  export _root_.sdl3.functions.SDL_RaiseWindow
  export _root_.sdl3.functions.SDL_ReadIO
  export _root_.sdl3.functions.SDL_ReadProcess
  export _root_.sdl3.functions.SDL_ReadS16BE
  export _root_.sdl3.functions.SDL_ReadS16LE
  export _root_.sdl3.functions.SDL_ReadS32BE
  export _root_.sdl3.functions.SDL_ReadS32LE
  export _root_.sdl3.functions.SDL_ReadS64BE
  export _root_.sdl3.functions.SDL_ReadS64LE
  export _root_.sdl3.functions.SDL_ReadS8
  export _root_.sdl3.functions.SDL_ReadStorageFile
  export _root_.sdl3.functions.SDL_ReadSurfacePixel
  export _root_.sdl3.functions.SDL_ReadSurfacePixelFloat
  export _root_.sdl3.functions.SDL_ReadU16BE
  export _root_.sdl3.functions.SDL_ReadU16LE
  export _root_.sdl3.functions.SDL_ReadU32BE
  export _root_.sdl3.functions.SDL_ReadU32LE
  export _root_.sdl3.functions.SDL_ReadU64BE
  export _root_.sdl3.functions.SDL_ReadU64LE
  export _root_.sdl3.functions.SDL_ReadU8
  export _root_.sdl3.functions.SDL_RectEmpty
  export _root_.sdl3.functions.SDL_RectEmptyFloat
  export _root_.sdl3.functions.SDL_RectToFRect
  export _root_.sdl3.functions.SDL_RectsEqual
  export _root_.sdl3.functions.SDL_RectsEqualEpsilon
  export _root_.sdl3.functions.SDL_RectsEqualFloat
  export _root_.sdl3.functions.SDL_RegisterEvents
  export _root_.sdl3.functions.SDL_ReleaseCameraFrame
  export _root_.sdl3.functions.SDL_ReleaseGPUBuffer
  export _root_.sdl3.functions.SDL_ReleaseGPUComputePipeline
  export _root_.sdl3.functions.SDL_ReleaseGPUFence
  export _root_.sdl3.functions.SDL_ReleaseGPUGraphicsPipeline
  export _root_.sdl3.functions.SDL_ReleaseGPUSampler
  export _root_.sdl3.functions.SDL_ReleaseGPUShader
  export _root_.sdl3.functions.SDL_ReleaseGPUTexture
  export _root_.sdl3.functions.SDL_ReleaseGPUTransferBuffer
  export _root_.sdl3.functions.SDL_ReleaseWindowFromGPUDevice
  export _root_.sdl3.functions.SDL_ReloadGamepadMappings
  export _root_.sdl3.functions.SDL_RemoveEventWatch
  export _root_.sdl3.functions.SDL_RemoveHintCallback
  export _root_.sdl3.functions.SDL_RemovePath
  export _root_.sdl3.functions.SDL_RemoveStoragePath
  export _root_.sdl3.functions.SDL_RemoveSurfaceAlternateImages
  export _root_.sdl3.functions.SDL_RemoveTimer
  export _root_.sdl3.functions.SDL_RenamePath
  export _root_.sdl3.functions.SDL_RenameStoragePath
  export _root_.sdl3.functions.SDL_RenderClear
  export _root_.sdl3.functions.SDL_RenderClipEnabled
  export _root_.sdl3.functions.SDL_RenderCoordinatesFromWindow
  export _root_.sdl3.functions.SDL_RenderCoordinatesToWindow
  export _root_.sdl3.functions.SDL_RenderDebugText
  export _root_.sdl3.functions.SDL_RenderFillRect
  export _root_.sdl3.functions.SDL_RenderFillRects
  export _root_.sdl3.functions.SDL_RenderGeometry
  export _root_.sdl3.functions.SDL_RenderGeometryRaw
  export _root_.sdl3.functions.SDL_RenderLine
  export _root_.sdl3.functions.SDL_RenderLines
  export _root_.sdl3.functions.SDL_RenderPoint
  export _root_.sdl3.functions.SDL_RenderPoints
  export _root_.sdl3.functions.SDL_RenderPresent
  export _root_.sdl3.functions.SDL_RenderReadPixels
  export _root_.sdl3.functions.SDL_RenderRect
  export _root_.sdl3.functions.SDL_RenderRects
  export _root_.sdl3.functions.SDL_RenderTexture
  export _root_.sdl3.functions.SDL_RenderTexture9Grid
  export _root_.sdl3.functions.SDL_RenderTextureRotated
  export _root_.sdl3.functions.SDL_RenderTextureTiled
  export _root_.sdl3.functions.SDL_RenderViewportSet
  export _root_.sdl3.functions.SDL_ReportAssertion
  export _root_.sdl3.functions.SDL_ResetAssertionReport
  export _root_.sdl3.functions.SDL_ResetHint
  export _root_.sdl3.functions.SDL_ResetHints
  export _root_.sdl3.functions.SDL_ResetKeyboard
  export _root_.sdl3.functions.SDL_ResetLogPriorities
  export _root_.sdl3.functions.SDL_RestoreWindow
  export _root_.sdl3.functions.SDL_ResumeAudioDevice
  export _root_.sdl3.functions.SDL_ResumeAudioStreamDevice
  export _root_.sdl3.functions.SDL_ResumeHaptic
  export _root_.sdl3.functions.SDL_RumbleGamepad
  export _root_.sdl3.functions.SDL_RumbleGamepadTriggers
  export _root_.sdl3.functions.SDL_RumbleJoystick
  export _root_.sdl3.functions.SDL_RumbleJoystickTriggers
  export _root_.sdl3.functions.SDL_RunHapticEffect
  export _root_.sdl3.functions.SDL_SaveBMP
  export _root_.sdl3.functions.SDL_SaveBMP_IO
  export _root_.sdl3.functions.SDL_ScaleSurface
  export _root_.sdl3.functions.SDL_ScreenKeyboardShown
  export _root_.sdl3.functions.SDL_ScreenSaverEnabled
  export _root_.sdl3.functions.SDL_SeekIO
  export _root_.sdl3.functions.SDL_SendGamepadEffect
  export _root_.sdl3.functions.SDL_SendJoystickEffect
  export _root_.sdl3.functions.SDL_SendJoystickVirtualSensorData
  export _root_.sdl3.functions.SDL_SetAppMetadata
  export _root_.sdl3.functions.SDL_SetAppMetadataProperty
  export _root_.sdl3.functions.SDL_SetAssertionHandler
  export _root_.sdl3.functions.SDL_SetAtomicInt
  export _root_.sdl3.functions.SDL_SetAtomicPointer
  export _root_.sdl3.functions.SDL_SetAtomicU32
  export _root_.sdl3.functions.SDL_SetAudioDeviceGain
  export _root_.sdl3.functions.SDL_SetAudioPostmixCallback
  export _root_.sdl3.functions.SDL_SetAudioStreamFormat
  export _root_.sdl3.functions.SDL_SetAudioStreamFrequencyRatio
  export _root_.sdl3.functions.SDL_SetAudioStreamGain
  export _root_.sdl3.functions.SDL_SetAudioStreamGetCallback
  export _root_.sdl3.functions.SDL_SetAudioStreamInputChannelMap
  export _root_.sdl3.functions.SDL_SetAudioStreamOutputChannelMap
  export _root_.sdl3.functions.SDL_SetAudioStreamPutCallback
  export _root_.sdl3.functions.SDL_SetBooleanProperty
  export _root_.sdl3.functions.SDL_SetClipboardData
  export _root_.sdl3.functions.SDL_SetClipboardText
  export _root_.sdl3.functions.SDL_SetCurrentThreadPriority
  export _root_.sdl3.functions.SDL_SetCursor
  export _root_.sdl3.functions.SDL_SetEnvironmentVariable
  export _root_.sdl3.functions.SDL_SetError
  export _root_.sdl3.functions.SDL_SetErrorV
  export _root_.sdl3.functions.SDL_SetEventEnabled
  export _root_.sdl3.functions.SDL_SetEventFilter
  export _root_.sdl3.functions.SDL_SetFloatProperty
  export _root_.sdl3.functions.SDL_SetGPUBufferName
  export _root_.sdl3.functions.SDL_SetGPUScissor
  export _root_.sdl3.functions.SDL_SetGPUStencilReference
  export _root_.sdl3.functions.SDL_SetGPUSwapchainParameters
  export _root_.sdl3.functions.SDL_SetGPUTextureName
  export _root_.sdl3.functions.SDL_SetGPUViewport
  export _root_.sdl3.functions.SDL_SetGamepadEventsEnabled
  export _root_.sdl3.functions.SDL_SetGamepadLED
  export _root_.sdl3.functions.SDL_SetGamepadMapping
  export _root_.sdl3.functions.SDL_SetGamepadPlayerIndex
  export _root_.sdl3.functions.SDL_SetGamepadSensorEnabled
  export _root_.sdl3.functions.SDL_SetHapticAutocenter
  export _root_.sdl3.functions.SDL_SetHapticGain
  export _root_.sdl3.functions.SDL_SetHint
  export _root_.sdl3.functions.SDL_SetHintWithPriority
  export _root_.sdl3.functions.SDL_SetInitialized
  export _root_.sdl3.functions.SDL_SetJoystickEventsEnabled
  export _root_.sdl3.functions.SDL_SetJoystickLED
  export _root_.sdl3.functions.SDL_SetJoystickPlayerIndex
  export _root_.sdl3.functions.SDL_SetJoystickVirtualAxis
  export _root_.sdl3.functions.SDL_SetJoystickVirtualBall
  export _root_.sdl3.functions.SDL_SetJoystickVirtualButton
  export _root_.sdl3.functions.SDL_SetJoystickVirtualHat
  export _root_.sdl3.functions.SDL_SetJoystickVirtualTouchpad
  export _root_.sdl3.functions.SDL_SetLogOutputFunction
  export _root_.sdl3.functions.SDL_SetLogPriorities
  export _root_.sdl3.functions.SDL_SetLogPriority
  export _root_.sdl3.functions.SDL_SetLogPriorityPrefix
  export _root_.sdl3.functions.SDL_SetMemoryFunctions
  export _root_.sdl3.functions.SDL_SetModState
  export _root_.sdl3.functions.SDL_SetNumberProperty
  export _root_.sdl3.functions.SDL_SetPaletteColors
  export _root_.sdl3.functions.SDL_SetPointerProperty
  export _root_.sdl3.functions.SDL_SetPointerPropertyWithCleanup
  export _root_.sdl3.functions.SDL_SetPrimarySelectionText
  export _root_.sdl3.functions.SDL_SetRenderClipRect
  export _root_.sdl3.functions.SDL_SetRenderColorScale
  export _root_.sdl3.functions.SDL_SetRenderDrawBlendMode
  export _root_.sdl3.functions.SDL_SetRenderDrawColor
  export _root_.sdl3.functions.SDL_SetRenderDrawColorFloat
  export _root_.sdl3.functions.SDL_SetRenderLogicalPresentation
  export _root_.sdl3.functions.SDL_SetRenderScale
  export _root_.sdl3.functions.SDL_SetRenderTarget
  export _root_.sdl3.functions.SDL_SetRenderVSync
  export _root_.sdl3.functions.SDL_SetRenderViewport
  export _root_.sdl3.functions.SDL_SetScancodeName
  export _root_.sdl3.functions.SDL_SetStringProperty
  export _root_.sdl3.functions.SDL_SetSurfaceAlphaMod
  export _root_.sdl3.functions.SDL_SetSurfaceBlendMode
  export _root_.sdl3.functions.SDL_SetSurfaceClipRect
  export _root_.sdl3.functions.SDL_SetSurfaceColorKey
  export _root_.sdl3.functions.SDL_SetSurfaceColorMod
  export _root_.sdl3.functions.SDL_SetSurfaceColorspace
  export _root_.sdl3.functions.SDL_SetSurfacePalette
  export _root_.sdl3.functions.SDL_SetSurfaceRLE
  export _root_.sdl3.functions.SDL_SetTLS
  export _root_.sdl3.functions.SDL_SetTextInputArea
  export _root_.sdl3.functions.SDL_SetTextureAlphaMod
  export _root_.sdl3.functions.SDL_SetTextureAlphaModFloat
  export _root_.sdl3.functions.SDL_SetTextureBlendMode
  export _root_.sdl3.functions.SDL_SetTextureColorMod
  export _root_.sdl3.functions.SDL_SetTextureColorModFloat
  export _root_.sdl3.functions.SDL_SetTextureScaleMode
  export _root_.sdl3.functions.SDL_SetWindowAlwaysOnTop
  export _root_.sdl3.functions.SDL_SetWindowAspectRatio
  export _root_.sdl3.functions.SDL_SetWindowBordered
  export _root_.sdl3.functions.SDL_SetWindowFocusable
  export _root_.sdl3.functions.SDL_SetWindowFullscreen
  export _root_.sdl3.functions.SDL_SetWindowFullscreenMode
  export _root_.sdl3.functions.SDL_SetWindowHitTest
  export _root_.sdl3.functions.SDL_SetWindowIcon
  export _root_.sdl3.functions.SDL_SetWindowKeyboardGrab
  export _root_.sdl3.functions.SDL_SetWindowMaximumSize
  export _root_.sdl3.functions.SDL_SetWindowMinimumSize
  export _root_.sdl3.functions.SDL_SetWindowModal
  export _root_.sdl3.functions.SDL_SetWindowMouseGrab
  export _root_.sdl3.functions.SDL_SetWindowMouseRect
  export _root_.sdl3.functions.SDL_SetWindowOpacity
  export _root_.sdl3.functions.SDL_SetWindowParent
  export _root_.sdl3.functions.SDL_SetWindowPosition
  export _root_.sdl3.functions.SDL_SetWindowRelativeMouseMode
  export _root_.sdl3.functions.SDL_SetWindowResizable
  export _root_.sdl3.functions.SDL_SetWindowShape
  export _root_.sdl3.functions.SDL_SetWindowSize
  export _root_.sdl3.functions.SDL_SetWindowSurfaceVSync
  export _root_.sdl3.functions.SDL_SetWindowTitle
  export _root_.sdl3.functions.SDL_SetX11EventHook
  export _root_.sdl3.functions.SDL_ShouldInit
  export _root_.sdl3.functions.SDL_ShouldQuit
  export _root_.sdl3.functions.SDL_ShowCursor
  export _root_.sdl3.functions.SDL_ShowMessageBox
  export _root_.sdl3.functions.SDL_ShowOpenFileDialog
  export _root_.sdl3.functions.SDL_ShowOpenFolderDialog
  export _root_.sdl3.functions.SDL_ShowSaveFileDialog
  export _root_.sdl3.functions.SDL_ShowSimpleMessageBox
  export _root_.sdl3.functions.SDL_ShowWindow
  export _root_.sdl3.functions.SDL_ShowWindowSystemMenu
  export _root_.sdl3.functions.SDL_SignalCondition
  export _root_.sdl3.functions.SDL_SignalSemaphore
  export _root_.sdl3.functions.SDL_StartTextInput
  export _root_.sdl3.functions.SDL_StartTextInputWithProperties
  export _root_.sdl3.functions.SDL_StepBackUTF8
  export _root_.sdl3.functions.SDL_StepUTF8
  export _root_.sdl3.functions.SDL_StopHapticEffect
  export _root_.sdl3.functions.SDL_StopHapticEffects
  export _root_.sdl3.functions.SDL_StopHapticRumble
  export _root_.sdl3.functions.SDL_StopTextInput
  export _root_.sdl3.functions.SDL_StorageReady
  export _root_.sdl3.functions.SDL_SubmitGPUCommandBuffer
  export _root_.sdl3.functions.SDL_SubmitGPUCommandBufferAndAcquireFence
  export _root_.sdl3.functions.SDL_SurfaceHasAlternateImages
  export _root_.sdl3.functions.SDL_SurfaceHasColorKey
  export _root_.sdl3.functions.SDL_SurfaceHasRLE
  export _root_.sdl3.functions.SDL_SwapFloat
  export _root_.sdl3.functions.SDL_SyncWindow
  export _root_.sdl3.functions.SDL_TellIO
  export _root_.sdl3.functions.SDL_TextInputActive
  export _root_.sdl3.functions.SDL_TimeFromWindows
  export _root_.sdl3.functions.SDL_TimeToDateTime
  export _root_.sdl3.functions.SDL_TimeToWindows
  export _root_.sdl3.functions.SDL_TryLockMutex
  export _root_.sdl3.functions.SDL_TryLockRWLockForReading
  export _root_.sdl3.functions.SDL_TryLockRWLockForWriting
  export _root_.sdl3.functions.SDL_TryLockSpinlock
  export _root_.sdl3.functions.SDL_TryWaitSemaphore
  export _root_.sdl3.functions.SDL_UCS4ToUTF8
  export _root_.sdl3.functions.SDL_UnbindAudioStream
  export _root_.sdl3.functions.SDL_UnbindAudioStreams
  export _root_.sdl3.functions.SDL_UnloadObject
  export _root_.sdl3.functions.SDL_UnlockAudioStream
  export _root_.sdl3.functions.SDL_UnlockJoysticks
  export _root_.sdl3.functions.SDL_UnlockMutex
  export _root_.sdl3.functions.SDL_UnlockProperties
  export _root_.sdl3.functions.SDL_UnlockRWLock
  export _root_.sdl3.functions.SDL_UnlockSpinlock
  export _root_.sdl3.functions.SDL_UnlockSurface
  export _root_.sdl3.functions.SDL_UnlockTexture
  export _root_.sdl3.functions.SDL_UnmapGPUTransferBuffer
  export _root_.sdl3.functions.SDL_UnsetEnvironmentVariable
  export _root_.sdl3.functions.SDL_UpdateGamepads
  export _root_.sdl3.functions.SDL_UpdateHapticEffect
  export _root_.sdl3.functions.SDL_UpdateJoysticks
  export _root_.sdl3.functions.SDL_UpdateNVTexture
  export _root_.sdl3.functions.SDL_UpdateSensors
  export _root_.sdl3.functions.SDL_UpdateTexture
  export _root_.sdl3.functions.SDL_UpdateWindowSurface
  export _root_.sdl3.functions.SDL_UpdateWindowSurfaceRects
  export _root_.sdl3.functions.SDL_UpdateYUVTexture
  export _root_.sdl3.functions.SDL_UploadToGPUBuffer
  export _root_.sdl3.functions.SDL_UploadToGPUTexture
  export _root_.sdl3.functions.SDL_WaitCondition
  export _root_.sdl3.functions.SDL_WaitConditionTimeout
  export _root_.sdl3.functions.SDL_WaitEvent
  export _root_.sdl3.functions.SDL_WaitEventTimeout
  export _root_.sdl3.functions.SDL_WaitForGPUFences
  export _root_.sdl3.functions.SDL_WaitForGPUIdle
  export _root_.sdl3.functions.SDL_WaitProcess
  export _root_.sdl3.functions.SDL_WaitSemaphore
  export _root_.sdl3.functions.SDL_WaitSemaphoreTimeout
  export _root_.sdl3.functions.SDL_WaitThread
  export _root_.sdl3.functions.SDL_WarpMouseGlobal
  export _root_.sdl3.functions.SDL_WarpMouseInWindow
  export _root_.sdl3.functions.SDL_WasInit
  export _root_.sdl3.functions.SDL_WindowHasSurface
  export _root_.sdl3.functions.SDL_WindowSupportsGPUPresentMode
  export _root_.sdl3.functions.SDL_WindowSupportsGPUSwapchainComposition
  export _root_.sdl3.functions.SDL_WriteIO
  export _root_.sdl3.functions.SDL_WriteS16BE
  export _root_.sdl3.functions.SDL_WriteS16LE
  export _root_.sdl3.functions.SDL_WriteS32BE
  export _root_.sdl3.functions.SDL_WriteS32LE
  export _root_.sdl3.functions.SDL_WriteS64BE
  export _root_.sdl3.functions.SDL_WriteS64LE
  export _root_.sdl3.functions.SDL_WriteS8
  export _root_.sdl3.functions.SDL_WriteStorageFile
  export _root_.sdl3.functions.SDL_WriteSurfacePixel
  export _root_.sdl3.functions.SDL_WriteSurfacePixelFloat
  export _root_.sdl3.functions.SDL_WriteU16BE
  export _root_.sdl3.functions.SDL_WriteU16LE
  export _root_.sdl3.functions.SDL_WriteU32BE
  export _root_.sdl3.functions.SDL_WriteU32LE
  export _root_.sdl3.functions.SDL_WriteU64BE
  export _root_.sdl3.functions.SDL_WriteU64LE
  export _root_.sdl3.functions.SDL_WriteU8
  export _root_.sdl3.functions.SDL_abs
  export _root_.sdl3.functions.SDL_acos
  export _root_.sdl3.functions.SDL_acosf
  export _root_.sdl3.functions.SDL_aligned_alloc
  export _root_.sdl3.functions.SDL_aligned_free
  export _root_.sdl3.functions.SDL_asin
  export _root_.sdl3.functions.SDL_asinf
  export _root_.sdl3.functions.SDL_asprintf
  export _root_.sdl3.functions.SDL_atan
  export _root_.sdl3.functions.SDL_atan2
  export _root_.sdl3.functions.SDL_atan2f
  export _root_.sdl3.functions.SDL_atanf
  export _root_.sdl3.functions.SDL_atof
  export _root_.sdl3.functions.SDL_atoi
  export _root_.sdl3.functions.SDL_bsearch
  export _root_.sdl3.functions.SDL_bsearch_r
  export _root_.sdl3.functions.SDL_calloc
  export _root_.sdl3.functions.SDL_ceil
  export _root_.sdl3.functions.SDL_ceilf
  export _root_.sdl3.functions.SDL_copysign
  export _root_.sdl3.functions.SDL_copysignf
  export _root_.sdl3.functions.SDL_cos
  export _root_.sdl3.functions.SDL_cosf
  export _root_.sdl3.functions.SDL_crc16
  export _root_.sdl3.functions.SDL_crc32
  export _root_.sdl3.functions.SDL_exp
  export _root_.sdl3.functions.SDL_expf
  export _root_.sdl3.functions.SDL_fabs
  export _root_.sdl3.functions.SDL_fabsf
  export _root_.sdl3.functions.SDL_floor
  export _root_.sdl3.functions.SDL_floorf
  export _root_.sdl3.functions.SDL_fmod
  export _root_.sdl3.functions.SDL_fmodf
  export _root_.sdl3.functions.SDL_free
  export _root_.sdl3.functions.SDL_getenv
  export _root_.sdl3.functions.SDL_getenv_unsafe
  export _root_.sdl3.functions.SDL_hid_ble_scan
  export _root_.sdl3.functions.SDL_hid_close
  export _root_.sdl3.functions.SDL_hid_device_change_count
  export _root_.sdl3.functions.SDL_hid_enumerate
  export _root_.sdl3.functions.SDL_hid_exit
  export _root_.sdl3.functions.SDL_hid_free_enumeration
  export _root_.sdl3.functions.SDL_hid_get_device_info
  export _root_.sdl3.functions.SDL_hid_get_feature_report
  export _root_.sdl3.functions.SDL_hid_get_indexed_string
  export _root_.sdl3.functions.SDL_hid_get_input_report
  export _root_.sdl3.functions.SDL_hid_get_manufacturer_string
  export _root_.sdl3.functions.SDL_hid_get_product_string
  export _root_.sdl3.functions.SDL_hid_get_report_descriptor
  export _root_.sdl3.functions.SDL_hid_get_serial_number_string
  export _root_.sdl3.functions.SDL_hid_init
  export _root_.sdl3.functions.SDL_hid_open
  export _root_.sdl3.functions.SDL_hid_open_path
  export _root_.sdl3.functions.SDL_hid_read
  export _root_.sdl3.functions.SDL_hid_read_timeout
  export _root_.sdl3.functions.SDL_hid_send_feature_report
  export _root_.sdl3.functions.SDL_hid_set_nonblocking
  export _root_.sdl3.functions.SDL_hid_write
  export _root_.sdl3.functions.SDL_iconv
  export _root_.sdl3.functions.SDL_iconv_close
  export _root_.sdl3.functions.SDL_iconv_open
  export _root_.sdl3.functions.SDL_iconv_string
  export _root_.sdl3.functions.SDL_isalnum
  export _root_.sdl3.functions.SDL_isalpha
  export _root_.sdl3.functions.SDL_isblank
  export _root_.sdl3.functions.SDL_iscntrl
  export _root_.sdl3.functions.SDL_isdigit
  export _root_.sdl3.functions.SDL_isgraph
  export _root_.sdl3.functions.SDL_isinf
  export _root_.sdl3.functions.SDL_isinff
  export _root_.sdl3.functions.SDL_islower
  export _root_.sdl3.functions.SDL_isnan
  export _root_.sdl3.functions.SDL_isnanf
  export _root_.sdl3.functions.SDL_isprint
  export _root_.sdl3.functions.SDL_ispunct
  export _root_.sdl3.functions.SDL_isspace
  export _root_.sdl3.functions.SDL_isupper
  export _root_.sdl3.functions.SDL_isxdigit
  export _root_.sdl3.functions.SDL_itoa
  export _root_.sdl3.functions.SDL_lltoa
  export _root_.sdl3.functions.SDL_log
  export _root_.sdl3.functions.SDL_log10
  export _root_.sdl3.functions.SDL_log10f
  export _root_.sdl3.functions.SDL_logf
  export _root_.sdl3.functions.SDL_lround
  export _root_.sdl3.functions.SDL_lroundf
  export _root_.sdl3.functions.SDL_ltoa
  export _root_.sdl3.functions.SDL_malloc
  export _root_.sdl3.functions.SDL_memcmp
  export _root_.sdl3.functions.SDL_memcpy
  export _root_.sdl3.functions.SDL_memmove
  export _root_.sdl3.functions.SDL_memset
  export _root_.sdl3.functions.SDL_memset4
  export _root_.sdl3.functions.SDL_modf
  export _root_.sdl3.functions.SDL_modff
  export _root_.sdl3.functions.SDL_murmur3_32
  export _root_.sdl3.functions.SDL_pow
  export _root_.sdl3.functions.SDL_powf
  export _root_.sdl3.functions.SDL_qsort
  export _root_.sdl3.functions.SDL_qsort_r
  export _root_.sdl3.functions.SDL_rand
  export _root_.sdl3.functions.SDL_rand_bits
  export _root_.sdl3.functions.SDL_rand_bits_r
  export _root_.sdl3.functions.SDL_rand_r
  export _root_.sdl3.functions.SDL_randf
  export _root_.sdl3.functions.SDL_randf_r
  export _root_.sdl3.functions.SDL_realloc
  export _root_.sdl3.functions.SDL_round
  export _root_.sdl3.functions.SDL_roundf
  export _root_.sdl3.functions.SDL_scalbn
  export _root_.sdl3.functions.SDL_scalbnf
  export _root_.sdl3.functions.SDL_setenv_unsafe
  export _root_.sdl3.functions.SDL_sin
  export _root_.sdl3.functions.SDL_sinf
  export _root_.sdl3.functions.SDL_size_add_check_overflow
  export _root_.sdl3.functions.SDL_size_add_check_overflow_builtin
  export _root_.sdl3.functions.SDL_size_mul_check_overflow
  export _root_.sdl3.functions.SDL_size_mul_check_overflow_builtin
  export _root_.sdl3.functions.SDL_snprintf
  export _root_.sdl3.functions.SDL_sqrt
  export _root_.sdl3.functions.SDL_sqrtf
  export _root_.sdl3.functions.SDL_srand
  export _root_.sdl3.functions.SDL_sscanf
  export _root_.sdl3.functions.SDL_strcasecmp
  export _root_.sdl3.functions.SDL_strcasestr
  export _root_.sdl3.functions.SDL_strchr
  export _root_.sdl3.functions.SDL_strcmp
  export _root_.sdl3.functions.SDL_strdup
  export _root_.sdl3.functions.SDL_strlcat
  export _root_.sdl3.functions.SDL_strlcpy
  export _root_.sdl3.functions.SDL_strlen
  export _root_.sdl3.functions.SDL_strlwr
  export _root_.sdl3.functions.SDL_strncasecmp
  export _root_.sdl3.functions.SDL_strncmp
  export _root_.sdl3.functions.SDL_strndup
  export _root_.sdl3.functions.SDL_strnlen
  export _root_.sdl3.functions.SDL_strnstr
  export _root_.sdl3.functions.SDL_strpbrk
  export _root_.sdl3.functions.SDL_strrchr
  export _root_.sdl3.functions.SDL_strrev
  export _root_.sdl3.functions.SDL_strstr
  export _root_.sdl3.functions.SDL_strtod
  export _root_.sdl3.functions.SDL_strtok_r
  export _root_.sdl3.functions.SDL_strtol
  export _root_.sdl3.functions.SDL_strtoll
  export _root_.sdl3.functions.SDL_strtoul
  export _root_.sdl3.functions.SDL_strtoull
  export _root_.sdl3.functions.SDL_strupr
  export _root_.sdl3.functions.SDL_swprintf
  export _root_.sdl3.functions.SDL_tan
  export _root_.sdl3.functions.SDL_tanf
  export _root_.sdl3.functions.SDL_tolower
  export _root_.sdl3.functions.SDL_toupper
  export _root_.sdl3.functions.SDL_trunc
  export _root_.sdl3.functions.SDL_truncf
  export _root_.sdl3.functions.SDL_uitoa
  export _root_.sdl3.functions.SDL_ulltoa
  export _root_.sdl3.functions.SDL_ultoa
  export _root_.sdl3.functions.SDL_unsetenv_unsafe
  export _root_.sdl3.functions.SDL_utf8strlcpy
  export _root_.sdl3.functions.SDL_utf8strlen
  export _root_.sdl3.functions.SDL_utf8strnlen
  export _root_.sdl3.functions.SDL_vasprintf
  export _root_.sdl3.functions.SDL_vsnprintf
  export _root_.sdl3.functions.SDL_vsscanf
  export _root_.sdl3.functions.SDL_vswprintf
  export _root_.sdl3.functions.SDL_wcscasecmp
  export _root_.sdl3.functions.SDL_wcscmp
  export _root_.sdl3.functions.SDL_wcsdup
  export _root_.sdl3.functions.SDL_wcslcat
  export _root_.sdl3.functions.SDL_wcslcpy
  export _root_.sdl3.functions.SDL_wcslen
  export _root_.sdl3.functions.SDL_wcsncasecmp
  export _root_.sdl3.functions.SDL_wcsncmp
  export _root_.sdl3.functions.SDL_wcsnlen
  export _root_.sdl3.functions.SDL_wcsnstr
  export _root_.sdl3.functions.SDL_wcsstr
  export _root_.sdl3.functions.SDL_wcstol
  export _root_.sdl3.functions.SDL_GUIDToString
  export _root_.sdl3.functions.SDL_GetGamepadGUIDForID
  export _root_.sdl3.functions.SDL_GetGamepadMappingForGUID
  export _root_.sdl3.functions.SDL_GetJoystickGUID
  export _root_.sdl3.functions.SDL_GetJoystickGUIDForID
  export _root_.sdl3.functions.SDL_GetJoystickGUIDInfo
  export _root_.sdl3.functions.SDL_SetGPUBlendConstants
  export _root_.sdl3.functions.SDL_StringToGUID
end all
