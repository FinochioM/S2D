package s2d.types

import s2d.backend.sdl2.Extras.*

enum Key(val keycode: Int):
  case A extends Key(SDLK_a)
  case B extends Key(SDLK_b)
  case C extends Key(SDLK_c)
  case D extends Key(SDLK_d)
  case E extends Key(SDLK_e)
  case F extends Key(SDLK_f)
  case G extends Key(SDLK_g)
  case H extends Key(SDLK_h)
  case I extends Key(SDLK_i)
  case J extends Key(SDLK_j)
  case K extends Key(SDLK_k)
  case L extends Key(SDLK_l)
  case M extends Key(SDLK_m)
  case N extends Key(SDLK_n)
  case O extends Key(SDLK_o)
  case P extends Key(SDLK_p)
  case Q extends Key(SDLK_q)
  case R extends Key(SDLK_r)
  case S extends Key(SDLK_s)
  case T extends Key(SDLK_t)
  case U extends Key(SDLK_u)
  case V extends Key(SDLK_v)
  case W extends Key(SDLK_w)
  case X extends Key(SDLK_x)
  case Y extends Key(SDLK_y)
  case Z extends Key(SDLK_z)

  case Zero extends Key(SDLK_0)
  case One extends Key(SDLK_1)
  case Two extends Key(SDLK_2)
  case Three extends Key(SDLK_3)
  case Four extends Key(SDLK_4)
  case Five extends Key(SDLK_5)
  case Six extends Key(SDLK_6)
  case Seven extends Key(SDLK_7)
  case Eight extends Key(SDLK_8)
  case Nine extends Key(SDLK_9)

  case Up extends Key(SDLK_UP)
  case Down extends Key(SDLK_DOWN)
  case Left extends Key(SDLK_LEFT)
  case Right extends Key(SDLK_RIGHT)

  case F1 extends Key(SDLK_F1)
  case F2 extends Key(SDLK_F2)
  case F3 extends Key(SDLK_F3)
  case F4 extends Key(SDLK_F4)
  case F5 extends Key(SDLK_F5)
  case F6 extends Key(SDLK_F6)
  case F7 extends Key(SDLK_F7)
  case F8 extends Key(SDLK_F8)
  case F9 extends Key(SDLK_F9)
  case F10 extends Key(SDLK_F10)
  case F11 extends Key(SDLK_F11)
  case F12 extends Key(SDLK_F12)

  case Space extends Key(SDLK_SPACE)
  case Enter extends Key(SDLK_RETURN)
  case Escape extends Key(SDLK_ESCAPE)
  case Backspace extends Key(SDLK_BACKSPACE)
  case Tab extends Key(SDLK_TAB)
  case Delete extends Key(SDLK_DELETE)
  case Insert extends Key(SDLK_INSERT)
  case Home extends Key(SDLK_HOME)
  case End extends Key(SDLK_END)
  case PageUp extends Key(SDLK_PAGEUP)
  case PageDown extends Key(SDLK_PAGEDOWN)

  case LeftShift extends Key(SDLK_LSHIFT)
  case RightShift extends Key(SDLK_RSHIFT)
  case LeftControl extends Key(SDLK_LCTRL)
  case RightControl extends Key(SDLK_RCTRL)
  case LeftAlt extends Key(SDLK_LALT)
  case RightAlt extends Key(SDLK_RALT)
  case CapsLock extends Key(SDLK_CAPSLOCK)

  case Minus extends Key(SDLK_MINUS)
  case Plus extends Key(SDLK_PLUS)
  case LeftBracket extends Key(SDLK_LEFTBRACKET)
  case RightBracket extends Key(SDLK_RIGHTBRACKET)
  case Semicolon extends Key(SDLK_SEMICOLON)
  case Quote extends Key(SDLK_QUOTE)
  case Comma extends Key(SDLK_COMMA)
  case Period extends Key(SDLK_PERIOD)
  case Slash extends Key(SDLK_SLASH)
  case Backslash extends Key(SDLK_BACKSLASH)

  case Unknown extends Key(SDLK_UNKNOWN)
end Key

object Key:
  def fromKeycode(keycode: Int): Key =
    Key.values.find(_.keycode == keycode).getOrElse(Key.Unknown)
end Key